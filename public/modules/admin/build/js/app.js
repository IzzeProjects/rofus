/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/js/components/LoginForm.vue?vue&type=script&lang=js&":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/js/components/LoginForm.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: \"LoginForm\",\n  props: ['method', 'route', 'serverErrors', 'inputs'],\n  data: function data() {\n    return {\n      email: null,\n      password: null,\n      token: document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n    };\n  },\n  mounted: function mounted() {\n    this.email = this.inputsJsonParse.email;\n    this.$validator.pause();\n  },\n  methods: {\n    checkForm: function checkForm(e) {\n      this.$validator.resume();\n      this.$validator.validateAll().then(function (result) {\n        if (result) {\n          return;\n        }\n\n        e.preventDefault();\n      });\n    }\n  },\n  computed: {\n    errorsJsonParse: function errorsJsonParse() {\n      return JSON.parse(this.serverErrors);\n    },\n    inputsJsonParse: function inputsJsonParse() {\n      return JSON.parse(this.inputs);\n    }\n  }\n});\n\n//# sourceURL=webpack:///./src/js/components/LoginForm.vue?./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/File.vue?vue&type=script&lang=js&":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/js/components/form/File.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n//\n//\n//\n//\n//\n//\n//\n//\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: \"File\",\n  props: ['name', 'default'],\n  data: function data() {\n    return {\n      fileUrl: this[\"default\"] ? this[\"default\"] : '',\n      fileName: ''\n    };\n  },\n  methods: {\n    lfm: function lfm(options, cb) {\n      var route_prefix = options && options.prefix ? options.prefix : '/laravel-filemanager';\n      window.open(route_prefix + '?type=' + options.type || 'file', 'FileManager', 'width=1200,height=900');\n      window.SetUrl = cb;\n    },\n    openManager: function openManager() {\n      var _this = this;\n\n      this.lfm({\n        type: 'image'\n      }, function (url, path) {\n        _this.fileUrl = url[0].url;\n        _this.fileName = url[0].name;\n      });\n    }\n  },\n  computed: {\n    url: function url() {\n      return this.fileUrl ? this.fileUrl.replace(/^.*\\/\\/[^\\/]+/, '') : '';\n    }\n  }\n});\n\n//# sourceURL=webpack:///./src/js/components/form/File.vue?./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/ImageIterator.vue?vue&type=script&lang=js&":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/js/components/form/ImageIterator.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _File__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./File */ \"./src/js/components/form/File.vue\");\n/* harmony import */ var vuedraggable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vuedraggable */ \"./node_modules/vuedraggable/dist/vuedraggable.common.js\");\n/* harmony import */ var vuedraggable__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vuedraggable__WEBPACK_IMPORTED_MODULE_1__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  components: {\n    File: _File__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    draggable: vuedraggable__WEBPACK_IMPORTED_MODULE_1___default.a\n  },\n  props: ['default'],\n  data: function data() {\n    return {\n      images: JSON.parse(this[\"default\"]),\n      currentIndex: 1\n    };\n  },\n  methods: {\n    addIterate: function addIterate() {\n      this.currentIndex++;\n      this.images.push({\n        id: this.currentIndex\n      });\n    },\n    removeIterate: function removeIterate(index) {\n      this.images.splice(index, 1);\n    }\n  },\n  mounted: function mounted() {\n    if (this.images.length > 0) this.currentIndex = Math.max.apply(Math, this.images.map(function (o) {\n      return o.id;\n    }));\n  },\n  name: \"ImageIterator\"\n});\n\n//# sourceURL=webpack:///./src/js/components/form/ImageIterator.vue?./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/MultiSelect.vue?vue&type=script&lang=js&":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/js/components/form/MultiSelect.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue_search_select__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue-search-select */ \"./node_modules/vue-search-select/publish/vue-search-select.js\");\n/* harmony import */ var vue_search_select__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue_search_select__WEBPACK_IMPORTED_MODULE_0__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: ['items', 'value', 'text', 'name', 'default'],\n  data: function data() {\n    return {\n      data: JSON.parse(this.items),\n      searchText: '',\n      selectedItems: [],\n      lastSelectItem: {}\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    if (this[\"default\"]) {\n      (function () {\n        var def = JSON.parse(_this[\"default\"]);\n\n        if (Array.isArray(def)) {\n          var _loop = function _loop(key) {\n            console.log(def[key]);\n\n            var found = _this.data.filter(function (obj) {\n              return obj[_this.value] == def[key];\n            })[0];\n\n            if (found) {\n              _this.selectedItems.push(found);\n            }\n          };\n\n          for (var key in def) {\n            _loop(key);\n          }\n        } else {\n          _this.selectedItems.push(def);\n        }\n      })();\n    }\n  },\n  methods: {\n    onSelect: function onSelect(items, lastSelectItem) {\n      this.selectedItems = items;\n      this.lastSelectItem = lastSelectItem;\n    }\n  },\n  components: {\n    MultiListSelect: vue_search_select__WEBPACK_IMPORTED_MODULE_0__[\"MultiListSelect\"]\n  }\n});\n\n//# sourceURL=webpack:///./src/js/components/form/MultiSelect.vue?./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/Select.vue?vue&type=script&lang=js&":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/js/components/form/Select.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var vue_search_select__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue-search-select */ \"./node_modules/vue-search-select/publish/vue-search-select.js\");\n/* harmony import */ var vue_search_select__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vue_search_select__WEBPACK_IMPORTED_MODULE_0__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: ['items', 'value', 'text', 'name', 'default'],\n  data: function data() {\n    return {\n      data: JSON.parse(this.items),\n      objectItem: {}\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.objectItem = this.data[0];\n\n    if (this[\"default\"]) {\n      this.objectItem = this.data.filter(function (obj) {\n        return obj[_this.value] == _this[\"default\"];\n      })[0];\n    }\n  },\n  components: {\n    ModelListSelect: vue_search_select__WEBPACK_IMPORTED_MODULE_0__[\"ModelListSelect\"]\n  }\n});\n\n//# sourceURL=webpack:///./src/js/components/form/Select.vue?./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : undefined\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n\n\n//# sourceURL=webpack:///./node_modules/regenerator-runtime/runtime.js?");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/setimmediate/setImmediate.js?");

/***/ }),

/***/ "./node_modules/sortablejs/Sortable.js":
/*!*********************************************!*\
  !*** ./node_modules/sortablejs/Sortable.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**!\n * Sortable\n * @author\tRubaXa   <trash@rubaxa.org>\n * @author\towenm    <owen23355@gmail.com>\n * @license MIT\n */\n\n(function sortableModule(factory) {\n\t\"use strict\";\n\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\telse {}\n})(function sortableFactory() {\n\t\"use strict\";\n\n\tif (typeof window === \"undefined\" || !window.document) {\n\t\treturn function sortableError() {\n\t\t\tthrow new Error(\"Sortable.js requires a window with a document\");\n\t\t};\n\t}\n\n\tvar dragEl,\n\t\tparentEl,\n\t\tghostEl,\n\t\tcloneEl,\n\t\trootEl,\n\t\tnextEl,\n\t\tlastDownEl,\n\n\t\tscrollEl,\n\t\tscrollParentEl,\n\t\tscrollCustomFn,\n\n\t\toldIndex,\n\t\tnewIndex,\n\t\toldDraggableIndex,\n\t\tnewDraggableIndex,\n\n\t\tactiveGroup,\n\t\tputSortable,\n\n\t\tautoScrolls = [],\n\t\tscrolling = false,\n\n\t\tawaitingDragStarted = false,\n\t\tignoreNextClick = false,\n\t\tsortables = [],\n\n\t\tpointerElemChangedInterval,\n\t\tlastPointerElemX,\n\t\tlastPointerElemY,\n\n\t\ttapEvt,\n\t\ttouchEvt,\n\n\t\tmoved,\n\n\n\t\tlastTarget,\n\t\tlastDirection,\n\t\tpastFirstInvertThresh = false,\n\t\tisCircumstantialInvert = false,\n\t\tlastMode, // 'swap' or 'insert'\n\n\t\ttargetMoveDistance,\n\n\t\t// For positioning ghost absolutely\n\t\tghostRelativeParent,\n\t\tghostRelativeParentInitialScroll = [], // (left, top)\n\n\t\trealDragElRect, // dragEl rect after current animation\n\n\t\t/** @const */\n\t\tR_SPACE = /\\s+/g,\n\n\t\texpando = 'Sortable' + (new Date).getTime(),\n\n\t\twin = window,\n\t\tdocument = win.document,\n\t\tparseInt = win.parseInt,\n\t\tsetTimeout = win.setTimeout,\n\n\t\t$ = win.jQuery || win.Zepto,\n\t\tPolymer = win.Polymer,\n\n\t\tcaptureMode = {\n\t\t\tcapture: false,\n\t\t\tpassive: false\n\t\t},\n\n\t\tIE11OrLess = !!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\\.|msie|iemobile)/i),\n\t\tEdge = !!navigator.userAgent.match(/Edge/i),\n\t\tFireFox = !!navigator.userAgent.match(/firefox/i),\n\t\tSafari = !!(navigator.userAgent.match(/safari/i) && !navigator.userAgent.match(/chrome/i) && !navigator.userAgent.match(/android/i)),\n\t\tIOS = !!(navigator.userAgent.match(/iP(ad|od|hone)/i)),\n\n\t\tPositionGhostAbsolutely = IOS,\n\n\t\tCSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',\n\n\t\t// This will not pass for IE9, because IE9 DnD only works on anchors\n\t\tsupportDraggable = ('draggable' in document.createElement('div')),\n\n\t\tsupportCssPointerEvents = (function() {\n\t\t\t// false when <= IE11\n\t\t\tif (IE11OrLess) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar el = document.createElement('x');\n\t\t\tel.style.cssText = 'pointer-events:auto';\n\t\t\treturn el.style.pointerEvents === 'auto';\n\t\t})(),\n\n\t\t_silent = false,\n\t\t_alignedSilent = false,\n\n\t\tabs = Math.abs,\n\t\tmin = Math.min,\n\t\tmax = Math.max,\n\n\t\tsavedInputChecked = [],\n\n\t\t_detectDirection = function(el, options) {\n\t\t\tvar elCSS = _css(el),\n\t\t\t\telWidth = parseInt(elCSS.width)\n\t\t\t\t\t- parseInt(elCSS.paddingLeft)\n\t\t\t\t\t- parseInt(elCSS.paddingRight)\n\t\t\t\t\t- parseInt(elCSS.borderLeftWidth)\n\t\t\t\t\t- parseInt(elCSS.borderRightWidth),\n\t\t\t\tchild1 = _getChild(el, 0, options),\n\t\t\t\tchild2 = _getChild(el, 1, options),\n\t\t\t\tfirstChildCSS = child1 && _css(child1),\n\t\t\t\tsecondChildCSS = child2 && _css(child2),\n\t\t\t\tfirstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + _getRect(child1).width,\n\t\t\t\tsecondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + _getRect(child2).width;\n\n\t\t\tif (elCSS.display === 'flex') {\n\t\t\t\treturn elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse'\n\t\t\t\t? 'vertical' : 'horizontal';\n\t\t\t}\n\n\t\t\tif (elCSS.display === 'grid') {\n\t\t\t\treturn elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';\n\t\t\t}\n\n\t\t\tif (child1 && firstChildCSS.float !== 'none') {\n\t\t\t\tvar touchingSideChild2 = firstChildCSS.float === 'left' ? 'left' : 'right';\n\n\t\t\t\treturn child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ?\n\t\t\t\t\t'vertical' : 'horizontal';\n\t\t\t}\n\n\t\t\treturn (child1 &&\n\t\t\t\t(\n\t\t\t\t\tfirstChildCSS.display === 'block' ||\n\t\t\t\t\tfirstChildCSS.display === 'flex' ||\n\t\t\t\t\tfirstChildCSS.display === 'table' ||\n\t\t\t\t\tfirstChildCSS.display === 'grid' ||\n\t\t\t\t\tfirstChildWidth >= elWidth &&\n\t\t\t\t\telCSS[CSSFloatProperty] === 'none' ||\n\t\t\t\t\tchild2 &&\n\t\t\t\t\telCSS[CSSFloatProperty] === 'none' &&\n\t\t\t\t\tfirstChildWidth + secondChildWidth > elWidth\n\t\t\t\t) ?\n\t\t\t\t'vertical' : 'horizontal'\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n\t\t * @param  {Number} x      X position\n\t\t * @param  {Number} y      Y position\n\t\t * @return {HTMLElement}   Element of the first found nearest Sortable\n\t\t */\n\t\t_detectNearestEmptySortable = function(x, y) {\n\t\t\tfor (var i = 0; i < sortables.length; i++) {\n\t\t\t\tif (_lastChild(sortables[i])) continue;\n\n\t\t\t\tvar rect = _getRect(sortables[i]),\n\t\t\t\t\tthreshold = sortables[i][expando].options.emptyInsertThreshold,\n\t\t\t\t\tinsideHorizontally = x >= (rect.left - threshold) && x <= (rect.right + threshold),\n\t\t\t\t\tinsideVertically = y >= (rect.top - threshold) && y <= (rect.bottom + threshold);\n\n\t\t\t\tif (threshold && insideHorizontally && insideVertically) {\n\t\t\t\t\treturn sortables[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_isClientInRowColumn = function(x, y, el, axis, options) {\n\t\t\tvar targetRect = _getRect(el),\n\t\t\t\ttargetS1Opp = axis === 'vertical' ? targetRect.left : targetRect.top,\n\t\t\t\ttargetS2Opp = axis === 'vertical' ? targetRect.right : targetRect.bottom,\n\t\t\t\tmouseOnOppAxis = axis === 'vertical' ? x : y;\n\n\t\t\treturn targetS1Opp < mouseOnOppAxis && mouseOnOppAxis < targetS2Opp;\n\t\t},\n\n\t\t_isElInRowColumn = function(el1, el2, axis) {\n\t\t\tvar el1Rect = el1 === dragEl && realDragElRect || _getRect(el1),\n\t\t\t\tel2Rect = el2 === dragEl && realDragElRect || _getRect(el2),\n\t\t\t\tel1S1Opp = axis === 'vertical' ? el1Rect.left : el1Rect.top,\n\t\t\t\tel1S2Opp = axis === 'vertical' ? el1Rect.right : el1Rect.bottom,\n\t\t\t\tel1OppLength = axis === 'vertical' ? el1Rect.width : el1Rect.height,\n\t\t\t\tel2S1Opp = axis === 'vertical' ? el2Rect.left : el2Rect.top,\n\t\t\t\tel2S2Opp = axis === 'vertical' ? el2Rect.right : el2Rect.bottom,\n\t\t\t\tel2OppLength = axis === 'vertical' ? el2Rect.width : el2Rect.height;\n\n\t\t\treturn (\n\t\t\t\tel1S1Opp === el2S1Opp ||\n\t\t\t\tel1S2Opp === el2S2Opp ||\n\t\t\t\t(el1S1Opp + el1OppLength / 2) === (el2S1Opp + el2OppLength / 2)\n\t\t\t);\n\t\t},\n\n\t\t_getParentAutoScrollElement = function(el, includeSelf) {\n\t\t\t// skip to window\n\t\t\tif (!el || !el.getBoundingClientRect) return _getWindowScrollingElement();\n\n\t\t\tvar elem = el;\n\t\t\tvar gotSelf = false;\n\t\t\tdo {\n\t\t\t\t// we don't need to get elem css if it isn't even overflowing in the first place (performance)\n\t\t\t\tif (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {\n\t\t\t\t\tvar elemCSS = _css(elem);\n\t\t\t\t\tif (\n\t\t\t\t\t\telem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') ||\n\t\t\t\t\t\telem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (!elem || !elem.getBoundingClientRect || elem === document.body) return _getWindowScrollingElement();\n\n\t\t\t\t\t\tif (gotSelf || includeSelf) return elem;\n\t\t\t\t\t\tgotSelf = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t/* jshint boss:true */\n\t\t\t} while (elem = elem.parentNode);\n\n\t\t\treturn _getWindowScrollingElement();\n\t\t},\n\n\t\t_getWindowScrollingElement = function() {\n\t\t\tif (IE11OrLess) {\n\t\t\t\treturn document.documentElement;\n\t\t\t} else {\n\t\t\t\treturn document.scrollingElement;\n\t\t\t}\n\t\t},\n\n\t\t_scrollBy = function(el, x, y) {\n\t\t\tel.scrollLeft += x;\n\t\t\tel.scrollTop += y;\n\t\t},\n\n\t\t_autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl, /**Boolean*/isFallback) {\n\t\t\t// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n\t\t\tif (options.scroll) {\n\t\t\t\tvar _this = rootEl ? rootEl[expando] : window,\n\t\t\t\t\tsens = options.scrollSensitivity,\n\t\t\t\t\tspeed = options.scrollSpeed,\n\n\t\t\t\t\tx = evt.clientX,\n\t\t\t\t\ty = evt.clientY,\n\n\t\t\t\t\twinScroller = _getWindowScrollingElement(),\n\n\t\t\t\t\tscrollThisInstance = false;\n\n\t\t\t\t// Detect scrollEl\n\t\t\t\tif (scrollParentEl !== rootEl) {\n\t\t\t\t\t_clearAutoScrolls();\n\n\t\t\t\t\tscrollEl = options.scroll;\n\t\t\t\t\tscrollCustomFn = options.scrollFn;\n\n\t\t\t\t\tif (scrollEl === true) {\n\t\t\t\t\t\tscrollEl = _getParentAutoScrollElement(rootEl, true);\n\t\t\t\t\t\tscrollParentEl = scrollEl;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tvar layersOut = 0;\n\t\t\t\tvar currentParent = scrollEl;\n\t\t\t\tdo {\n\t\t\t\t\tvar\tel = currentParent,\n\t\t\t\t\t\trect = _getRect(el),\n\n\t\t\t\t\t\ttop = rect.top,\n\t\t\t\t\t\tbottom = rect.bottom,\n\t\t\t\t\t\tleft = rect.left,\n\t\t\t\t\t\tright = rect.right,\n\n\t\t\t\t\t\twidth = rect.width,\n\t\t\t\t\t\theight = rect.height,\n\n\t\t\t\t\t\tscrollWidth,\n\t\t\t\t\t\tscrollHeight,\n\n\t\t\t\t\t\tcss,\n\n\t\t\t\t\t\tvx,\n\t\t\t\t\t\tvy,\n\n\t\t\t\t\t\tcanScrollX,\n\t\t\t\t\t\tcanScrollY,\n\n\t\t\t\t\t\tscrollPosX,\n\t\t\t\t\t\tscrollPosY;\n\n\n\t\t\t\t\tscrollWidth = el.scrollWidth;\n\t\t\t\t\tscrollHeight = el.scrollHeight;\n\n\t\t\t\t\tcss = _css(el);\n\n\t\t\t\t\tscrollPosX = el.scrollLeft;\n\t\t\t\t\tscrollPosY = el.scrollTop;\n\n\t\t\t\t\tif (el === winScroller) {\n\t\t\t\t\t\tcanScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll' || css.overflowX === 'visible');\n\t\t\t\t\t\tcanScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll' || css.overflowY === 'visible');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcanScrollX = width < scrollWidth && (css.overflowX === 'auto' || css.overflowX === 'scroll');\n\t\t\t\t\t\tcanScrollY = height < scrollHeight && (css.overflowY === 'auto' || css.overflowY === 'scroll');\n\t\t\t\t\t}\n\n\t\t\t\t\tvx = canScrollX && (abs(right - x) <= sens && (scrollPosX + width) < scrollWidth) - (abs(left - x) <= sens && !!scrollPosX);\n\n\t\t\t\t\tvy = canScrollY && (abs(bottom - y) <= sens && (scrollPosY + height) < scrollHeight) - (abs(top - y) <= sens && !!scrollPosY);\n\n\n\t\t\t\t\tif (!autoScrolls[layersOut]) {\n\t\t\t\t\t\tfor (var i = 0; i <= layersOut; i++) {\n\t\t\t\t\t\t\tif (!autoScrolls[i]) {\n\t\t\t\t\t\t\t\tautoScrolls[i] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {\n\t\t\t\t\t\tautoScrolls[layersOut].el = el;\n\t\t\t\t\t\tautoScrolls[layersOut].vx = vx;\n\t\t\t\t\t\tautoScrolls[layersOut].vy = vy;\n\n\t\t\t\t\t\tclearInterval(autoScrolls[layersOut].pid);\n\n\t\t\t\t\t\tif (el && (vx != 0 || vy != 0)) {\n\t\t\t\t\t\t\tscrollThisInstance = true;\n\t\t\t\t\t\t\t/* jshint loopfunc:true */\n\t\t\t\t\t\t\tautoScrolls[layersOut].pid = setInterval((function () {\n\t\t\t\t\t\t\t\t// emulate drag over during autoscroll (fallback), emulating native DnD behaviour\n\t\t\t\t\t\t\t\tif (isFallback && this.layer === 0) {\n\t\t\t\t\t\t\t\t\tSortable.active._emulateDragOver(true);\n\t\t\t\t\t\t\t\t\tSortable.active._onTouchMove(touchEvt, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;\n\t\t\t\t\t\t\t\tvar scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;\n\n\t\t\t\t\t\t\t\tif ('function' === typeof(scrollCustomFn)) {\n\t\t\t\t\t\t\t\t\tif (scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt, touchEvt, autoScrolls[this.layer].el) !== 'continue') {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t_scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);\n\t\t\t\t\t\t\t}).bind({layer: layersOut}), 24);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlayersOut++;\n\t\t\t\t} while (options.bubbleScroll && currentParent !== winScroller && (currentParent = _getParentAutoScrollElement(currentParent, false)));\n\t\t\t\tscrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not\n\t\t\t}\n\t\t}, 30),\n\n\t\t_clearAutoScrolls = function () {\n\t\t\tautoScrolls.forEach(function(autoScroll) {\n\t\t\t\tclearInterval(autoScroll.pid);\n\t\t\t});\n\t\t\tautoScrolls = [];\n\t\t},\n\n\t\t_prepareGroup = function (options) {\n\t\t\tfunction toFn(value, pull) {\n\t\t\t\treturn function(to, from, dragEl, evt) {\n\t\t\t\t\tvar sameGroup = to.options.group.name &&\n\t\t\t\t\t\t\t\t\tfrom.options.group.name &&\n\t\t\t\t\t\t\t\t\tto.options.group.name === from.options.group.name;\n\n\t\t\t\t\tif (value == null && (pull || sameGroup)) {\n\t\t\t\t\t\t// Default pull value\n\t\t\t\t\t\t// Default pull and put value if same group\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (value == null || value === false) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if (pull && value === 'clone') {\n\t\t\t\t\t\treturn value;\n\t\t\t\t\t} else if (typeof value === 'function') {\n\t\t\t\t\t\treturn toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar otherGroup = (pull ? to : from).options.group.name;\n\n\t\t\t\t\t\treturn (value === true ||\n\t\t\t\t\t\t(typeof value === 'string' && value === otherGroup) ||\n\t\t\t\t\t\t(value.join && value.indexOf(otherGroup) > -1));\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar group = {};\n\t\t\tvar originalGroup = options.group;\n\n\t\t\tif (!originalGroup || typeof originalGroup != 'object') {\n\t\t\t\toriginalGroup = {name: originalGroup};\n\t\t\t}\n\n\t\t\tgroup.name = originalGroup.name;\n\t\t\tgroup.checkPull = toFn(originalGroup.pull, true);\n\t\t\tgroup.checkPut = toFn(originalGroup.put);\n\t\t\tgroup.revertClone = originalGroup.revertClone;\n\n\t\t\toptions.group = group;\n\t\t},\n\n\t\t_checkAlignment = function(evt) {\n\t\t\tif (!dragEl || !dragEl.parentNode) return;\n\t\t\tdragEl.parentNode[expando] && dragEl.parentNode[expando]._computeIsAligned(evt);\n\t\t},\n\n\t\t_hideGhostForTarget = function() {\n\t\t\tif (!supportCssPointerEvents && ghostEl) {\n\t\t\t\t_css(ghostEl, 'display', 'none');\n\t\t\t}\n\t\t},\n\n\t\t_unhideGhostForTarget = function() {\n\t\t\tif (!supportCssPointerEvents && ghostEl) {\n\t\t\t\t_css(ghostEl, 'display', '');\n\t\t\t}\n\t\t};\n\n\n\t// #1184 fix - Prevent click event on fallback if dragged but item not changed position\n\tdocument.addEventListener('click', function(evt) {\n\t\tif (ignoreNextClick) {\n\t\t\tevt.preventDefault();\n\t\t\tevt.stopPropagation && evt.stopPropagation();\n\t\t\tevt.stopImmediatePropagation && evt.stopImmediatePropagation();\n\t\t\tignoreNextClick = false;\n\t\t\treturn false;\n\t\t}\n\t}, true);\n\n\tvar nearestEmptyInsertDetectEvent = function(evt) {\n\t\tif (dragEl) {\n\t\t\tevt = evt.touches ? evt.touches[0] : evt;\n\t\t\tvar nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n\t\t\tif (nearest) {\n\t\t\t\t// Create imitation event\n\t\t\t\tvar event = {};\n\t\t\t\tfor (var i in evt) {\n\t\t\t\t\tevent[i] = evt[i];\n\t\t\t\t}\n\t\t\t\tevent.target = event.rootEl = nearest;\n\t\t\t\tevent.preventDefault = void 0;\n\t\t\t\tevent.stopPropagation = void 0;\n\t\t\t\tnearest[expando]._onDragOver(event);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * @class  Sortable\n\t * @param  {HTMLElement}  el\n\t * @param  {Object}       [options]\n\t */\n\tfunction Sortable(el, options) {\n\t\tif (!(el && el.nodeType && el.nodeType === 1)) {\n\t\t\tthrow 'Sortable: `el` must be HTMLElement, not ' + {}.toString.call(el);\n\t\t}\n\n\t\tthis.el = el; // root element\n\t\tthis.options = options = _extend({}, options);\n\n\n\t\t// Export instance\n\t\tel[expando] = this;\n\n\t\t// Default options\n\t\tvar defaults = {\n\t\t\tgroup: null,\n\t\t\tsort: true,\n\t\t\tdisabled: false,\n\t\t\tstore: null,\n\t\t\thandle: null,\n\t\t\tscroll: true,\n\t\t\tscrollSensitivity: 30,\n\t\t\tscrollSpeed: 10,\n\t\t\tbubbleScroll: true,\n\t\t\tdraggable: /[uo]l/i.test(el.nodeName) ? '>li' : '>*',\n\t\t\tswapThreshold: 1, // percentage; 0 <= x <= 1\n\t\t\tinvertSwap: false, // invert always\n\t\t\tinvertedSwapThreshold: null, // will be set to same as swapThreshold if default\n\t\t\tremoveCloneOnHide: true,\n\t\t\tdirection: function() {\n\t\t\t\treturn _detectDirection(el, this.options);\n\t\t\t},\n\t\t\tghostClass: 'sortable-ghost',\n\t\t\tchosenClass: 'sortable-chosen',\n\t\t\tdragClass: 'sortable-drag',\n\t\t\tignore: 'a, img',\n\t\t\tfilter: null,\n\t\t\tpreventOnFilter: true,\n\t\t\tanimation: 0,\n\t\t\teasing: null,\n\t\t\tsetData: function (dataTransfer, dragEl) {\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);\n\t\t\t},\n\t\t\tdropBubble: false,\n\t\t\tdragoverBubble: false,\n\t\t\tdataIdAttr: 'data-id',\n\t\t\tdelay: 0,\n\t\t\tdelayOnTouchOnly: false,\n\t\t\ttouchStartThreshold: parseInt(window.devicePixelRatio, 10) || 1,\n\t\t\tforceFallback: false,\n\t\t\tfallbackClass: 'sortable-fallback',\n\t\t\tfallbackOnBody: false,\n\t\t\tfallbackTolerance: 0,\n\t\t\tfallbackOffset: {x: 0, y: 0},\n\t\t\tsupportPointer: Sortable.supportPointer !== false && ('PointerEvent' in window),\n\t\t\temptyInsertThreshold: 5\n\t\t};\n\n\n\t\t// Set default options\n\t\tfor (var name in defaults) {\n\t\t\t!(name in options) && (options[name] = defaults[name]);\n\t\t}\n\n\t\t_prepareGroup(options);\n\n\t\t// Bind all private methods\n\t\tfor (var fn in this) {\n\t\t\tif (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n\t\t\t\tthis[fn] = this[fn].bind(this);\n\t\t\t}\n\t\t}\n\n\t\t// Setup drag mode\n\t\tthis.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n\t\tif (this.nativeDraggable) {\n\t\t\t// Touch start threshold cannot be greater than the native dragstart threshold\n\t\t\tthis.options.touchStartThreshold = 1;\n\t\t}\n\n\t\t// Bind events\n\t\tif (options.supportPointer) {\n\t\t\t_on(el, 'pointerdown', this._onTapStart);\n\t\t} else {\n\t\t\t_on(el, 'mousedown', this._onTapStart);\n\t\t\t_on(el, 'touchstart', this._onTapStart);\n\t\t}\n\n\t\tif (this.nativeDraggable) {\n\t\t\t_on(el, 'dragover', this);\n\t\t\t_on(el, 'dragenter', this);\n\t\t}\n\n\t\tsortables.push(this.el);\n\n\t\t// Restore sorting\n\t\toptions.store && options.store.get && this.sort(options.store.get(this) || []);\n\t}\n\n\tSortable.prototype = /** @lends Sortable.prototype */ {\n\t\tconstructor: Sortable,\n\n\t\t_computeIsAligned: function(evt) {\n\t\t\tvar target;\n\n\t\t\tif (ghostEl && !supportCssPointerEvents) {\n\t\t\t\t_hideGhostForTarget();\n\t\t\t\ttarget = document.elementFromPoint(evt.clientX, evt.clientY);\n\t\t\t\t_unhideGhostForTarget();\n\t\t\t} else {\n\t\t\t\ttarget = evt.target;\n\t\t\t}\n\n\t\t\ttarget = _closest(target, this.options.draggable, this.el, false);\n\t\t\tif (_alignedSilent) return;\n\t\t\tif (!dragEl || dragEl.parentNode !== this.el) return;\n\n\t\t\tvar children = this.el.children;\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t// Don't change for target in case it is changed to aligned before onDragOver is fired\n\t\t\t\tif (_closest(children[i], this.options.draggable, this.el, false) && children[i] !== target) {\n\t\t\t\t\tchildren[i].sortableMouseAligned = _isClientInRowColumn(evt.clientX, evt.clientY, children[i], this._getDirection(evt, null), this.options);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Used for nulling last target when not in element, nothing to do with checking if aligned\n\t\t\tif (!_closest(target, this.options.draggable, this.el, true)) {\n\t\t\t\tlastTarget = null;\n\t\t\t}\n\n\t\t\t_alignedSilent = true;\n\t\t\tsetTimeout(function() {\n\t\t\t\t_alignedSilent = false;\n\t\t\t}, 30);\n\n\t\t},\n\n\t\t_getDirection: function(evt, target) {\n\t\t\treturn (typeof this.options.direction === 'function') ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;\n\t\t},\n\n\t\t_onTapStart: function (/** Event|TouchEvent */evt) {\n\t\t\tif (!evt.cancelable) return;\n\t\t\tvar _this = this,\n\t\t\t\tel = this.el,\n\t\t\t\toptions = this.options,\n\t\t\t\tpreventOnFilter = options.preventOnFilter,\n\t\t\t\ttype = evt.type,\n\t\t\t\ttouch = evt.touches && evt.touches[0],\n\t\t\t\ttarget = (touch || evt).target,\n\t\t\t\toriginalTarget = evt.target.shadowRoot && ((evt.path && evt.path[0]) || (evt.composedPath && evt.composedPath()[0])) || target,\n\t\t\t\tfilter = options.filter,\n\t\t\t\tstartIndex,\n\t\t\t\tstartDraggableIndex;\n\n\t\t\t_saveInputCheckedState(el);\n\n\t\t\t// Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n\t\t\tif (dragEl) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {\n\t\t\t\treturn; // only left button and enabled\n\t\t\t}\n\n\t\t\t// cancel dnd if original target is content editable\n\t\t\tif (originalTarget.isContentEditable) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttarget = _closest(target, options.draggable, el, false);\n\n\n\t\t\tif (lastDownEl === target) {\n\t\t\t\t// Ignoring duplicate `down`\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the index of the dragged element within its parent\n\t\t\tstartIndex = _index(target);\n\t\t\tstartDraggableIndex = _index(target, options.draggable);\n\n\t\t\t// Check filter\n\t\t\tif (typeof filter === 'function') {\n\t\t\t\tif (filter.call(this, evt, target, this)) {\n\t\t\t\t\t_dispatchEvent(_this, originalTarget, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\n\t\t\t\t\tpreventOnFilter && evt.cancelable && evt.preventDefault();\n\t\t\t\t\treturn; // cancel dnd\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (filter) {\n\t\t\t\tfilter = filter.split(',').some(function (criteria) {\n\t\t\t\t\tcriteria = _closest(originalTarget, criteria.trim(), el, false);\n\n\t\t\t\t\tif (criteria) {\n\t\t\t\t\t\t_dispatchEvent(_this, criteria, 'filter', target, el, el, startIndex, undefined, startDraggableIndex);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (filter) {\n\t\t\t\t\tpreventOnFilter && evt.cancelable && evt.preventDefault();\n\t\t\t\t\treturn; // cancel dnd\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (options.handle && !_closest(originalTarget, options.handle, el, false)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare `dragstart`\n\t\t\tthis._prepareDragStart(evt, touch, target, startIndex, startDraggableIndex);\n\t\t},\n\n\n\t\t_handleAutoScroll: function(evt, fallback) {\n\t\t\tif (!dragEl || !this.options.scroll) return;\n\t\t\tvar x = evt.clientX,\n\t\t\t\ty = evt.clientY,\n\n\t\t\t\telem = document.elementFromPoint(x, y),\n\t\t\t\t_this = this;\n\n\t\t\t// IE does not seem to have native autoscroll,\n\t\t\t// Edge's autoscroll seems too conditional,\n\t\t\t// MACOS Safari does not have autoscroll,\n\t\t\t// Firefox and Chrome are good\n\t\t\tif (fallback || Edge || IE11OrLess || Safari) {\n\t\t\t\t_autoScroll(evt, _this.options, elem, fallback);\n\n\t\t\t\t// Listener for pointer element change\n\t\t\t\tvar ogElemScroller = _getParentAutoScrollElement(elem, true);\n\t\t\t\tif (\n\t\t\t\t\tscrolling &&\n\t\t\t\t\t(\n\t\t\t\t\t\t!pointerElemChangedInterval ||\n\t\t\t\t\t\tx !== lastPointerElemX ||\n\t\t\t\t\t\ty !== lastPointerElemY\n\t\t\t\t\t)\n\t\t\t\t) {\n\n\t\t\t\t\tpointerElemChangedInterval && clearInterval(pointerElemChangedInterval);\n\t\t\t\t\t// Detect for pointer elem change, emulating native DnD behaviour\n\t\t\t\t\tpointerElemChangedInterval = setInterval(function() {\n\t\t\t\t\t\tif (!dragEl) return;\n\t\t\t\t\t\t// could also check if scroll direction on newElem changes due to parent autoscrolling\n\t\t\t\t\t\tvar newElem = _getParentAutoScrollElement(document.elementFromPoint(x, y), true);\n\t\t\t\t\t\tif (newElem !== ogElemScroller) {\n\t\t\t\t\t\t\togElemScroller = newElem;\n\t\t\t\t\t\t\t_clearAutoScrolls();\n\t\t\t\t\t\t\t_autoScroll(evt, _this.options, ogElemScroller, fallback);\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 10);\n\t\t\t\t\tlastPointerElemX = x;\n\t\t\t\t\tlastPointerElemY = y;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll\n\t\t\t\tif (!_this.options.bubbleScroll || _getParentAutoScrollElement(elem, true) === _getWindowScrollingElement()) {\n\t\t\t\t\t_clearAutoScrolls();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t_autoScroll(evt, _this.options, _getParentAutoScrollElement(elem, false), false);\n\t\t\t}\n\t\t},\n\n\t\t_prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target, /** Number */startIndex, /** Number */startDraggableIndex) {\n\t\t\tvar _this = this,\n\t\t\t\tel = _this.el,\n\t\t\t\toptions = _this.options,\n\t\t\t\townerDocument = el.ownerDocument,\n\t\t\t\tdragStartFn;\n\n\t\t\tif (target && !dragEl && (target.parentNode === el)) {\n\t\t\t\trootEl = el;\n\t\t\t\tdragEl = target;\n\t\t\t\tparentEl = dragEl.parentNode;\n\t\t\t\tnextEl = dragEl.nextSibling;\n\t\t\t\tlastDownEl = target;\n\t\t\t\tactiveGroup = options.group;\n\t\t\t\toldIndex = startIndex;\n\t\t\t\toldDraggableIndex = startDraggableIndex;\n\n\t\t\t\ttapEvt = {\n\t\t\t\t\ttarget: dragEl,\n\t\t\t\t\tclientX: (touch || evt).clientX,\n\t\t\t\t\tclientY: (touch || evt).clientY\n\t\t\t\t};\n\n\t\t\t\tthis._lastX = (touch || evt).clientX;\n\t\t\t\tthis._lastY = (touch || evt).clientY;\n\n\t\t\t\tdragEl.style['will-change'] = 'all';\n\t\t\t\t// undo animation if needed\n\t\t\t\tdragEl.style.transition = '';\n\t\t\t\tdragEl.style.transform = '';\n\n\t\t\t\tdragStartFn = function () {\n\t\t\t\t\t// Delayed drag has been triggered\n\t\t\t\t\t// we can re-enable the events: touchmove/mousemove\n\t\t\t\t\t_this._disableDelayedDragEvents();\n\n\t\t\t\t\tif (!FireFox && _this.nativeDraggable) {\n\t\t\t\t\t\tdragEl.draggable = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Bind the events: dragstart/dragend\n\t\t\t\t\t_this._triggerDragStart(evt, touch);\n\n\t\t\t\t\t// Drag start event\n\t\t\t\t\t_dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex);\n\n\t\t\t\t\t// Chosen item\n\t\t\t\t\t_toggleClass(dragEl, options.chosenClass, true);\n\t\t\t\t};\n\n\t\t\t\t// Disable \"draggable\"\n\t\t\t\toptions.ignore.split(',').forEach(function (criteria) {\n\t\t\t\t\t_find(dragEl, criteria.trim(), _disableDraggable);\n\t\t\t\t});\n\n\t\t\t\t_on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);\n\t\t\t\t_on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);\n\t\t\t\t_on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);\n\n\t\t\t\t_on(ownerDocument, 'mouseup', _this._onDrop);\n\t\t\t\t_on(ownerDocument, 'touchend', _this._onDrop);\n\t\t\t\t_on(ownerDocument, 'touchcancel', _this._onDrop);\n\n\t\t\t\t// Make dragEl draggable (must be before delay for FireFox)\n\t\t\t\tif (FireFox && this.nativeDraggable) {\n\t\t\t\t\tthis.options.touchStartThreshold = 4;\n\t\t\t\t\tdragEl.draggable = true;\n\t\t\t\t}\n\n\t\t\t\t// Delay is impossible for native DnD in Edge or IE\n\t\t\t\tif (options.delay && (options.delayOnTouchOnly ? touch : true) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {\n\t\t\t\t\t// If the user moves the pointer or let go the click or touch\n\t\t\t\t\t// before the delay has been reached:\n\t\t\t\t\t// disable the delayed drag\n\t\t\t\t\t_on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchend', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);\n\t\t\t\t\t_on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);\n\t\t\t\t\toptions.supportPointer && _on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);\n\n\t\t\t\t\t_this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n\t\t\t\t} else {\n\t\t\t\t\tdragStartFn();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_delayedDragTouchMoveHandler: function (/** TouchEvent|PointerEvent **/e) {\n\t\t\tvar touch = e.touches ? e.touches[0] : e;\n\t\t\tif (max(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY))\n\t\t\t\t\t>= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))\n\t\t\t) {\n\t\t\t\tthis._disableDelayedDrag();\n\t\t\t}\n\t\t},\n\n\t\t_disableDelayedDrag: function () {\n\t\t\tdragEl && _disableDraggable(dragEl);\n\t\t\tclearTimeout(this._dragStartTimer);\n\n\t\t\tthis._disableDelayedDragEvents();\n\t\t},\n\n\t\t_disableDelayedDragEvents: function () {\n\t\t\tvar ownerDocument = this.el.ownerDocument;\n\t\t\t_off(ownerDocument, 'mouseup', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchend', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchcancel', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);\n\t\t\t_off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);\n\t\t\t_off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);\n\t\t},\n\n\t\t_triggerDragStart: function (/** Event */evt, /** Touch */touch) {\n\t\t\ttouch = touch || (evt.pointerType == 'touch' ? evt : null);\n\n\t\t\tif (!this.nativeDraggable || touch) {\n\t\t\t\tif (this.options.supportPointer) {\n\t\t\t\t\t_on(document, 'pointermove', this._onTouchMove);\n\t\t\t\t} else if (touch) {\n\t\t\t\t\t_on(document, 'touchmove', this._onTouchMove);\n\t\t\t\t} else {\n\t\t\t\t\t_on(document, 'mousemove', this._onTouchMove);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_on(dragEl, 'dragend', this);\n\t\t\t\t_on(rootEl, 'dragstart', this._onDragStart);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (document.selection) {\n\t\t\t\t\t// Timeout neccessary for IE9\n\t\t\t\t\t_nextTick(function () {\n\t\t\t\t\t\tdocument.selection.empty();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t}\n\t\t},\n\n\t\t_dragStarted: function (fallback, evt) {\n\t\t\tawaitingDragStarted = false;\n\t\t\tif (rootEl && dragEl) {\n\t\t\t\tif (this.nativeDraggable) {\n\t\t\t\t\t_on(document, 'dragover', this._handleAutoScroll);\n\t\t\t\t\t_on(document, 'dragover', _checkAlignment);\n\t\t\t\t}\n\t\t\t\tvar options = this.options;\n\n\t\t\t\t// Apply effect\n\t\t\t\t!fallback && _toggleClass(dragEl, options.dragClass, false);\n\t\t\t\t_toggleClass(dragEl, options.ghostClass, true);\n\n\t\t\t\t// In case dragging an animated element\n\t\t\t\t_css(dragEl, 'transform', '');\n\n\t\t\t\tSortable.active = this;\n\n\t\t\t\tfallback && this._appendGhost();\n\n\t\t\t\t// Drag start event\n\t\t\t\t_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex, undefined, oldDraggableIndex, undefined, evt);\n\t\t\t} else {\n\t\t\t\tthis._nulling();\n\t\t\t}\n\t\t},\n\n\t\t_emulateDragOver: function (forAutoScroll) {\n\t\t\tif (touchEvt) {\n\t\t\t\tif (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY && !forAutoScroll) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._lastX = touchEvt.clientX;\n\t\t\t\tthis._lastY = touchEvt.clientY;\n\n\t\t\t\t_hideGhostForTarget();\n\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\tvar parent = target;\n\n\t\t\t\twhile (target && target.shadowRoot) {\n\t\t\t\t\ttarget = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n\t\t\t\t\tif (target === parent) break;\n\t\t\t\t\tparent = target;\n\t\t\t\t}\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (parent[expando]) {\n\t\t\t\t\t\t\tvar inserted;\n\n\t\t\t\t\t\t\tinserted = parent[expando]._onDragOver({\n\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,\n\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,\n\t\t\t\t\t\t\t\ttarget: target,\n\t\t\t\t\t\t\t\trootEl: parent\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (inserted && !this.options.dragoverBubble) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget = parent; // store last element\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\twhile (parent = parent.parentNode);\n\t\t\t\t}\n\t\t\t\tdragEl.parentNode[expando]._computeIsAligned(touchEvt);\n\n\t\t\t\t_unhideGhostForTarget();\n\t\t\t}\n\t\t},\n\n\n\t\t_onTouchMove: function (/**TouchEvent*/evt, forAutoScroll) {\n\t\t\tif (tapEvt) {\n\t\t\t\tvar\toptions = this.options,\n\t\t\t\t\tfallbackTolerance = options.fallbackTolerance,\n\t\t\t\t\tfallbackOffset = options.fallbackOffset,\n\t\t\t\t\ttouch = evt.touches ? evt.touches[0] : evt,\n\t\t\t\t\tmatrix = ghostEl && _matrix(ghostEl),\n\t\t\t\t\tscaleX = ghostEl && matrix && matrix.a,\n\t\t\t\t\tscaleY = ghostEl && matrix && matrix.d,\n\t\t\t\t\trelativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && _getRelativeScrollOffset(ghostRelativeParent),\n\t\t\t\t\tdx = ((touch.clientX - tapEvt.clientX)\n\t\t\t\t\t\t\t+ fallbackOffset.x) / (scaleX || 1)\n\t\t\t\t\t\t\t+ (relativeScrollOffset ? (relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0]) : 0) / (scaleX || 1),\n\t\t\t\t\tdy = ((touch.clientY - tapEvt.clientY)\n\t\t\t\t\t\t\t+ fallbackOffset.y) / (scaleY || 1)\n\t\t\t\t\t\t\t+ (relativeScrollOffset ? (relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1]) : 0) / (scaleY || 1),\n\t\t\t\t\ttranslate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';\n\n\t\t\t\t// only set the status to dragging, when we are actually dragging\n\t\t\t\tif (!Sortable.active && !awaitingDragStarted) {\n\t\t\t\t\tif (fallbackTolerance &&\n\t\t\t\t\t\tmin(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY)) < fallbackTolerance\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis._onDragStart(evt, true);\n\t\t\t\t}\n\n\t\t\t\t!forAutoScroll && this._handleAutoScroll(touch, true);\n\n\t\t\t\tmoved = true;\n\t\t\t\ttouchEvt = touch;\n\n\t\t\t\t_css(ghostEl, 'webkitTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'mozTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'msTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'transform', translate3d);\n\n\t\t\t\tevt.cancelable && evt.preventDefault();\n\t\t\t}\n\t\t},\n\n\t\t_appendGhost: function () {\n\t\t\t// Bug if using scale(): https://stackoverflow.com/questions/2637058\n\t\t\t// Not being adjusted for\n\t\t\tif (!ghostEl) {\n\t\t\t\tvar container = this.options.fallbackOnBody ? document.body : rootEl,\n\t\t\t\t\trect = _getRect(dragEl, true, container, !PositionGhostAbsolutely),\n\t\t\t\t\tcss = _css(dragEl),\n\t\t\t\t\toptions = this.options;\n\n\t\t\t\t// Position absolutely\n\t\t\t\tif (PositionGhostAbsolutely) {\n\t\t\t\t\t// Get relatively positioned parent\n\t\t\t\t\tghostRelativeParent = container;\n\n\t\t\t\t\twhile (\n\t\t\t\t\t\t_css(ghostRelativeParent, 'position') === 'static' &&\n\t\t\t\t\t\t_css(ghostRelativeParent, 'transform') === 'none' &&\n\t\t\t\t\t\tghostRelativeParent !== document\n\t\t\t\t\t) {\n\t\t\t\t\t\tghostRelativeParent = ghostRelativeParent.parentNode;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ghostRelativeParent !== document) {\n\t\t\t\t\t\tvar ghostRelativeParentRect = _getRect(ghostRelativeParent, true);\n\n\t\t\t\t\t\trect.top -= ghostRelativeParentRect.top;\n\t\t\t\t\t\trect.left -= ghostRelativeParentRect.left;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {\n\t\t\t\t\t\tif (ghostRelativeParent === document) ghostRelativeParent = _getWindowScrollingElement();\n\n\t\t\t\t\t\trect.top += ghostRelativeParent.scrollTop;\n\t\t\t\t\t\trect.left += ghostRelativeParent.scrollLeft;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tghostRelativeParent = _getWindowScrollingElement();\n\t\t\t\t\t}\n\t\t\t\t\tghostRelativeParentInitialScroll = _getRelativeScrollOffset(ghostRelativeParent);\n\t\t\t\t}\n\n\n\t\t\t\tghostEl = dragEl.cloneNode(true);\n\n\t\t\t\t_toggleClass(ghostEl, options.ghostClass, false);\n\t\t\t\t_toggleClass(ghostEl, options.fallbackClass, true);\n\t\t\t\t_toggleClass(ghostEl, options.dragClass, true);\n\n\t\t\t\t_css(ghostEl, 'box-sizing', 'border-box');\n\t\t\t\t_css(ghostEl, 'margin', 0);\n\t\t\t\t_css(ghostEl, 'top', rect.top);\n\t\t\t\t_css(ghostEl, 'left', rect.left);\n\t\t\t\t_css(ghostEl, 'width', rect.width);\n\t\t\t\t_css(ghostEl, 'height', rect.height);\n\t\t\t\t_css(ghostEl, 'opacity', '0.8');\n\t\t\t\t_css(ghostEl, 'position', (PositionGhostAbsolutely ? 'absolute' : 'fixed'));\n\t\t\t\t_css(ghostEl, 'zIndex', '100000');\n\t\t\t\t_css(ghostEl, 'pointerEvents', 'none');\n\n\t\t\t\tcontainer.appendChild(ghostEl);\n\t\t\t}\n\t\t},\n\n\t\t_onDragStart: function (/**Event*/evt, /**boolean*/fallback) {\n\t\t\tvar _this = this;\n\t\t\tvar dataTransfer = evt.dataTransfer;\n\t\t\tvar options = _this.options;\n\n\t\t\t// Setup clone\n\t\t\tcloneEl = _clone(dragEl);\n\n\t\t\tcloneEl.draggable = false;\n\t\t\tcloneEl.style['will-change'] = '';\n\n\t\t\tthis._hideClone();\n\n\t\t\t_toggleClass(cloneEl, _this.options.chosenClass, false);\n\n\n\t\t\t// #1143: IFrame support workaround\n\t\t\t_this._cloneId = _nextTick(function () {\n\t\t\t\tif (!_this.options.removeCloneOnHide) {\n\t\t\t\t\trootEl.insertBefore(cloneEl, dragEl);\n\t\t\t\t}\n\t\t\t\t_dispatchEvent(_this, rootEl, 'clone', dragEl);\n\t\t\t});\n\n\n\t\t\t!fallback && _toggleClass(dragEl, options.dragClass, true);\n\n\t\t\t// Set proper drop events\n\t\t\tif (fallback) {\n\t\t\t\tignoreNextClick = true;\n\t\t\t\t_this._loopId = setInterval(_this._emulateDragOver, 50);\n\t\t\t} else {\n\t\t\t\t// Undo what was set in _prepareDragStart before drag started\n\t\t\t\t_off(document, 'mouseup', _this._onDrop);\n\t\t\t\t_off(document, 'touchend', _this._onDrop);\n\t\t\t\t_off(document, 'touchcancel', _this._onDrop);\n\n\t\t\t\tif (dataTransfer) {\n\t\t\t\t\tdataTransfer.effectAllowed = 'move';\n\t\t\t\t\toptions.setData && options.setData.call(_this, dataTransfer, dragEl);\n\t\t\t\t}\n\n\t\t\t\t_on(document, 'drop', _this);\n\n\t\t\t\t// #1276 fix:\n\t\t\t\t_css(dragEl, 'transform', 'translateZ(0)');\n\t\t\t}\n\n\t\t\tawaitingDragStarted = true;\n\n\t\t\t_this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));\n\t\t\t_on(document, 'selectstart', _this);\n\t\t\tif (Safari) {\n\t\t\t\t_css(document.body, 'user-select', 'none');\n\t\t\t}\n\t\t},\n\n\n\t\t// Returns true - if no further action is needed (either inserted or another condition)\n\t\t_onDragOver: function (/**Event*/evt) {\n\t\t\tvar el = this.el,\n\t\t\t\ttarget = evt.target,\n\t\t\t\tdragRect,\n\t\t\t\ttargetRect,\n\t\t\t\trevert,\n\t\t\t\toptions = this.options,\n\t\t\t\tgroup = options.group,\n\t\t\t\tactiveSortable = Sortable.active,\n\t\t\t\tisOwner = (activeGroup === group),\n\t\t\t\tcanSort = options.sort,\n\t\t\t\t_this = this;\n\n\t\t\tif (_silent) return;\n\n\t\t\t// Return invocation when dragEl is inserted (or completed)\n\t\t\tfunction completed(insertion) {\n\t\t\t\tif (insertion) {\n\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\tactiveSortable._hideClone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tactiveSortable._showClone(_this);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (activeSortable) {\n\t\t\t\t\t\t// Set ghost class to new sortable's ghost class\n\t\t\t\t\t\t_toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\n\t\t\t\t\t\t_toggleClass(dragEl, options.ghostClass, true);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (putSortable !== _this && _this !== Sortable.active) {\n\t\t\t\t\t\tputSortable = _this;\n\t\t\t\t\t} else if (_this === Sortable.active) {\n\t\t\t\t\t\tputSortable = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Animation\n\t\t\t\t\tdragRect && _this._animate(dragRect, dragEl);\n\t\t\t\t\ttarget && targetRect && _this._animate(targetRect, target);\n\t\t\t\t}\n\n\n\t\t\t\t// Null lastTarget if it is not inside a previously swapped element\n\t\t\t\tif ((target === dragEl && !dragEl.animated) || (target === el && !target.animated)) {\n\t\t\t\t\tlastTarget = null;\n\t\t\t\t}\n\n\t\t\t\t// no bubbling and not fallback\n\t\t\t\tif (!options.dragoverBubble && !evt.rootEl && target !== document) {\n\t\t\t\t\t_this._handleAutoScroll(evt);\n\t\t\t\t\tdragEl.parentNode[expando]._computeIsAligned(evt);\n\n\t\t\t\t\t// Do not detect for empty insert if already inserted\n\t\t\t\t\t!insertion && nearestEmptyInsertDetectEvent(evt);\n\t\t\t\t}\n\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\n\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Call when dragEl has been inserted\n\t\t\tfunction changed() {\n\t\t\t\t_dispatchEvent(_this, rootEl, 'change', target, el, rootEl, oldIndex, _index(dragEl), oldDraggableIndex, _index(dragEl, options.draggable), evt);\n\t\t\t}\n\n\n\t\t\tif (evt.preventDefault !== void 0) {\n\t\t\t\tevt.cancelable && evt.preventDefault();\n\t\t\t}\n\n\n\t\t\tmoved = true;\n\n\t\t\ttarget = _closest(target, options.draggable, el, true);\n\n\t\t\t// target is dragEl or target is animated\n\t\t\tif (dragEl.contains(evt.target) || target.animated) {\n\t\t\t\treturn completed(false);\n\t\t\t}\n\n\t\t\tif (target !== dragEl) {\n\t\t\t\tignoreNextClick = false;\n\t\t\t}\n\n\t\t\tif (activeSortable && !options.disabled &&\n\t\t\t\t(isOwner\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\n\t\t\t\t\t: (\n\t\t\t\t\t\tputSortable === this ||\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\t(this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) &&\n\t\t\t\t\t\t\tgroup.checkPut(this, activeSortable, dragEl, evt)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tvar axis = this._getDirection(evt, target);\n\n\t\t\t\tdragRect = _getRect(dragEl);\n\n\t\t\t\tif (revert) {\n\t\t\t\t\tthis._hideClone();\n\t\t\t\t\tparentEl = rootEl; // actualization\n\n\t\t\t\t\tif (nextEl) {\n\t\t\t\t\t\trootEl.insertBefore(dragEl, nextEl);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trootEl.appendChild(dragEl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn completed(true);\n\t\t\t\t}\n\n\t\t\t\tvar elLastChild = _lastChild(el);\n\n\t\t\t\tif (!elLastChild || _ghostIsLast(evt, axis, el) && !elLastChild.animated) {\n\t\t\t\t\t// assign target only if condition is true\n\t\t\t\t\tif (elLastChild && el === evt.target) {\n\t\t\t\t\t\ttarget = elLastChild;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (target) {\n\t\t\t\t\t\ttargetRect = _getRect(target);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\tactiveSortable._hideClone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tactiveSortable._showClone(this);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\n\t\t\t\t\t\tel.appendChild(dragEl);\n\t\t\t\t\t\tparentEl = el; // actualization\n\t\t\t\t\t\trealDragElRect = null;\n\n\t\t\t\t\t\tchanged();\n\t\t\t\t\t\treturn completed(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (target && target !== dragEl && target.parentNode === el) {\n\t\t\t\t\tvar direction = 0,\n\t\t\t\t\t\ttargetBeforeFirstSwap,\n\t\t\t\t\t\taligned = target.sortableMouseAligned,\n\t\t\t\t\t\tdifferentLevel = dragEl.parentNode !== el,\n\t\t\t\t\t\tside1 = axis === 'vertical' ? 'top' : 'left',\n\t\t\t\t\t\tscrolledPastTop = _isScrolledPast(target, 'top') || _isScrolledPast(dragEl, 'top'),\n\t\t\t\t\t\tscrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\n\n\n\t\t\t\t\tif (lastTarget !== target) {\n\t\t\t\t\t\tlastMode = null;\n\t\t\t\t\t\ttargetBeforeFirstSwap = _getRect(target)[side1];\n\t\t\t\t\t\tpastFirstInvertThresh = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Reference: https://www.lucidchart.com/documents/view/10fa0e93-e362-4126-aca2-b709ee56bd8b/0\n\t\t\t\t\tif (\n\t\t\t\t\t\t_isElInRowColumn(dragEl, target, axis) && aligned ||\n\t\t\t\t\t\tdifferentLevel ||\n\t\t\t\t\t\tscrolledPastTop ||\n\t\t\t\t\t\toptions.invertSwap ||\n\t\t\t\t\t\tlastMode === 'insert' ||\n\t\t\t\t\t\t// Needed, in the case that we are inside target and inserted because not aligned... aligned will stay false while inside\n\t\t\t\t\t\t// and lastMode will change to 'insert', but we must swap\n\t\t\t\t\t\tlastMode === 'swap'\n\t\t\t\t\t) {\n\t\t\t\t\t\t// New target that we will be inside\n\t\t\t\t\t\tif (lastMode !== 'swap') {\n\t\t\t\t\t\t\tisCircumstantialInvert = options.invertSwap || differentLevel;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdirection = _getSwapDirection(evt, target, axis,\n\t\t\t\t\t\t\toptions.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold,\n\t\t\t\t\t\t\tisCircumstantialInvert,\n\t\t\t\t\t\t\tlastTarget === target);\n\t\t\t\t\t\tlastMode = 'swap';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Insert at position\n\t\t\t\t\t\tdirection = _getInsertDirection(target);\n\t\t\t\t\t\tlastMode = 'insert';\n\t\t\t\t\t}\n\t\t\t\t\tif (direction === 0) return completed(false);\n\n\t\t\t\t\trealDragElRect = null;\n\t\t\t\t\tlastTarget = target;\n\n\t\t\t\t\tlastDirection = direction;\n\n\t\t\t\t\ttargetRect = _getRect(target);\n\n\t\t\t\t\tvar nextSibling = target.nextElementSibling,\n\t\t\t\t\t\tafter = false;\n\n\t\t\t\t\tafter = direction === 1;\n\n\t\t\t\t\tvar moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\n\n\t\t\t\t\tif (moveVector !== false) {\n\t\t\t\t\t\tif (moveVector === 1 || moveVector === -1) {\n\t\t\t\t\t\t\tafter = (moveVector === 1);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_silent = true;\n\t\t\t\t\t\tsetTimeout(_unsilent, 30);\n\n\t\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\t\tactiveSortable._hideClone();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tactiveSortable._showClone(this);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (after && !nextSibling) {\n\t\t\t\t\t\t\tel.appendChild(dragEl);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Undo chrome's scroll adjustment\n\t\t\t\t\t\tif (scrolledPastTop) {\n\t\t\t\t\t\t\t_scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tparentEl = dragEl.parentNode; // actualization\n\n\t\t\t\t\t\t// must be done before animation\n\t\t\t\t\t\tif (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\n\t\t\t\t\t\t\ttargetMoveDistance = abs(targetBeforeFirstSwap - _getRect(target)[side1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchanged();\n\n\t\t\t\t\t\treturn completed(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (el.contains(dragEl)) {\n\t\t\t\t\treturn completed(false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t},\n\n\t\t_animate: function (prevRect, target) {\n\t\t\tvar ms = this.options.animation;\n\n\t\t\tif (ms) {\n\t\t\t\tvar currentRect = _getRect(target);\n\n\t\t\t\tif (target === dragEl) {\n\t\t\t\t\trealDragElRect = currentRect;\n\t\t\t\t}\n\n\t\t\t\tif (prevRect.nodeType === 1) {\n\t\t\t\t\tprevRect = _getRect(prevRect);\n\t\t\t\t}\n\n\t\t\t\t// Check if actually moving position\n\t\t\t\tif ((prevRect.left + prevRect.width / 2) !== (currentRect.left + currentRect.width / 2)\n\t\t\t\t\t|| (prevRect.top + prevRect.height / 2) !== (currentRect.top + currentRect.height / 2)\n\t\t\t\t) {\n\t\t\t\t\tvar matrix = _matrix(this.el),\n\t\t\t\t\t\tscaleX = matrix && matrix.a,\n\t\t\t\t\t\tscaleY = matrix && matrix.d;\n\n\t\t\t\t\t_css(target, 'transition', 'none');\n\t\t\t\t\t_css(target, 'transform', 'translate3d('\n\t\t\t\t\t\t+ (prevRect.left - currentRect.left) / (scaleX ? scaleX : 1) + 'px,'\n\t\t\t\t\t\t+ (prevRect.top - currentRect.top) / (scaleY ? scaleY : 1) + 'px,0)'\n\t\t\t\t\t);\n\n\t\t\t\t\tthis._repaint(target);\n\t\t\t\t\t_css(target, 'transition', 'transform ' + ms + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\n\t\t\t\t\t_css(target, 'transform', 'translate3d(0,0,0)');\n\t\t\t\t}\n\n\t\t\t\t(typeof target.animated === 'number') && clearTimeout(target.animated);\n\t\t\t\ttarget.animated = setTimeout(function () {\n\t\t\t\t\t_css(target, 'transition', '');\n\t\t\t\t\t_css(target, 'transform', '');\n\t\t\t\t\ttarget.animated = false;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t},\n\n\t\t_repaint: function(target) {\n\t\t\treturn target.offsetWidth;\n\t\t},\n\n\t\t_offMoveEvents: function() {\n\t\t\t_off(document, 'touchmove', this._onTouchMove);\n\t\t\t_off(document, 'pointermove', this._onTouchMove);\n\t\t\t_off(document, 'dragover', nearestEmptyInsertDetectEvent);\n\t\t\t_off(document, 'mousemove', nearestEmptyInsertDetectEvent);\n\t\t\t_off(document, 'touchmove', nearestEmptyInsertDetectEvent);\n\t\t},\n\n\t\t_offUpEvents: function () {\n\t\t\tvar ownerDocument = this.el.ownerDocument;\n\n\t\t\t_off(ownerDocument, 'mouseup', this._onDrop);\n\t\t\t_off(ownerDocument, 'touchend', this._onDrop);\n\t\t\t_off(ownerDocument, 'pointerup', this._onDrop);\n\t\t\t_off(ownerDocument, 'touchcancel', this._onDrop);\n\t\t\t_off(document, 'selectstart', this);\n\t\t},\n\n\t\t_onDrop: function (/**Event*/evt) {\n\t\t\tvar el = this.el,\n\t\t\t\toptions = this.options;\n\t\t\tawaitingDragStarted = false;\n\t\t\tscrolling = false;\n\t\t\tisCircumstantialInvert = false;\n\t\t\tpastFirstInvertThresh = false;\n\n\t\t\tclearInterval(this._loopId);\n\n\t\t\tclearInterval(pointerElemChangedInterval);\n\t\t\t_clearAutoScrolls();\n\t\t\t_cancelThrottle();\n\n\t\t\tclearTimeout(this._dragStartTimer);\n\n\t\t\t_cancelNextTick(this._cloneId);\n\t\t\t_cancelNextTick(this._dragStartId);\n\n\t\t\t// Unbind events\n\t\t\t_off(document, 'mousemove', this._onTouchMove);\n\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t_off(document, 'drop', this);\n\t\t\t\t_off(el, 'dragstart', this._onDragStart);\n\t\t\t\t_off(document, 'dragover', this._handleAutoScroll);\n\t\t\t\t_off(document, 'dragover', _checkAlignment);\n\t\t\t}\n\n\t\t\tif (Safari) {\n\t\t\t\t_css(document.body, 'user-select', '');\n\t\t\t}\n\n\t\t\tthis._offMoveEvents();\n\t\t\tthis._offUpEvents();\n\n\t\t\tif (evt) {\n\t\t\t\tif (moved) {\n\t\t\t\t\tevt.cancelable && evt.preventDefault();\n\t\t\t\t\t!options.dropBubble && evt.stopPropagation();\n\t\t\t\t}\n\n\t\t\t\tghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n\t\t\t\tif (rootEl === parentEl || (putSortable && putSortable.lastPutMode !== 'clone')) {\n\t\t\t\t\t// Remove clone\n\t\t\t\t\tcloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);\n\t\t\t\t}\n\n\t\t\t\tif (dragEl) {\n\t\t\t\t\tif (this.nativeDraggable) {\n\t\t\t\t\t\t_off(dragEl, 'dragend', this);\n\t\t\t\t\t}\n\n\t\t\t\t\t_disableDraggable(dragEl);\n\t\t\t\t\tdragEl.style['will-change'] = '';\n\n\t\t\t\t\t// Remove class's\n\t\t\t\t\t_toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\n\t\t\t\t\t_toggleClass(dragEl, this.options.chosenClass, false);\n\n\t\t\t\t\t// Drag stop event\n\t\t\t\t\t_dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex, null, oldDraggableIndex, null, evt);\n\n\t\t\t\t\tif (rootEl !== parentEl) {\n\t\t\t\t\t\tnewIndex = _index(dragEl);\n\t\t\t\t\t\tnewDraggableIndex = _index(dragEl, options.draggable);\n\n\t\t\t\t\t\tif (newIndex >= 0) {\n\t\t\t\t\t\t\t// Add event\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\n\n\t\t\t\t\t\t\t// Remove event\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\n\n\t\t\t\t\t\t\t// drag from one list and drop into another\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tputSortable && putSortable.save();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent\n\t\t\t\t\t\t\tnewIndex = _index(dragEl);\n\t\t\t\t\t\t\tnewDraggableIndex = _index(dragEl, options.draggable);\n\n\t\t\t\t\t\t\tif (newIndex >= 0) {\n\t\t\t\t\t\t\t\t// drag & drop within the same list\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Sortable.active) {\n\t\t\t\t\t\t/* jshint eqnull:true */\n\t\t\t\t\t\tif (newIndex == null || newIndex === -1) {\n\t\t\t\t\t\t\tnewIndex = oldIndex;\n\t\t\t\t\t\t\tnewDraggableIndex = oldDraggableIndex;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, evt);\n\n\t\t\t\t\t\t// Save sorting\n\t\t\t\t\t\tthis.save();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tthis._nulling();\n\t\t},\n\n\t\t_nulling: function() {\n\t\t\trootEl =\n\t\t\tdragEl =\n\t\t\tparentEl =\n\t\t\tghostEl =\n\t\t\tnextEl =\n\t\t\tcloneEl =\n\t\t\tlastDownEl =\n\n\t\t\tscrollEl =\n\t\t\tscrollParentEl =\n\t\t\tautoScrolls.length =\n\n\t\t\tpointerElemChangedInterval =\n\t\t\tlastPointerElemX =\n\t\t\tlastPointerElemY =\n\n\t\t\ttapEvt =\n\t\t\ttouchEvt =\n\n\t\t\tmoved =\n\t\t\tnewIndex =\n\t\t\toldIndex =\n\n\t\t\tlastTarget =\n\t\t\tlastDirection =\n\n\t\t\trealDragElRect =\n\n\t\t\tputSortable =\n\t\t\tactiveGroup =\n\t\t\tSortable.active = null;\n\n\t\t\tsavedInputChecked.forEach(function (el) {\n\t\t\t\tel.checked = true;\n\t\t\t});\n\n\t\t\tsavedInputChecked.length = 0;\n\t\t},\n\n\t\thandleEvent: function (/**Event*/evt) {\n\t\t\tswitch (evt.type) {\n\t\t\t\tcase 'drop':\n\t\t\t\tcase 'dragend':\n\t\t\t\t\tthis._onDrop(evt);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'dragenter':\n\t\t\t\tcase 'dragover':\n\t\t\t\t\tif (dragEl) {\n\t\t\t\t\t\tthis._onDragOver(evt);\n\t\t\t\t\t\t_globalDragOver(evt);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'selectstart':\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Serializes the item into an array of string.\n\t\t * @returns {String[]}\n\t\t */\n\t\ttoArray: function () {\n\t\t\tvar order = [],\n\t\t\t\tel,\n\t\t\t\tchildren = this.el.children,\n\t\t\t\ti = 0,\n\t\t\t\tn = children.length,\n\t\t\t\toptions = this.options;\n\n\t\t\tfor (; i < n; i++) {\n\t\t\t\tel = children[i];\n\t\t\t\tif (_closest(el, options.draggable, this.el, false)) {\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn order;\n\t\t},\n\n\n\t\t/**\n\t\t * Sorts the elements according to the array.\n\t\t * @param  {String[]}  order  order of the items\n\t\t */\n\t\tsort: function (order) {\n\t\t\tvar items = {}, rootEl = this.el;\n\n\t\t\tthis.toArray().forEach(function (id, i) {\n\t\t\t\tvar el = rootEl.children[i];\n\n\t\t\t\tif (_closest(el, this.options.draggable, rootEl, false)) {\n\t\t\t\t\titems[id] = el;\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\torder.forEach(function (id) {\n\t\t\t\tif (items[id]) {\n\t\t\t\t\trootEl.removeChild(items[id]);\n\t\t\t\t\trootEl.appendChild(items[id]);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\n\t\t/**\n\t\t * Save the current sorting\n\t\t */\n\t\tsave: function () {\n\t\t\tvar store = this.options.store;\n\t\t\tstore && store.set && store.set(this);\n\t\t},\n\n\n\t\t/**\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\t\t * @param   {HTMLElement}  el\n\t\t * @param   {String}       [selector]  default: `options.draggable`\n\t\t * @returns {HTMLElement|null}\n\t\t */\n\t\tclosest: function (el, selector) {\n\t\t\treturn _closest(el, selector || this.options.draggable, this.el, false);\n\t\t},\n\n\n\t\t/**\n\t\t * Set/get option\n\t\t * @param   {string} name\n\t\t * @param   {*}      [value]\n\t\t * @returns {*}\n\t\t */\n\t\toption: function (name, value) {\n\t\t\tvar options = this.options;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn options[name];\n\t\t\t} else {\n\t\t\t\toptions[name] = value;\n\n\t\t\t\tif (name === 'group') {\n\t\t\t\t\t_prepareGroup(options);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Destroy\n\t\t */\n\t\tdestroy: function () {\n\t\t\tvar el = this.el;\n\n\t\t\tel[expando] = null;\n\n\t\t\t_off(el, 'mousedown', this._onTapStart);\n\t\t\t_off(el, 'touchstart', this._onTapStart);\n\t\t\t_off(el, 'pointerdown', this._onTapStart);\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t_off(el, 'dragover', this);\n\t\t\t\t_off(el, 'dragenter', this);\n\t\t\t}\n\t\t\t// Remove draggable attributes\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n\t\t\t\tel.removeAttribute('draggable');\n\t\t\t});\n\n\t\t\tthis._onDrop();\n\n\t\t\tsortables.splice(sortables.indexOf(this.el), 1);\n\n\t\t\tthis.el = el = null;\n\t\t},\n\n\t\t_hideClone: function() {\n\t\t\tif (!cloneEl.cloneHidden) {\n\t\t\t\t_css(cloneEl, 'display', 'none');\n\t\t\t\tcloneEl.cloneHidden = true;\n\t\t\t\tif (cloneEl.parentNode && this.options.removeCloneOnHide) {\n\t\t\t\t\tcloneEl.parentNode.removeChild(cloneEl);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_showClone: function(putSortable) {\n\t\t\tif (putSortable.lastPutMode !== 'clone') {\n\t\t\t\tthis._hideClone();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (cloneEl.cloneHidden) {\n\t\t\t\t// show clone at dragEl or original position\n\t\t\t\tif (rootEl.contains(dragEl) && !this.options.group.revertClone) {\n\t\t\t\t\trootEl.insertBefore(cloneEl, dragEl);\n\t\t\t\t} else if (nextEl) {\n\t\t\t\t\trootEl.insertBefore(cloneEl, nextEl);\n\t\t\t\t} else {\n\t\t\t\t\trootEl.appendChild(cloneEl);\n\t\t\t\t}\n\n\t\t\t\tif (this.options.group.revertClone) {\n\t\t\t\t\tthis._animate(dragEl, cloneEl);\n\t\t\t\t}\n\t\t\t\t_css(cloneEl, 'display', '');\n\t\t\t\tcloneEl.cloneHidden = false;\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction _closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx, includeCTX) {\n\t\tif (el) {\n\t\t\tctx = ctx || document;\n\n\t\t\tdo {\n\t\t\t\tif (\n\t\t\t\t\tselector != null &&\n\t\t\t\t\t(\n\t\t\t\t\t\tselector[0] === '>' ?\n\t\t\t\t\t\tel.parentNode === ctx && _matches(el, selector) :\n\t\t\t\t\t\t_matches(el, selector)\n\t\t\t\t\t) ||\n\t\t\t\t\tincludeCTX && el === ctx\n\t\t\t\t) {\n\t\t\t\t\treturn el;\n\t\t\t\t}\n\n\t\t\t\tif (el === ctx) break;\n\t\t\t\t/* jshint boss:true */\n\t\t\t} while (el = _getParentOrHost(el));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\n\tfunction _getParentOrHost(el) {\n\t\treturn (el.host && el !== document && el.host.nodeType)\n\t\t\t? el.host\n\t\t\t: el.parentNode;\n\t}\n\n\n\tfunction _globalDragOver(/**Event*/evt) {\n\t\tif (evt.dataTransfer) {\n\t\t\tevt.dataTransfer.dropEffect = 'move';\n\t\t}\n\t\tevt.cancelable && evt.preventDefault();\n\t}\n\n\n\tfunction _on(el, event, fn) {\n\t\tel.addEventListener(event, fn, IE11OrLess ? false : captureMode);\n\t}\n\n\n\tfunction _off(el, event, fn) {\n\t\tel.removeEventListener(event, fn, IE11OrLess ? false : captureMode);\n\t}\n\n\n\tfunction _toggleClass(el, name, state) {\n\t\tif (el && name) {\n\t\t\tif (el.classList) {\n\t\t\t\tel.classList[state ? 'add' : 'remove'](name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');\n\t\t\t\tel.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction _css(el, prop, val) {\n\t\tvar style = el && el.style;\n\n\t\tif (style) {\n\t\t\tif (val === void 0) {\n\t\t\t\tif (document.defaultView && document.defaultView.getComputedStyle) {\n\t\t\t\t\tval = document.defaultView.getComputedStyle(el, '');\n\t\t\t\t}\n\t\t\t\telse if (el.currentStyle) {\n\t\t\t\t\tval = el.currentStyle;\n\t\t\t\t}\n\n\t\t\t\treturn prop === void 0 ? val : val[prop];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!(prop in style) && prop.indexOf('webkit') === -1) {\n\t\t\t\t\tprop = '-webkit-' + prop;\n\t\t\t\t}\n\n\t\t\t\tstyle[prop] = val + (typeof val === 'string' ? '' : 'px');\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction _matrix(el) {\n\t\tvar appliedTransforms = '';\n\t\tdo {\n\t\t\tvar transform = _css(el, 'transform');\n\n\t\t\tif (transform && transform !== 'none') {\n\t\t\t\tappliedTransforms = transform + ' ' + appliedTransforms;\n\t\t\t}\n\t\t\t/* jshint boss:true */\n\t\t} while (el = el.parentNode);\n\n\t\tif (window.DOMMatrix) {\n\t\t\treturn new DOMMatrix(appliedTransforms);\n\t\t} else if (window.WebKitCSSMatrix) {\n\t\t\treturn new WebKitCSSMatrix(appliedTransforms);\n\t\t} else if (window.CSSMatrix) {\n\t\t\treturn new CSSMatrix(appliedTransforms);\n\t\t}\n\t}\n\n\n\tfunction _find(ctx, tagName, iterator) {\n\t\tif (ctx) {\n\t\t\tvar list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\n\n\t\t\tif (iterator) {\n\t\t\t\tfor (; i < n; i++) {\n\t\t\t\t\titerator(list[i], i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\n\n\tfunction _dispatchEvent(\n\t\tsortable, rootEl, name,\n\t\ttargetEl, toEl, fromEl,\n\t\tstartIndex, newIndex,\n\t\tstartDraggableIndex, newDraggableIndex,\n\t\toriginalEvt\n\t) {\n\t\tsortable = (sortable || rootEl[expando]);\n\t\tvar evt,\n\t\t\toptions = sortable.options,\n\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);\n\t\t// Support for new CustomEvent feature\n\t\tif (window.CustomEvent && !IE11OrLess && !Edge) {\n\t\t\tevt = new CustomEvent(name, {\n\t\t\t\tbubbles: true,\n\t\t\t\tcancelable: true\n\t\t\t});\n\t\t} else {\n\t\t\tevt = document.createEvent('Event');\n\t\t\tevt.initEvent(name, true, true);\n\t\t}\n\n\t\tevt.to = toEl || rootEl;\n\t\tevt.from = fromEl || rootEl;\n\t\tevt.item = targetEl || rootEl;\n\t\tevt.clone = cloneEl;\n\n\t\tevt.oldIndex = startIndex;\n\t\tevt.newIndex = newIndex;\n\n\t\tevt.oldDraggableIndex = startDraggableIndex;\n\t\tevt.newDraggableIndex = newDraggableIndex;\n\n\t\tevt.originalEvent = originalEvt;\n\t\tevt.pullMode = putSortable ? putSortable.lastPutMode : undefined;\n\n\t\tif (rootEl) {\n\t\t\trootEl.dispatchEvent(evt);\n\t\t}\n\n\t\tif (options[onName]) {\n\t\t\toptions[onName].call(sortable, evt);\n\t\t}\n\t}\n\n\n\tfunction _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {\n\t\tvar evt,\n\t\t\tsortable = fromEl[expando],\n\t\t\tonMoveFn = sortable.options.onMove,\n\t\t\tretVal;\n\t\t// Support for new CustomEvent feature\n\t\tif (window.CustomEvent && !IE11OrLess && !Edge) {\n\t\t\tevt = new CustomEvent('move', {\n\t\t\t\tbubbles: true,\n\t\t\t\tcancelable: true\n\t\t\t});\n\t\t} else {\n\t\t\tevt = document.createEvent('Event');\n\t\t\tevt.initEvent('move', true, true);\n\t\t}\n\n\t\tevt.to = toEl;\n\t\tevt.from = fromEl;\n\t\tevt.dragged = dragEl;\n\t\tevt.draggedRect = dragRect;\n\t\tevt.related = targetEl || toEl;\n\t\tevt.relatedRect = targetRect || _getRect(toEl);\n\t\tevt.willInsertAfter = willInsertAfter;\n\n\t\tevt.originalEvent = originalEvt;\n\n\t\tfromEl.dispatchEvent(evt);\n\n\t\tif (onMoveFn) {\n\t\t\tretVal = onMoveFn.call(sortable, evt, originalEvt);\n\t\t}\n\n\t\treturn retVal;\n\t}\n\n\tfunction _disableDraggable(el) {\n\t\tel.draggable = false;\n\t}\n\n\tfunction _unsilent() {\n\t\t_silent = false;\n\t}\n\n\t/**\n\t * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)\n\t * and non-draggable elements\n\t * @param  {HTMLElement} el       The parent element\n\t * @param  {Number} childNum      The index of the child\n\t * @param  {Object} options       Parent Sortable's options\n\t * @return {HTMLElement}          The child at index childNum, or null if not found\n\t */\n\tfunction _getChild(el, childNum, options) {\n\t\tvar currentChild = 0,\n\t\t\ti = 0,\n\t\t\tchildren = el.children;\n\n\t\twhile (i < children.length) {\n\t\t\tif (\n\t\t\t\tchildren[i].style.display !== 'none' &&\n\t\t\t\tchildren[i] !== ghostEl &&\n\t\t\t\tchildren[i] !== dragEl &&\n\t\t\t\t_closest(children[i], options.draggable, el, false)\n\t\t\t) {\n\t\t\t\tif (currentChild === childNum) {\n\t\t\t\t\treturn children[i];\n\t\t\t\t}\n\t\t\t\tcurrentChild++;\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\n\t * @param  {HTMLElement} el       Parent element\n\t * @return {HTMLElement}          The last child, ignoring ghostEl\n\t */\n\tfunction _lastChild(el) {\n\t\tvar last = el.lastElementChild;\n\n\t\twhile (last && (last === ghostEl || _css(last, 'display') === 'none')) {\n\t\t\tlast = last.previousElementSibling;\n\t\t}\n\n\t\treturn last || null;\n\t}\n\n\tfunction _ghostIsLast(evt, axis, el) {\n\t\tvar elRect = _getRect(_lastChild(el)),\n\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\n\t\t\tmouseOnOppAxis = axis === 'vertical' ? evt.clientX : evt.clientY,\n\t\t\ttargetS2 = axis === 'vertical' ? elRect.bottom : elRect.right,\n\t\t\ttargetS1Opp = axis === 'vertical' ? elRect.left : elRect.top,\n\t\t\ttargetS2Opp = axis === 'vertical' ? elRect.right : elRect.bottom,\n\t\t\tspacer = 10;\n\n\t\treturn (\n\t\t\taxis === 'vertical' ?\n\t\t\t\t(mouseOnOppAxis > targetS2Opp + spacer || mouseOnOppAxis <= targetS2Opp && mouseOnAxis > targetS2 && mouseOnOppAxis >= targetS1Opp) :\n\t\t\t\t(mouseOnAxis > targetS2 && mouseOnOppAxis > targetS1Opp || mouseOnAxis <= targetS2 && mouseOnOppAxis > targetS2Opp + spacer)\n\t\t);\n\t}\n\n\tfunction _getSwapDirection(evt, target, axis, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\n\t\tvar targetRect = _getRect(target),\n\t\t\tmouseOnAxis = axis === 'vertical' ? evt.clientY : evt.clientX,\n\t\t\ttargetLength = axis === 'vertical' ? targetRect.height : targetRect.width,\n\t\t\ttargetS1 = axis === 'vertical' ? targetRect.top : targetRect.left,\n\t\t\ttargetS2 = axis === 'vertical' ? targetRect.bottom : targetRect.right,\n\t\t\tdragRect = _getRect(dragEl),\n\t\t\tinvert = false;\n\n\n\t\tif (!invertSwap) {\n\t\t\t// Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\n\t\t\tif (isLastTarget && targetMoveDistance < targetLength * swapThreshold) { // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\n\t\t\t\t// check if past first invert threshold on side opposite of lastDirection\n\t\t\t\tif (!pastFirstInvertThresh &&\n\t\t\t\t\t(lastDirection === 1 ?\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2\n\t\t\t\t\t\t) :\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\t// past first invert threshold, do not restrict inverted threshold to dragEl shadow\n\t\t\t\t\tpastFirstInvertThresh = true;\n\t\t\t\t}\n\n\t\t\t\tif (!pastFirstInvertThresh) {\n\t\t\t\t\tvar dragS1 = axis === 'vertical' ? dragRect.top : dragRect.left,\n\t\t\t\t\t\tdragS2 = axis === 'vertical' ? dragRect.bottom : dragRect.right;\n\t\t\t\t\t// dragEl shadow (target move distance shadow)\n\t\t\t\t\tif (\n\t\t\t\t\t\tlastDirection === 1 ?\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\n\t\t\t\t\t\t) :\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tmouseOnAxis > targetS2 - targetMoveDistance\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn lastDirection * -1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tinvert = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Regular\n\t\t\t\tif (\n\t\t\t\t\tmouseOnAxis > targetS1 + (targetLength * (1 - swapThreshold) / 2) &&\n\t\t\t\t\tmouseOnAxis < targetS2 - (targetLength * (1 - swapThreshold) / 2)\n\t\t\t\t) {\n\t\t\t\t\treturn _getInsertDirection(target);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinvert = invert || invertSwap;\n\n\t\tif (invert) {\n\t\t\t// Invert of regular\n\t\t\tif (\n\t\t\t\tmouseOnAxis < targetS1 + (targetLength * invertedSwapThreshold / 2) ||\n\t\t\t\tmouseOnAxis > targetS2 - (targetLength * invertedSwapThreshold / 2)\n\t\t\t)\n\t\t\t{\n\t\t\t\treturn ((mouseOnAxis > targetS1 + targetLength / 2) ? 1 : -1);\n\t\t\t}\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\t/**\n\t * Gets the direction dragEl must be swapped relative to target in order to make it\n\t * seem that dragEl has been \"inserted\" into that element's position\n\t * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\n\t * @return {Number}                   Direction dragEl must be swapped\n\t */\n\tfunction _getInsertDirection(target) {\n\t\tvar dragElIndex = _index(dragEl),\n\t\t\ttargetIndex = _index(target);\n\n\t\tif (dragElIndex < targetIndex) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\n\t/**\n\t * Generate id\n\t * @param   {HTMLElement} el\n\t * @returns {String}\n\t * @private\n\t */\n\tfunction _generateId(el) {\n\t\tvar str = el.tagName + el.className + el.src + el.href + el.textContent,\n\t\t\ti = str.length,\n\t\t\tsum = 0;\n\n\t\twhile (i--) {\n\t\t\tsum += str.charCodeAt(i);\n\t\t}\n\n\t\treturn sum.toString(36);\n\t}\n\n\t/**\n\t * Returns the index of an element within its parent for a selected set of\n\t * elements\n\t * @param  {HTMLElement} el\n\t * @param  {selector} selector\n\t * @return {number}\n\t */\n\tfunction _index(el, selector) {\n\t\tvar index = 0;\n\n\t\tif (!el || !el.parentNode) {\n\t\t\treturn -1;\n\t\t}\n\n\t\twhile (el && (el = el.previousElementSibling)) {\n\t\t\tif ((el.nodeName.toUpperCase() !== 'TEMPLATE') && el !== cloneEl && (!selector || _matches(el, selector))) {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tfunction _matches(/**HTMLElement*/el, /**String*/selector) {\n\t\tif (!selector) return;\n\n\t\tselector[0] === '>' && (selector = selector.substring(1));\n\n\t\tif (el) {\n\t\t\ttry {\n\t\t\t\tif (el.matches) {\n\t\t\t\t\treturn el.matches(selector);\n\t\t\t\t} else if (el.msMatchesSelector) {\n\t\t\t\t\treturn el.msMatchesSelector(selector);\n\t\t\t\t} else if (el.webkitMatchesSelector) {\n\t\t\t\t\treturn el.webkitMatchesSelector(selector);\n\t\t\t\t}\n\t\t\t} catch(_) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tvar _throttleTimeout;\n\tfunction _throttle(callback, ms) {\n\t\treturn function () {\n\t\t\tif (!_throttleTimeout) {\n\t\t\t\tvar args = arguments,\n\t\t\t\t\t_this = this;\n\n\t\t\t\t_throttleTimeout = setTimeout(function () {\n\t\t\t\t\tif (args.length === 1) {\n\t\t\t\t\t\tcallback.call(_this, args[0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback.apply(_this, args);\n\t\t\t\t\t}\n\n\t\t\t\t\t_throttleTimeout = void 0;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction _cancelThrottle() {\n\t\tclearTimeout(_throttleTimeout);\n\t\t_throttleTimeout = void 0;\n\t}\n\n\tfunction _extend(dst, src) {\n\t\tif (dst && src) {\n\t\t\tfor (var key in src) {\n\t\t\t\tif (src.hasOwnProperty(key)) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\n\tfunction _clone(el) {\n\t\tif (Polymer && Polymer.dom) {\n\t\t\treturn Polymer.dom(el).cloneNode(true);\n\t\t}\n\t\telse if ($) {\n\t\t\treturn $(el).clone(true)[0];\n\t\t}\n\t\telse {\n\t\t\treturn el.cloneNode(true);\n\t\t}\n\t}\n\n\tfunction _saveInputCheckedState(root) {\n\t\tsavedInputChecked.length = 0;\n\n\t\tvar inputs = root.getElementsByTagName('input');\n\t\tvar idx = inputs.length;\n\n\t\twhile (idx--) {\n\t\t\tvar el = inputs[idx];\n\t\t\tel.checked && savedInputChecked.push(el);\n\t\t}\n\t}\n\n\tfunction _nextTick(fn) {\n\t\treturn setTimeout(fn, 0);\n\t}\n\n\tfunction _cancelNextTick(id) {\n\t\treturn clearTimeout(id);\n\t}\n\n\n\t/**\n\t * Returns the \"bounding client rect\" of given element\n\t * @param  {HTMLElement} el                The element whose boundingClientRect is wanted\n\t * @param  {[HTMLElement]} container       the parent the element will be placed in\n\t * @param  {[Boolean]} adjustForTransform  Whether the rect should compensate for parent's transform\n\t * @return {Object}                        The boundingClientRect of el\n\t */\n\tfunction _getRect(el, adjustForTransform, container, adjustForFixed) {\n\t\tif (!el.getBoundingClientRect && el !== win) return;\n\n\t\tvar elRect,\n\t\t\ttop,\n\t\t\tleft,\n\t\t\tbottom,\n\t\t\tright,\n\t\t\theight,\n\t\t\twidth;\n\n\t\tif (el !== win && el !== _getWindowScrollingElement()) {\n\t\t\telRect = el.getBoundingClientRect();\n\t\t\ttop = elRect.top;\n\t\t\tleft = elRect.left;\n\t\t\tbottom = elRect.bottom;\n\t\t\tright = elRect.right;\n\t\t\theight = elRect.height;\n\t\t\twidth = elRect.width;\n\t\t} else {\n\t\t\ttop = 0;\n\t\t\tleft = 0;\n\t\t\tbottom = window.innerHeight;\n\t\t\tright = window.innerWidth;\n\t\t\theight = window.innerHeight;\n\t\t\twidth = window.innerWidth;\n\t\t}\n\n\t\tif (adjustForFixed && el !== win) {\n\t\t\t// Adjust for translate()\n\t\t\tcontainer = container || el.parentNode;\n\n\t\t\t// solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)\n\t\t\t// Not needed on <= IE11\n\t\t\tif (!IE11OrLess) {\n\t\t\t\tdo {\n\t\t\t\t\tif (container && container.getBoundingClientRect && _css(container, 'transform') !== 'none') {\n\t\t\t\t\t\tvar containerRect = container.getBoundingClientRect();\n\n\t\t\t\t\t\t// Set relative to edges of padding box of container\n\t\t\t\t\t\ttop -= containerRect.top + parseInt(_css(container, 'border-top-width'));\n\t\t\t\t\t\tleft -= containerRect.left + parseInt(_css(container, 'border-left-width'));\n\t\t\t\t\t\tbottom = top + elRect.height;\n\t\t\t\t\t\tright = left + elRect.width;\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t} while (container = container.parentNode);\n\t\t\t}\n\t\t}\n\n\t\tif (adjustForTransform && el !== win) {\n\t\t\t// Adjust for scale()\n\t\t\tvar matrix = _matrix(container || el),\n\t\t\t\tscaleX = matrix && matrix.a,\n\t\t\t\tscaleY = matrix && matrix.d;\n\n\t\t\tif (matrix) {\n\t\t\t\ttop /= scaleY;\n\t\t\t\tleft /= scaleX;\n\n\t\t\t\twidth /= scaleX;\n\t\t\t\theight /= scaleY;\n\n\t\t\t\tbottom = top + height;\n\t\t\t\tright = left + width;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttop: top,\n\t\t\tleft: left,\n\t\t\tbottom: bottom,\n\t\t\tright: right,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t}\n\n\n\t/**\n\t * Checks if a side of an element is scrolled past a side of it's parents\n\t * @param  {HTMLElement}  el       The element who's side being scrolled out of view is in question\n\t * @param  {String}       side     Side of the element in question ('top', 'left', 'right', 'bottom')\n\t * @return {HTMLElement}           The parent scroll element that the el's side is scrolled past, or null if there is no such element\n\t */\n\tfunction _isScrolledPast(el, side) {\n\t\tvar parent = _getParentAutoScrollElement(el, true),\n\t\t\telSide = _getRect(el)[side];\n\n\t\t/* jshint boss:true */\n\t\twhile (parent) {\n\t\t\tvar parentSide = _getRect(parent)[side],\n\t\t\t\tvisible;\n\n\t\t\tif (side === 'top' || side === 'left') {\n\t\t\t\tvisible = elSide >= parentSide;\n\t\t\t} else {\n\t\t\t\tvisible = elSide <= parentSide;\n\t\t\t}\n\n\t\t\tif (!visible) return parent;\n\n\t\t\tif (parent === _getWindowScrollingElement()) break;\n\n\t\t\tparent = _getParentAutoScrollElement(parent, false);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.\n\t * The value is returned in real pixels.\n\t * @param  {HTMLElement} el\n\t * @return {Array}             Offsets in the format of [left, top]\n\t */\n\tfunction _getRelativeScrollOffset(el) {\n\t\tvar offsetLeft = 0,\n\t\t\toffsetTop = 0,\n\t\t\twinScroller = _getWindowScrollingElement();\n\n\t\tif (el) {\n\t\t\tdo {\n\t\t\t\tvar matrix = _matrix(el),\n\t\t\t\t\tscaleX = matrix.a,\n\t\t\t\t\tscaleY = matrix.d;\n\n\t\t\t\toffsetLeft += el.scrollLeft * scaleX;\n\t\t\t\toffsetTop += el.scrollTop * scaleY;\n\t\t\t} while (el !== winScroller && (el = el.parentNode));\n\t\t}\n\n\t\treturn [offsetLeft, offsetTop];\n\t}\n\n\t// Fixed #973:\n\t_on(document, 'touchmove', function(evt) {\n\t\tif ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\n\t\t\tevt.preventDefault();\n\t\t}\n\t});\n\n\n\t// Export utils\n\tSortable.utils = {\n\t\ton: _on,\n\t\toff: _off,\n\t\tcss: _css,\n\t\tfind: _find,\n\t\tis: function (el, selector) {\n\t\t\treturn !!_closest(el, selector, el, false);\n\t\t},\n\t\textend: _extend,\n\t\tthrottle: _throttle,\n\t\tclosest: _closest,\n\t\ttoggleClass: _toggleClass,\n\t\tclone: _clone,\n\t\tindex: _index,\n\t\tnextTick: _nextTick,\n\t\tcancelNextTick: _cancelNextTick,\n\t\tdetectDirection: _detectDirection,\n\t\tgetChild: _getChild\n\t};\n\n\n\t/**\n\t * Create sortable instance\n\t * @param {HTMLElement}  el\n\t * @param {Object}      [options]\n\t */\n\tSortable.create = function (el, options) {\n\t\treturn new Sortable(el, options);\n\t};\n\n\n\t// Export\n\tSortable.version = '1.9.0';\n\treturn Sortable;\n});\n\n\n//# sourceURL=webpack:///./node_modules/sortablejs/Sortable.js?");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/timers-browserify/main.js?");

/***/ }),

/***/ "./node_modules/vee-validate/dist/locale/ru.js":
/*!*****************************************************!*\
  !*** ./node_modules/vee-validate/dist/locale/ru.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("!function(n,e){ true?module.exports=e():undefined}(this,function(){\"use strict\";var n,e={name:\"ru\",messages:{_default:function(n){return\"Значение поля \"+n+\" недопустимо.\"},after:function(n,e){var t=e[0];return\"В поле \"+n+\" должна быть дата после \"+(e[1]?\"или равная \":\"\")+t+\".\"},alpha:function(n){return\"Поле \"+n+\" может содержать только буквы.\"},alpha_dash:function(n){return\"Поле \"+n+\" может содержать только буквы, цифры и дефис.\"},alpha_num:function(n){return\"Поле \"+n+\" может содержать только буквы и цифры.\"},alpha_spaces:function(n){return\"Поле \"+n+\" может содержать только буквы и пробелы.\"},before:function(n,e){var t=e[0];return\"В поле \"+n+\" должна быть дата до \"+(e[1]?\"или равная \":\"\")+t+\".\"},between:function(n,e){return\"Поле \"+n+\" должно быть между \"+e[0]+\" и \"+e[1]+\".\"},confirmed:function(n,e){return\"Поле \"+n+\" не совпадает с полем \"+e[0]+\".\"},credit_card:function(n){return\"Поле \"+n+\" должно быть действительным номером карты\"},date_between:function(n,e){return\"Поле \"+n+\" должно быть между \"+e[0]+\" и \"+e[1]+\".\"},date_format:function(n,e){return\"Поле \"+n+\" должно быть в формате \"+e[0]+\".\"},decimal:function(n,e){void 0===e&&(e=[]);var t=e[0];return void 0===t&&(t=\"*\"),\"Поле \"+n+\" должно быть числовым и может содержать\"+(\"*\"===t?\" десятичные числа\":\" \"+t+\" десятичных чисел\")+\".\"},digits:function(n,e){return\"Поле \"+n+\" должно быть числовым и точно содержать \"+e[0]+\" цифры.\"},dimensions:function(n,e){return\"Поле \"+n+\" должно быть \"+e[0]+\" пикселей на \"+e[1]+\" пикселей.\"},email:function(n){return\"Поле \"+n+\" должно быть действительным электронным адресом.\"},excluded:function(n){return\"Поле \"+n+\" должно быть допустимым значением.\"},ext:function(n,e){return\"Поле \"+n+\" должно быть действительным файлом. (\"+e.slice(0)+\")\"},image:function(n){return\"Поле \"+n+\" должно быть изображением.\"},included:function(n){return\"Поле \"+n+\" должно быть допустимым значением.\"},integer:function(n){return\"Поле \"+n+\" должно быть целым числом.\"},ip:function(n){return\"Поле \"+n+\" должно быть действительным IP-адресом.\"},length:function(n,e){var t=e[0],r=e[1];return r?\"Длина поля \"+n+\" должна быть между \"+t+\" и \"+r+\".\":\"Длина поля \"+n+\" должна быть \"+t+\".\"},max:function(n,e){return\"Поле \"+n+\" не может быть более \"+e[0]+\" символов.\"},max_value:function(n,e){return\"Поле \"+n+\" должно быть \"+e[0]+\" или менее.\"},mimes:function(n,e){return\"Поле \"+n+\" должно иметь допустимый тип файла. (\"+e.slice(0)+\")\"},min:function(n,e){return\"Поле \"+n+\" должно быть не менее \"+e[0]+\" символов.\"},min_value:function(n,e){return\"Поле \"+n+\" должно быть \"+e[0]+\" или больше.\"},numeric:function(n){return\"Поле \"+n+\" должно быть числом.\"},regex:function(n){return\"Поле \"+n+\" имеет ошибочный формат.\"},required:function(n){return\"Поле \"+n+\" обязательно для заполнения.\"},size:function(n,e){return\"Поле \"+n+\" должно быть меньше, чем \"+function(n){var e=1024,t=0===(n=Number(n)*e)?0:Math.floor(Math.log(n)/Math.log(e));return 1*(n/Math.pow(e,t)).toFixed(2)+\" \"+[\"Byte\",\"KB\",\"MB\",\"GB\",\"TB\",\"PB\",\"EB\",\"ZB\",\"YB\"][t]}(e[0])+\".\"},url:function(n){return\"Поле \"+n+\" имеет ошибочный формат URL.\"}},attributes:{}};return\"undefined\"!=typeof VeeValidate&&VeeValidate.Validator.localize(((n={})[e.name]=e,n)),e});\n\n//# sourceURL=webpack:///./node_modules/vee-validate/dist/locale/ru.js?");

/***/ }),

/***/ "./node_modules/vee-validate/dist/vee-validate.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/vee-validate/dist/vee-validate.esm.js ***!
  \************************************************************/
/*! exports provided: default, ErrorBag, Rules, ValidationObserver, ValidationProvider, Validator, directive, install, mapFields, mixin, version, withValidation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ErrorBag\", function() { return ErrorBag; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rules\", function() { return Rules; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ValidationObserver\", function() { return ValidationObserver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ValidationProvider\", function() { return ValidationProvider; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Validator\", function() { return Validator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"directive\", function() { return directive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"install\", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapFields\", function() { return mapFields; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mixin\", function() { return mixin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"version\", function() { return version; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withValidation\", function() { return withValidation; });\n/**\n  * vee-validate v2.2.12\n  * (c) 2019 Abdelrahman Awad\n  * @license MIT\n  */\n// \n\nvar isTextInput = function (el) {\n  return includes(['text', 'password', 'search', 'email', 'tel', 'url', 'textarea', 'number'], el.type);\n};\n\nvar isCheckboxOrRadioInput = function (el) {\n  return includes(['radio', 'checkbox'], el.type);\n};\n\nvar isDateInput = function (el) {\n  return includes(['date', 'week', 'month', 'datetime-local', 'time'], el.type);\n};\n\n/**\n * Gets the data attribute. the name must be kebab-case.\n */\nvar getDataAttribute = function (el, name) { return el.getAttribute((\"data-vv-\" + name)); };\n\nvar isNaN$1 = function (value) {\n  if ('isNaN' in Number) {\n    return Number.isNaN(value);\n  }\n\n  // eslint-disable-next-line\n  return typeof(value) === 'number' && value !== value;\n};\n\n/**\n * Checks if the values are either null or undefined.\n */\nvar isNullOrUndefined = function () {\n  var values = [], len = arguments.length;\n  while ( len-- ) values[ len ] = arguments[ len ];\n\n  return values.every(function (value) {\n    return value === null || value === undefined;\n  });\n};\n\n/**\n * Creates the default flags object.\n */\nvar createFlags = function () { return ({\n  untouched: true,\n  touched: false,\n  dirty: false,\n  pristine: true,\n  valid: null,\n  invalid: null,\n  validated: false,\n  pending: false,\n  required: false,\n  changed: false\n}); };\n\n/**\n * Shallow object comparison.\n */\nvar isEqual = function (lhs, rhs) {\n  if (lhs instanceof RegExp && rhs instanceof RegExp) {\n    return isEqual(lhs.source, rhs.source) && isEqual(lhs.flags, rhs.flags);\n  }\n\n  if (Array.isArray(lhs) && Array.isArray(rhs)) {\n    if (lhs.length !== rhs.length) { return false; }\n\n    for (var i = 0; i < lhs.length; i++) {\n      if (!isEqual(lhs[i], rhs[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // if both are objects, compare each key recursively.\n  if (isObject(lhs) && isObject(rhs)) {\n    return Object.keys(lhs).every(function (key) {\n      return isEqual(lhs[key], rhs[key]);\n    }) && Object.keys(rhs).every(function (key) {\n      return isEqual(lhs[key], rhs[key]);\n    });\n  }\n\n  if (isNaN$1(lhs) && isNaN$1(rhs)) {\n    return true;\n  }\n\n  return lhs === rhs;\n};\n\n/**\n * Determines the input field scope.\n */\nvar getScope = function (el) {\n  var scope = getDataAttribute(el, 'scope');\n  if (isNullOrUndefined(scope)) {\n    var form = getForm(el);\n\n    if (form) {\n      scope = getDataAttribute(form, 'scope');\n    }\n  }\n\n  return !isNullOrUndefined(scope) ? scope : null;\n};\n\n/**\n * Get the closest form element.\n */\nvar getForm = function (el) {\n  if (isNullOrUndefined(el)) { return null; }\n\n  if (el.tagName === 'FORM') { return el; }\n\n  if (!isNullOrUndefined(el.form)) { return el.form; }\n\n  return !isNullOrUndefined(el.parentNode) ? getForm(el.parentNode) : null;\n};\n\n/**\n * Gets the value in an object safely.\n */\nvar getPath = function (path, target, def) {\n  if ( def === void 0 ) def = undefined;\n\n  if (!path || !target) { return def; }\n\n  var value = target;\n  path.split('.').every(function (prop) {\n    if (prop in value) {\n      value = value[prop];\n\n      return true;\n    }\n\n    value = def;\n\n    return false;\n  });\n\n  return value;\n};\n\n/**\n * Checks if path exists within an object.\n */\nvar hasPath = function (path, target) {\n  var obj = target;\n  var previousPath = null;\n  var isNullOrNonObject = false;\n  var isValidPath = path.split('.').reduce(function (reducer, prop) {\n    if (obj == null || typeof obj !== 'object') {\n      isNullOrNonObject = true;\n      return reducer && false;\n    }\n\n    if (prop in obj) {\n      obj = obj[prop];\n      previousPath = previousPath === null ? prop : previousPath + '.' + prop;\n\n      return reducer && true;\n    }\n\n    return reducer && false;\n  }, true);\n\n  if (true) {\n    if (isNullOrNonObject) {\n      throw new Error(previousPath + ' is not an object');\n    }\n  }\n\n  return isValidPath;\n};\n\n/**\n * Parses a rule string expression.\n */\nvar parseRule = function (rule) {\n  var params = [];\n  var name = rule.split(':')[0];\n\n  if (includes(rule, ':')) {\n    params = rule.split(':').slice(1).join(':').split(',');\n  }\n\n  return { name: name, params: params };\n};\n\n/**\n * Debounces a function.\n */\nvar debounce = function (fn, wait, token) {\n  if ( wait === void 0 ) wait = 0;\n  if ( token === void 0 ) token = { cancelled: false };\n\n  if (wait === 0) {\n    return fn;\n  }\n\n  var timeout;\n\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var later = function () {\n      timeout = null;\n\n      // check if the fn call was cancelled.\n      if (!token.cancelled) { fn.apply(void 0, args); }\n    };\n\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (!timeout) { fn.apply(void 0, args); }\n  };\n};\n\n/**\n * Appends a rule definition to a list of rules.\n */\nvar appendRule = function (rule, rules) {\n  if (!rules) {\n    return normalizeRules(rule);\n  }\n\n  if (!rule) {\n    return normalizeRules(rules);\n  }\n\n  if (typeof rules === 'string') {\n    rules = normalizeRules(rules);\n  }\n\n  return assign({}, rules, normalizeRules(rule));\n};\n\n/**\n * Normalizes the given rules expression.\n */\nvar normalizeRules = function (rules) {\n  // if falsy value return an empty object.\n  if (!rules) {\n    return {};\n  }\n\n  if (isObject(rules)) {\n    // $FlowFixMe\n    return Object.keys(rules).reduce(function (prev, curr) {\n      var params = [];\n      // $FlowFixMe\n      if (rules[curr] === true) {\n        params = [];\n      } else if (Array.isArray(rules[curr])) {\n        params = rules[curr];\n      } else if (isObject(rules[curr])) {\n        params = rules[curr];\n      } else {\n        params = [rules[curr]];\n      }\n\n      // $FlowFixMe\n      if (rules[curr] !== false) {\n        prev[curr] = params;\n      }\n\n      return prev;\n    }, {});\n  }\n\n  if (typeof rules !== 'string') {\n    warn('rules must be either a string or an object.');\n    return {};\n  }\n\n  return rules.split('|').reduce(function (prev, rule) {\n    var parsedRule = parseRule(rule);\n    if (!parsedRule.name) {\n      return prev;\n    }\n\n    prev[parsedRule.name] = parsedRule.params;\n    return prev;\n  }, {});\n};\n\n/**\n * Emits a warning to the console.\n */\nvar warn = function (message) {\n  console.warn((\"[vee-validate] \" + message)); // eslint-disable-line\n};\n\n/**\n * Creates a branded error object.\n */\nvar createError = function (message) { return new Error((\"[vee-validate] \" + message)); };\n\n/**\n * Checks if the value is an object.\n */\nvar isObject = function (obj) { return obj !== null && obj && typeof obj === 'object' && ! Array.isArray(obj); };\n\n/**\n * Checks if a function is callable.\n */\nvar isCallable = function (func) { return typeof func === 'function'; };\n\n/**\n * Check if element has the css class on it.\n */\nvar hasClass = function (el, className) {\n  if (el.classList) {\n    return el.classList.contains(className);\n  }\n\n  return !!el.className.match(new RegExp((\"(\\\\s|^)\" + className + \"(\\\\s|$)\")));\n};\n\n/**\n * Adds the provided css className to the element.\n */\nvar addClass = function (el, className) {\n  if (el.classList) {\n    el.classList.add(className);\n    return;\n  }\n\n  if (!hasClass(el, className)) {\n    el.className += \" \" + className;\n  }\n};\n\n/**\n * Remove the provided css className from the element.\n */\nvar removeClass = function (el, className) {\n  if (el.classList) {\n    el.classList.remove(className);\n    return;\n  }\n\n  if (hasClass(el, className)) {\n    var reg = new RegExp((\"(\\\\s|^)\" + className + \"(\\\\s|$)\"));\n    el.className = el.className.replace(reg, ' ');\n  }\n};\n\n/**\n * Adds or removes a class name on the input depending on the status flag.\n */\nvar toggleClass = function (el, className, status) {\n  if (!el || !className) { return; }\n\n  if (Array.isArray(className)) {\n    className.forEach(function (item) { return toggleClass(el, item, status); });\n    return;\n  }\n\n  if (status) {\n    return addClass(el, className);\n  }\n\n  removeClass(el, className);\n};\n\n/**\n * Converts an array-like object to array, provides a simple polyfill for Array.from\n */\nvar toArray = function (arrayLike) {\n  if (isCallable(Array.from)) {\n    return Array.from(arrayLike);\n  }\n\n  var array = [];\n  var length = arrayLike.length;\n  /* istanbul ignore next */\n  for (var i = 0; i < length; i++) {\n    array.push(arrayLike[i]);\n  }\n\n  /* istanbul ignore next */\n  return array;\n};\n\n/**\n * Converts an array-like object to array and place other elements in an array\n */\nvar ensureArray = function (arrayLike) {\n  if (Array.isArray(arrayLike)) {\n    return [].concat( arrayLike );\n  }\n  var array = toArray(arrayLike);\n  return isEmptyArray(array) ? [arrayLike] : array;\n};\n\n/**\n * Assign polyfill from the mdn.\n */\nvar assign = function (target) {\n  var others = [], len = arguments.length - 1;\n  while ( len-- > 0 ) others[ len ] = arguments[ len + 1 ];\n\n  /* istanbul ignore else */\n  if (isCallable(Object.assign)) {\n    return Object.assign.apply(Object, [ target ].concat( others ));\n  }\n\n  /* istanbul ignore next */\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  /* istanbul ignore next */\n  var to = Object(target);\n  /* istanbul ignore next */\n  others.forEach(function (arg) {\n    // Skip over if undefined or null\n    if (arg != null) {\n      Object.keys(arg).forEach(function (key) {\n        to[key] = arg[key];\n      });\n    }\n  });\n  /* istanbul ignore next */\n  return to;\n};\n\nvar id = 0;\nvar idTemplate = '{id}';\n\n/**\n * Generates a unique id.\n */\nvar uniqId = function () {\n  // handle too many uses of uniqId, although unlikely.\n  if (id >= 9999) {\n    id = 0;\n    // shift the template.\n    idTemplate = idTemplate.replace('{id}', '_{id}');\n  }\n\n  id++;\n  var newId = idTemplate.replace('{id}', String(id));\n\n  return newId;\n};\n\nvar findIndex = function (arrayLike, predicate) {\n  var array = Array.isArray(arrayLike) ? arrayLike : toArray(arrayLike);\n  for (var i = 0; i < array.length; i++) {\n    if (predicate(array[i])) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * finds the first element that satisfies the predicate callback, polyfills array.find\n */\nvar find = function (arrayLike, predicate) {\n  var array = Array.isArray(arrayLike) ? arrayLike : toArray(arrayLike);\n  var idx = findIndex(array, predicate);\n\n  return idx === -1 ? undefined : array[idx];\n};\n\nvar isBuiltInComponent = function (vnode) {\n  if (!vnode) {\n    return false;\n  }\n\n  var tag = vnode.componentOptions.tag;\n\n  return /^(keep-alive|transition|transition-group)$/.test(tag);\n};\n\nvar makeDelayObject = function (events, delay, delayConfig) {\n  if (typeof delay === 'number') {\n    return events.reduce(function (prev, e) {\n      prev[e] = delay;\n      return prev;\n    }, {});\n  }\n\n  return events.reduce(function (prev, e) {\n    if (typeof delay === 'object' && e in delay) {\n      prev[e] = delay[e];\n      return prev;\n    }\n\n    if (typeof delayConfig === 'number') {\n      prev[e] = delayConfig;\n      return prev;\n    }\n\n    prev[e] = (delayConfig && delayConfig[e]) || 0;\n\n    return prev;\n  }, {});\n};\n\nvar deepParseInt = function (input) {\n  if (typeof input === 'number') { return input; }\n\n  if (typeof input === 'string') { return parseInt(input); }\n\n  var map = {};\n  for (var element in input) {\n    map[element] = parseInt(input[element]);\n  }\n\n  return map;\n};\n\nvar merge = function (target, source) {\n  if (! (isObject(target) && isObject(source))) {\n    return target;\n  }\n\n  Object.keys(source).forEach(function (key) {\n    var obj, obj$1;\n\n    if (isObject(source[key])) {\n      if (! target[key]) {\n        assign(target, ( obj = {}, obj[key] = {}, obj ));\n      }\n\n      merge(target[key], source[key]);\n      return;\n    }\n\n    assign(target, ( obj$1 = {}, obj$1[key] = source[key], obj$1 ));\n  });\n\n  return target;\n};\n\nvar fillRulesFromElement = function (el, rules) {\n  if (el.required) {\n    rules = appendRule('required', rules);\n  }\n\n  if (isTextInput(el)) {\n    if (el.type === 'email') {\n      rules = appendRule((\"email\" + (el.multiple ? ':multiple' : '')), rules);\n    }\n\n    if (el.pattern) {\n      rules = appendRule({ regex: el.pattern }, rules);\n    }\n\n    // 524288 is the max on some browsers and test environments.\n    if (el.maxLength >= 0 && el.maxLength < 524288) {\n      rules = appendRule((\"max:\" + (el.maxLength)), rules);\n    }\n\n    if (el.minLength > 0) {\n      rules = appendRule((\"min:\" + (el.minLength)), rules);\n    }\n\n    if (el.type === 'number') {\n      rules = appendRule('decimal', rules);\n      if (el.min !== '') {\n        rules = appendRule((\"min_value:\" + (el.min)), rules);\n      }\n\n      if (el.max !== '') {\n        rules = appendRule((\"max_value:\" + (el.max)), rules);\n      }\n    }\n\n    return rules;\n  }\n\n  if (isDateInput(el)) {\n    var timeFormat = el.step && Number(el.step) < 60 ? 'HH:mm:ss' : 'HH:mm';\n\n    if (el.type === 'date') {\n      return appendRule('date_format:yyyy-MM-dd', rules);\n    }\n\n    if (el.type === 'datetime-local') {\n      return appendRule((\"date_format:yyyy-MM-ddT\" + timeFormat), rules);\n    }\n\n    if (el.type === 'month') {\n      return appendRule('date_format:yyyy-MM', rules);\n    }\n\n    if (el.type === 'week') {\n      return appendRule('date_format:yyyy-[W]WW', rules);\n    }\n\n    if (el.type === 'time') {\n      return appendRule((\"date_format:\" + timeFormat), rules);\n    }\n  }\n\n  return rules;\n};\n\nvar values = function (obj) {\n  if (isCallable(Object.values)) {\n    return Object.values(obj);\n  }\n\n  // fallback to keys()\n  /* istanbul ignore next */\n  return Object.keys(obj).map(function (k) { return obj[k]; });\n};\n\nvar parseSelector = function (selector) {\n  var rule = null;\n  if (includes(selector, ':')) {\n    rule = selector.split(':').pop();\n    selector = selector.replace((\":\" + rule), '');\n  }\n\n  if (selector[0] === '#') {\n    return {\n      id: selector.slice(1),\n      rule: rule,\n      name: null,\n      scope: null\n    };\n  }\n\n  var scope = null;\n  var name = selector;\n  if (includes(selector, '.')) {\n    var parts = selector.split('.');\n    scope = parts[0];\n    name = parts.slice(1).join('.');\n  }\n\n  return {\n    id: null,\n    scope: scope,\n    name: name,\n    rule: rule\n  };\n};\n\nvar includes = function (collection, item) {\n  return collection.indexOf(item) !== -1;\n};\n\nvar isEmptyArray = function (arr) {\n  return Array.isArray(arr) && arr.length === 0;\n};\n\nvar defineNonReactive = function (obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    configurable: false,\n    writable: true,\n    value: value\n  });\n};\n\n// \n\nvar LOCALE = 'en';\n\nvar Dictionary = function Dictionary (dictionary) {\n  if ( dictionary === void 0 ) dictionary = {};\n\n  this.container = {};\n  this.merge(dictionary);\n};\n\nvar prototypeAccessors = { locale: { configurable: true } };\n\nprototypeAccessors.locale.get = function () {\n  return LOCALE;\n};\n\nprototypeAccessors.locale.set = function (value) {\n  LOCALE = value || 'en';\n};\n\nDictionary.prototype.hasLocale = function hasLocale (locale) {\n  return !!this.container[locale];\n};\n\nDictionary.prototype.setDateFormat = function setDateFormat (locale, format) {\n  if (!this.container[locale]) {\n    this.container[locale] = {};\n  }\n\n  this.container[locale].dateFormat = format;\n};\n\nDictionary.prototype.getDateFormat = function getDateFormat (locale) {\n  if (!this.container[locale] || !this.container[locale].dateFormat) {\n    return null;\n  }\n\n  return this.container[locale].dateFormat;\n};\n\nDictionary.prototype.getMessage = function getMessage (locale, key, data) {\n  var message = null;\n  if (!this.hasMessage(locale, key)) {\n    message = this._getDefaultMessage(locale);\n  } else {\n    message = this.container[locale].messages[key];\n  }\n\n  return isCallable(message) ? message.apply(void 0, data) : message;\n};\n\n/**\n * Gets a specific message for field. falls back to the rule message.\n */\nDictionary.prototype.getFieldMessage = function getFieldMessage (locale, field, key, data) {\n  if (!this.hasLocale(locale)) {\n    return this.getMessage(locale, key, data);\n  }\n\n  var dict = this.container[locale].custom && this.container[locale].custom[field];\n  if (!dict || !dict[key]) {\n    return this.getMessage(locale, key, data);\n  }\n\n  var message = dict[key];\n  return isCallable(message) ? message.apply(void 0, data) : message;\n};\n\nDictionary.prototype._getDefaultMessage = function _getDefaultMessage (locale) {\n  if (this.hasMessage(locale, '_default')) {\n    return this.container[locale].messages._default;\n  }\n\n  return this.container.en.messages._default;\n};\n\nDictionary.prototype.getAttribute = function getAttribute (locale, key, fallback) {\n    if ( fallback === void 0 ) fallback = '';\n\n  if (!this.hasAttribute(locale, key)) {\n    return fallback;\n  }\n\n  return this.container[locale].attributes[key];\n};\n\nDictionary.prototype.hasMessage = function hasMessage (locale, key) {\n  return !! (\n    this.hasLocale(locale) &&\n          this.container[locale].messages &&\n          this.container[locale].messages[key]\n  );\n};\n\nDictionary.prototype.hasAttribute = function hasAttribute (locale, key) {\n  return !! (\n    this.hasLocale(locale) &&\n          this.container[locale].attributes &&\n          this.container[locale].attributes[key]\n  );\n};\n\nDictionary.prototype.merge = function merge$1 (dictionary) {\n  merge(this.container, dictionary);\n};\n\nDictionary.prototype.setMessage = function setMessage (locale, key, message) {\n  if (! this.hasLocale(locale)) {\n    this.container[locale] = {\n      messages: {},\n      attributes: {}\n    };\n  }\n    \n  if (!this.container[locale].messages) {\n    this.container[locale].messages = {};\n  }\n\n  this.container[locale].messages[key] = message;\n};\n\nDictionary.prototype.setAttribute = function setAttribute (locale, key, attribute) {\n  if (! this.hasLocale(locale)) {\n    this.container[locale] = {\n      messages: {},\n      attributes: {}\n    };\n  }\n\n  this.container[locale].attributes[key] = attribute;\n};\n\nObject.defineProperties( Dictionary.prototype, prototypeAccessors );\n\nvar drivers = {\n  default: new Dictionary({\n    en: {\n      messages: {},\n      attributes: {},\n      custom: {}\n    }\n  })\n};\n\nvar currentDriver = 'default';\n\nvar DictionaryResolver = function DictionaryResolver () {};\n\nDictionaryResolver._checkDriverName = function _checkDriverName (driver) {\n  if (!driver) {\n    throw createError('you must provide a name to the dictionary driver');\n  }\n};\n\nDictionaryResolver.setDriver = function setDriver (driver, implementation) {\n    if ( implementation === void 0 ) implementation = null;\n\n  this._checkDriverName(driver);\n  if (implementation) {\n    drivers[driver] = implementation;\n  }\n\n  currentDriver = driver;\n};\n\nDictionaryResolver.getDriver = function getDriver () {\n  return drivers[currentDriver];\n};\n\n// \n\nvar ErrorBag = function ErrorBag (errorBag, id) {\n  if ( errorBag === void 0 ) errorBag = null;\n  if ( id === void 0 ) id = null;\n\n  this.vmId = id || null;\n  // make this bag a mirror of the provided one, sharing the same items reference.\n  if (errorBag && errorBag instanceof ErrorBag) {\n    this.items = errorBag.items;\n  } else {\n    this.items = [];\n  }\n};\n\nErrorBag.prototype[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = function () {\n    var this$1 = this;\n\n  var index = 0;\n  return {\n    next: function () {\n      return { value: this$1.items[index++], done: index > this$1.items.length };\n    }\n  };\n};\n\n/**\n * Adds an error to the internal array.\n */\nErrorBag.prototype.add = function add (error) {\n    var ref;\n\n  (ref = this.items).push.apply(\n    ref, this._normalizeError(error)\n  );\n};\n\n/**\n * Normalizes passed errors to an error array.\n */\nErrorBag.prototype._normalizeError = function _normalizeError (error) {\n    var this$1 = this;\n\n  if (Array.isArray(error)) {\n    return error.map(function (e) {\n      e.scope = !isNullOrUndefined(e.scope) ? e.scope : null;\n      e.vmId = !isNullOrUndefined(e.vmId) ? e.vmId : (this$1.vmId || null);\n\n      return e;\n    });\n  }\n\n  error.scope = !isNullOrUndefined(error.scope) ? error.scope : null;\n  error.vmId = !isNullOrUndefined(error.vmId) ? error.vmId : (this.vmId || null);\n\n  return [error];\n};\n\n/**\n * Regenrates error messages if they have a generator function.\n */\nErrorBag.prototype.regenerate = function regenerate () {\n  this.items.forEach(function (i) {\n    i.msg = isCallable(i.regenerate) ? i.regenerate() : i.msg;\n  });\n};\n\n/**\n * Updates a field error with the new field scope.\n */\nErrorBag.prototype.update = function update (id, error) {\n  var item = find(this.items, function (i) { return i.id === id; });\n  if (!item) {\n    return;\n  }\n\n  var idx = this.items.indexOf(item);\n  this.items.splice(idx, 1);\n  item.scope = error.scope;\n  this.items.push(item);\n};\n\n/**\n * Gets all error messages from the internal array.\n */\nErrorBag.prototype.all = function all (scope) {\n    var this$1 = this;\n\n  var filterFn = function (item) {\n    var matchesScope = true;\n    var matchesVM = true;\n    if (!isNullOrUndefined(scope)) {\n      matchesScope = item.scope === scope;\n    }\n\n    if (!isNullOrUndefined(this$1.vmId)) {\n      matchesVM = item.vmId === this$1.vmId;\n    }\n\n    return matchesVM && matchesScope;\n  };\n\n  return this.items.filter(filterFn).map(function (e) { return e.msg; });\n};\n\n/**\n * Checks if there are any errors in the internal array.\n */\nErrorBag.prototype.any = function any (scope) {\n    var this$1 = this;\n\n  var filterFn = function (item) {\n    var matchesScope = true;\n    var matchesVM = true;\n    if (!isNullOrUndefined(scope)) {\n      matchesScope = item.scope === scope;\n    }\n\n    if (!isNullOrUndefined(this$1.vmId)) {\n      matchesVM = item.vmId === this$1.vmId;\n    }\n\n    return matchesVM && matchesScope;\n  };\n\n  return !!this.items.filter(filterFn).length;\n};\n\n/**\n * Removes all items from the internal array.\n */\nErrorBag.prototype.clear = function clear (scope) {\n    var this$1 = this;\n\n  var matchesVM = isNullOrUndefined(this.vmId) ? function () { return true; } : function (i) { return i.vmId === this$1.vmId; };\n  if (isNullOrUndefined(scope)) {\n    scope = null;\n  }\n\n  for (var i = 0; i < this.items.length; ++i) {\n    if (matchesVM(this.items[i]) && this.items[i].scope === scope) {\n      this.items.splice(i, 1);\n      --i;\n    }\n  }\n};\n\n/**\n * Collects errors into groups or for a specific field.\n */\nErrorBag.prototype.collect = function collect (field, scope, map) {\n    var this$1 = this;\n    if ( map === void 0 ) map = true;\n\n  var isSingleField = !isNullOrUndefined(field) && !field.includes('*');\n  var groupErrors = function (items) {\n    var errors = items.reduce(function (collection, error) {\n      if (!isNullOrUndefined(this$1.vmId) && error.vmId !== this$1.vmId) {\n        return collection;\n      }\n\n      if (!collection[error.field]) {\n        collection[error.field] = [];\n      }\n\n      collection[error.field].push(map ? error.msg : error);\n\n      return collection;\n    }, {});\n\n    // reduce the collection to be a single array.\n    if (isSingleField) {\n      return values(errors)[0] || [];\n    }\n\n    return errors;\n  };\n\n  if (isNullOrUndefined(field)) {\n    return groupErrors(this.items);\n  }\n\n  var selector = isNullOrUndefined(scope) ? String(field) : (scope + \".\" + field);\n  var ref = this._makeCandidateFilters(selector);\n    var isPrimary = ref.isPrimary;\n    var isAlt = ref.isAlt;\n\n  var collected = this.items.reduce(function (prev, curr) {\n    if (isPrimary(curr)) {\n      prev.primary.push(curr);\n    }\n\n    if (isAlt(curr)) {\n      prev.alt.push(curr);\n    }\n\n    return prev;\n  }, { primary: [], alt: [] });\n\n  collected = collected.primary.length ? collected.primary : collected.alt;\n\n  return groupErrors(collected);\n};\n\n/**\n * Gets the internal array length.\n */\nErrorBag.prototype.count = function count () {\n    var this$1 = this;\n\n  if (this.vmId) {\n    return this.items.filter(function (e) { return e.vmId === this$1.vmId; }).length;\n  }\n\n  return this.items.length;\n};\n\n/**\n * Finds and fetches the first error message for the specified field id.\n */\nErrorBag.prototype.firstById = function firstById (id) {\n  var error = find(this.items, function (i) { return i.id === id; });\n\n  return error ? error.msg : undefined;\n};\n\n/**\n * Gets the first error message for a specific field.\n */\nErrorBag.prototype.first = function first (field, scope) {\n    if ( scope === void 0 ) scope = null;\n\n  var selector = isNullOrUndefined(scope) ? field : (scope + \".\" + field);\n  var match = this._match(selector);\n\n  return match && match.msg;\n};\n\n/**\n * Returns the first error rule for the specified field\n */\nErrorBag.prototype.firstRule = function firstRule (field, scope) {\n  var errors = this.collect(field, scope, false);\n\n  return (errors.length && errors[0].rule) || undefined;\n};\n\n/**\n * Checks if the internal array has at least one error for the specified field.\n */\nErrorBag.prototype.has = function has (field, scope) {\n    if ( scope === void 0 ) scope = null;\n\n  return !!this.first(field, scope);\n};\n\n/**\n * Gets the first error message for a specific field and a rule.\n */\nErrorBag.prototype.firstByRule = function firstByRule (name, rule, scope) {\n    if ( scope === void 0 ) scope = null;\n\n  var error = this.collect(name, scope, false).filter(function (e) { return e.rule === rule; })[0];\n\n  return (error && error.msg) || undefined;\n};\n\n/**\n * Gets the first error message for a specific field that not match the rule.\n */\nErrorBag.prototype.firstNot = function firstNot (name, rule, scope) {\n    if ( rule === void 0 ) rule = 'required';\n    if ( scope === void 0 ) scope = null;\n\n  var error = this.collect(name, scope, false).filter(function (e) { return e.rule !== rule; })[0];\n\n  return (error && error.msg) || undefined;\n};\n\n/**\n * Removes errors by matching against the id or ids.\n */\nErrorBag.prototype.removeById = function removeById (id) {\n  var condition = function (item) { return item.id === id; };\n  if (Array.isArray(id)) {\n    condition = function (item) { return id.indexOf(item.id) !== -1; };\n  }\n\n  for (var i = 0; i < this.items.length; ++i) {\n    if (condition(this.items[i])) {\n      this.items.splice(i, 1);\n      --i;\n    }\n  }\n};\n\n/**\n * Removes all error messages associated with a specific field.\n */\nErrorBag.prototype.remove = function remove (field, scope, vmId) {\n  if (isNullOrUndefined(field)) {\n    return;\n  }\n\n  var selector = isNullOrUndefined(scope) ? String(field) : (scope + \".\" + field);\n  var ref = this._makeCandidateFilters(selector);\n    var isPrimary = ref.isPrimary;\n    var isAlt = ref.isAlt;\n  var matches = function (item) { return isPrimary(item) || isAlt(item); };\n  var shouldRemove = function (item) {\n    if (isNullOrUndefined(vmId)) { return matches(item); }\n\n    return matches(item) && item.vmId === vmId;\n  };\n\n  for (var i = 0; i < this.items.length; ++i) {\n    if (shouldRemove(this.items[i])) {\n      this.items.splice(i, 1);\n      --i;\n    }\n  }\n};\n\nErrorBag.prototype._makeCandidateFilters = function _makeCandidateFilters (selector) {\n    var this$1 = this;\n\n  var matchesRule = function () { return true; };\n  var matchesScope = function () { return true; };\n  var matchesName = function () { return true; };\n  var matchesVM = function () { return true; };\n\n  var ref = parseSelector(selector);\n    var id = ref.id;\n    var rule = ref.rule;\n    var scope = ref.scope;\n    var name = ref.name;\n\n  if (rule) {\n    matchesRule = function (item) { return item.rule === rule; };\n  }\n\n  // match by id, can be combined with rule selection.\n  if (id) {\n    return {\n      isPrimary: function (item) { return matchesRule(item) && (function (item) { return id === item.id; }); },\n      isAlt: function () { return false; }\n    };\n  }\n\n  if (isNullOrUndefined(scope)) {\n    // if no scope specified, make sure the found error has no scope.\n    matchesScope = function (item) { return isNullOrUndefined(item.scope); };\n  } else {\n    matchesScope = function (item) { return item.scope === scope; };\n  }\n\n  if (!isNullOrUndefined(name) && name !== '*') {\n    matchesName = function (item) { return item.field === name; };\n  }\n\n  if (!isNullOrUndefined(this.vmId)) {\n    matchesVM = function (item) { return item.vmId === this$1.vmId; };\n  }\n\n  // matches the first candidate.\n  var isPrimary = function (item) {\n    return matchesVM(item) && matchesName(item) && matchesRule(item) && matchesScope(item);\n  };\n\n  // matches a second candidate, which is a field with a name containing the '.' character.\n  var isAlt = function (item) {\n    return matchesVM(item) && matchesRule(item) && item.field === (scope + \".\" + name);\n  };\n\n  return {\n    isPrimary: isPrimary,\n    isAlt: isAlt\n  };\n};\n\nErrorBag.prototype._match = function _match (selector) {\n  if (isNullOrUndefined(selector)) {\n    return undefined;\n  }\n\n  var ref = this._makeCandidateFilters(selector);\n    var isPrimary = ref.isPrimary;\n    var isAlt = ref.isAlt;\n\n  return this.items.reduce(function (prev, item, idx, arr) {\n    var isLast = idx === arr.length - 1;\n    if (prev.primary) {\n      return isLast ? prev.primary : prev;\n    }\n\n    if (isPrimary(item)) {\n      prev.primary = item;\n    }\n\n    if (isAlt(item)) {\n      prev.alt = item;\n    }\n\n    // keep going.\n    if (!isLast) {\n      return prev;\n    }\n\n    return prev.primary || prev.alt;\n  }, {});\n};\n\nvar DEFAULT_CONFIG = {\n  locale: 'en',\n  delay: 0,\n  errorBagName: 'errors',\n  dictionary: null,\n  fieldsBagName: 'fields',\n  classes: false,\n  classNames: null,\n  events: 'input',\n  inject: true,\n  fastExit: true,\n  aria: true,\n  validity: false,\n  mode: 'aggressive',\n  useConstraintAttrs: true,\n  i18n: null,\n  i18nRootKey: 'validation'\n};\n\nvar currentConfig = assign({}, DEFAULT_CONFIG);\n\nvar resolveConfig = function (ctx) {\n  var selfConfig = getPath('$options.$_veeValidate', ctx, {});\n\n  return assign({}, currentConfig, selfConfig);\n};\n\nvar getConfig = function () { return currentConfig; };\n\nvar setConfig = function (newConf) {\n  currentConfig = assign({}, currentConfig, newConf);\n};\n\n// VNode Utils\n\n// Gets the model object on the vnode.\nfunction findModel (vnode) {\n  if (!vnode.data) {\n    return null;\n  }\n\n  // Component Model\n  if (vnode.data.model) {\n    return vnode.data.model;\n  }\n\n  return !!(vnode.data.directives) && find(vnode.data.directives, function (d) { return d.name === 'model'; });\n}\n\nfunction extractChildren (vnode) {\n  if (Array.isArray(vnode)) {\n    return vnode;\n  }\n\n  if (Array.isArray(vnode.children)) {\n    return vnode.children;\n  }\n\n  if (vnode.componentOptions && Array.isArray(vnode.componentOptions.children)) {\n    return vnode.componentOptions.children;\n  }\n\n  return [];\n}\n\nfunction extractVNodes (vnode) {\n  if (findModel(vnode)) {\n    return [vnode];\n  }\n\n  var children = extractChildren(vnode);\n\n  return children.reduce(function (nodes, node) {\n    var candidates = extractVNodes(node);\n    if (candidates.length) {\n      nodes.push.apply(nodes, candidates);\n    }\n\n    return nodes;\n  }, []);\n}\n\n// Resolves v-model config if exists.\nfunction findModelConfig (vnode) {\n  if (!vnode.componentOptions) { return null; }\n\n  return vnode.componentOptions.Ctor.options.model;\n}\n// Adds a listener to vnode listener object.\nfunction mergeVNodeListeners (obj, eventName, handler) {\n  // Has a single listener.\n  if (isCallable(obj[eventName])) {\n    var prevHandler = obj[eventName];\n    obj[eventName] = [prevHandler];\n  }\n\n  // has other listeners.\n  if (Array.isArray(obj[eventName])) {\n    obj[eventName].push(handler);\n    return;\n  }\n\n  // no listener at all.\n  if (isNullOrUndefined(obj[eventName])) {\n    obj[eventName] = [handler];\n  }\n}\n\n// Adds a listener to a native HTML vnode.\nfunction addNativeNodeListener (node, eventName, handler) {\n  if (isNullOrUndefined(node.data.on)) {\n    node.data.on = {};\n  }\n\n  mergeVNodeListeners(node.data.on, eventName, handler);\n}\n\n// Adds a listener to a Vue component vnode.\nfunction addComponentNodeListener (node, eventName, handler) {\n  /* istanbul ignore next */\n  if (!node.componentOptions.listeners) {\n    node.componentOptions.listeners = {};\n  }\n\n  mergeVNodeListeners(node.componentOptions.listeners, eventName, handler);\n}\nfunction addVNodeListener (vnode, eventName, handler) {\n  if (vnode.componentOptions) {\n    addComponentNodeListener(vnode, eventName, handler);\n    return;\n  }\n\n  addNativeNodeListener(vnode, eventName, handler);\n}\n// Determines if `change` should be used over `input` for listeners.\nfunction getInputEventName (vnode, model) {\n  // Is a component.\n  if (vnode.componentOptions) {\n    var ref = findModelConfig(vnode) || { event: 'input' };\n    var event = ref.event;\n\n    return event;\n  }\n\n  // Lazy Models and select tag typically use change event\n  if ((model && model.modifiers && model.modifiers.lazy) || vnode.tag === 'select') {\n    return 'change';\n  }\n\n  // is a textual-type input.\n  if (vnode.data.attrs && isTextInput({ type: vnode.data.attrs.type || 'text' })) {\n    return 'input';\n  }\n\n  return 'change';\n}\n\nfunction normalizeSlots (slots, ctx) {\n  return Object.keys(slots).reduce(function (arr, key) {\n    slots[key].forEach(function (vnode) {\n      if (!vnode.context) {\n        slots[key].context = ctx;\n        if (!vnode.data) {\n          vnode.data = {};\n        }\n        vnode.data.slot = key;\n      }\n    });\n\n    return arr.concat(slots[key]);\n  }, []);\n}\nfunction createRenderless (h, children) {\n  // Only render the first item of the node.\n  if (Array.isArray(children) && children[0]) {\n    return children[0];\n  }\n\n  // a single node.\n  if (children) {\n    return children;\n  }\n\n  // No slots, render nothing.\n  return h();\n}\n\n/**\n * Generates the options required to construct a field.\n */\nvar Resolver = function Resolver () {};\n\nResolver.generate = function generate (el, binding, vnode) {\n  var model = Resolver.resolveModel(binding, vnode);\n  var options = resolveConfig(vnode.context);\n\n  return {\n    name: Resolver.resolveName(el, vnode),\n    el: el,\n    listen: !binding.modifiers.disable,\n    bails: binding.modifiers.bails ? true : (binding.modifiers.continues === true ? false : undefined),\n    scope: Resolver.resolveScope(el, binding, vnode),\n    vm: vnode.context,\n    expression: binding.value,\n    component: vnode.componentInstance,\n    classes: options.classes,\n    classNames: options.classNames,\n    getter: Resolver.resolveGetter(el, vnode, model),\n    events: Resolver.resolveEvents(el, vnode) || options.events,\n    model: model,\n    delay: Resolver.resolveDelay(el, vnode, options),\n    rules: Resolver.resolveRules(el, binding, vnode),\n    immediate: !!binding.modifiers.initial || !!binding.modifiers.immediate,\n    persist: !!binding.modifiers.persist,\n    validity: options.validity && !vnode.componentInstance,\n    aria: options.aria && !vnode.componentInstance,\n    initialValue: Resolver.resolveInitialValue(vnode)\n  };\n};\n\nResolver.getCtorConfig = function getCtorConfig (vnode) {\n  if (!vnode.componentInstance) { return null; }\n\n  var config = getPath('componentInstance.$options.$_veeValidate', vnode);\n\n  return config;\n};\n\n/**\n * Resolves the rules defined on an element.\n */\nResolver.resolveRules = function resolveRules (el, binding, vnode) {\n  var rules = '';\n  if (!binding.value && (!binding || !binding.expression)) {\n    rules = getDataAttribute(el, 'rules');\n  }\n\n  if (binding.value && includes(['string', 'object'], typeof binding.value.rules)) {\n    rules = binding.value.rules;\n  } else if (binding.value) {\n    rules = binding.value;\n  }\n\n  if (vnode.componentInstance) {\n    return rules;\n  }\n\n  // If validity is disabled, ignore field rules.\n  var normalized = normalizeRules(rules);\n  if (!getConfig().useConstraintAttrs) {\n    return normalized;\n  }\n\n  return assign({}, fillRulesFromElement(el, {}), normalized);\n};\n\n/**\n * @param {*} vnode\n */\nResolver.resolveInitialValue = function resolveInitialValue (vnode) {\n  var model = vnode.data.model || find(vnode.data.directives, function (d) { return d.name === 'model'; });\n\n  return model && model.value;\n};\n\n/**\n * Resolves the delay value.\n * @param {*} el\n * @param {*} vnode\n * @param {Object} options\n */\nResolver.resolveDelay = function resolveDelay (el, vnode, options) {\n  var delay = getDataAttribute(el, 'delay');\n  var globalDelay = (options && 'delay' in options) ? options.delay : 0;\n\n  if (!delay && vnode.componentInstance && vnode.componentInstance.$attrs) {\n    delay = vnode.componentInstance.$attrs['data-vv-delay'];\n  }\n\n  if (!isObject(globalDelay)) {\n    return deepParseInt(delay || globalDelay);\n  }\n\n  if (!isNullOrUndefined(delay)) {\n    globalDelay.input = delay;\n  }\n\n  return deepParseInt(globalDelay);\n};\n\n/**\n * Resolves the events to validate in response to.\n * @param {*} el\n * @param {*} vnode\n */\nResolver.resolveEvents = function resolveEvents (el, vnode) {\n  // resolve it from the root element.\n  var events = getDataAttribute(el, 'validate-on');\n\n  // resolve from data-vv-validate-on if its a vue component.\n  if (!events && vnode.componentInstance && vnode.componentInstance.$attrs) {\n    events = vnode.componentInstance.$attrs['data-vv-validate-on'];\n  }\n\n  // resolve it from $_veeValidate options.\n  if (!events && vnode.componentInstance) {\n    var config = Resolver.getCtorConfig(vnode);\n    events = config && config.events;\n  }\n\n  if (!events && getConfig().events) {\n    events = getConfig().events;\n  }\n\n  // resolve the model event if its configured for custom components.\n  if (events && vnode.componentInstance && includes(events, 'input')) {\n    var ref = vnode.componentInstance.$options.model || { event: 'input' };\n      var event = ref.event;\n    // if the prop was configured but not the model.\n    if (!event) {\n      return events;\n    }\n\n    events = events.replace('input', event);\n  }\n\n  return events;\n};\n\n/**\n * Resolves the scope for the field.\n * @param {*} el\n * @param {*} binding\n */\nResolver.resolveScope = function resolveScope (el, binding, vnode) {\n    if ( vnode === void 0 ) vnode = {};\n\n  var scope = null;\n  if (vnode.componentInstance && isNullOrUndefined(scope)) {\n    scope = vnode.componentInstance.$attrs && vnode.componentInstance.$attrs['data-vv-scope'];\n  }\n\n  return !isNullOrUndefined(scope) ? scope : getScope(el);\n};\n\n/**\n * Checks if the node directives contains a v-model or a specified arg.\n * Args take priority over models.\n *\n * @return {Object}\n */\nResolver.resolveModel = function resolveModel (binding, vnode) {\n  if (binding.arg) {\n    return { expression: binding.arg };\n  }\n\n  var model = findModel(vnode);\n  if (!model) {\n    return null;\n  }\n\n  // https://github.com/vuejs/vue/blob/dev/src/core/util/lang.js#L26\n  var watchable = !/[^\\w.$]/.test(model.expression) && hasPath(model.expression, vnode.context);\n  var lazy = !!(model.modifiers && model.modifiers.lazy);\n\n  if (!watchable) {\n    return { expression: null, lazy: lazy };\n  }\n\n  return { expression: model.expression, lazy: lazy };\n};\n\n/**\n * Resolves the field name to trigger validations.\n * @return {String} The field name.\n */\nResolver.resolveName = function resolveName (el, vnode) {\n  var name = getDataAttribute(el, 'name');\n\n  if (!name && !vnode.componentInstance) {\n    return el.name;\n  }\n\n  if (!name && vnode.componentInstance && vnode.componentInstance.$attrs) {\n    name = vnode.componentInstance.$attrs['data-vv-name'] || vnode.componentInstance.$attrs['name'];\n  }\n\n  if (!name && vnode.componentInstance) {\n    var config = Resolver.getCtorConfig(vnode);\n    if (config && isCallable(config.name)) {\n      var boundGetter = config.name.bind(vnode.componentInstance);\n\n      return boundGetter();\n    }\n\n    return vnode.componentInstance.name;\n  }\n\n  return name;\n};\n\n/**\n * Returns a value getter input type.\n */\nResolver.resolveGetter = function resolveGetter (el, vnode, model) {\n  if (model && model.expression) {\n    return function () {\n      return getPath(model.expression, vnode.context);\n    };\n  }\n\n  if (vnode.componentInstance) {\n    var path = getDataAttribute(el, 'value-path') || (vnode.componentInstance.$attrs && vnode.componentInstance.$attrs['data-vv-value-path']);\n    if (path) {\n      return function () {\n        return getPath(path, vnode.componentInstance);\n      };\n    }\n\n    var config = Resolver.getCtorConfig(vnode);\n    if (config && isCallable(config.value)) {\n      var boundGetter = config.value.bind(vnode.componentInstance);\n\n      return function () {\n        return boundGetter();\n      };\n    }\n\n    var ref = vnode.componentInstance.$options.model || { prop: 'value' };\n      var prop = ref.prop;\n\n    return function () {\n      return vnode.componentInstance[prop];\n    };\n  }\n\n  switch (el.type) {\n  case 'checkbox': return function () {\n    var els = document.querySelectorAll((\"input[name=\\\"\" + (el.name) + \"\\\"]\"));\n\n    els = toArray(els).filter(function (el) { return el.checked; });\n    if (!els.length) { return undefined; }\n\n    return els.map(function (checkbox) { return checkbox.value; });\n  };\n  case 'radio': return function () {\n    var els = document.querySelectorAll((\"input[name=\\\"\" + (el.name) + \"\\\"]\"));\n    var elm = find(els, function (el) { return el.checked; });\n\n    return elm && elm.value;\n  };\n  case 'file': return function (context) {\n    return toArray(el.files);\n  };\n  case 'select-multiple': return function () {\n    return toArray(el.options).filter(function (opt) { return opt.selected; }).map(function (opt) { return opt.value; });\n  };\n  default: return function () {\n    return el && el.value;\n  };\n  }\n};\n\nvar RULES = {};\n\nvar RuleContainer = function RuleContainer () {};\n\nvar staticAccessors = { rules: { configurable: true } };\n\nRuleContainer.add = function add (name, ref) {\n    var validate = ref.validate;\n    var options = ref.options;\n    var paramNames = ref.paramNames;\n\n  RULES[name] = {\n    validate: validate,\n    options: options,\n    paramNames: paramNames\n  };\n};\n\nstaticAccessors.rules.get = function () {\n  return RULES;\n};\n\nRuleContainer.has = function has (name) {\n  return !!RULES[name];\n};\n\nRuleContainer.isImmediate = function isImmediate (name) {\n  return !!(RULES[name] && RULES[name].options.immediate);\n};\n\nRuleContainer.isRequireRule = function isRequireRule (name) {\n  return !!(RULES[name] && RULES[name].options.computesRequired);\n};\n\nRuleContainer.isTargetRule = function isTargetRule (name) {\n  return !!(RULES[name] && RULES[name].options.hasTarget);\n};\n\nRuleContainer.remove = function remove (ruleName) {\n  delete RULES[ruleName];\n};\n\nRuleContainer.getParamNames = function getParamNames (ruleName) {\n  return RULES[ruleName] && RULES[ruleName].paramNames;\n};\n\nRuleContainer.getOptions = function getOptions (ruleName) {\n  return RULES[ruleName] && RULES[ruleName].options;\n};\n\nRuleContainer.getValidatorMethod = function getValidatorMethod (ruleName) {\n  return RULES[ruleName] ? RULES[ruleName].validate : null;\n};\n\nObject.defineProperties( RuleContainer, staticAccessors );\n\n// \n\nvar isEvent = function (evt) {\n  return (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) || (evt && evt.srcElement);\n};\n\nvar normalizeEvents = function (evts) {\n  if (!evts) { return []; }\n\n  return (typeof evts === 'string' ? evts.split('|') : evts);\n};\n\nvar supportsPassive = true;\n\nvar detectPassiveSupport = function () {\n  try {\n    var opts = Object.defineProperty({}, 'passive', {\n      get: function get () {\n        supportsPassive = true;\n      }\n    });\n    window.addEventListener('testPassive', null, opts);\n    window.removeEventListener('testPassive', null, opts);\n  } catch (e) {\n    supportsPassive = false;\n  }\n  return supportsPassive;\n};\n\nvar addEventListener = function (el, eventName, cb) {\n  el.addEventListener(eventName, cb, supportsPassive ? { passive: true } : false);\n};\n\n// \n\nvar DEFAULT_OPTIONS = {\n  targetOf: null,\n  immediate: false,\n  persist: false,\n  scope: null,\n  listen: true,\n  name: null,\n  rules: {},\n  vm: null,\n  classes: false,\n  validity: true,\n  aria: true,\n  events: 'input|blur',\n  delay: 0,\n  classNames: {\n    touched: 'touched', // the control has been blurred\n    untouched: 'untouched', // the control hasn't been blurred\n    valid: 'valid', // model is valid\n    invalid: 'invalid', // model is invalid\n    pristine: 'pristine', // control has not been interacted with\n    dirty: 'dirty' // control has been interacted with\n  }\n};\n\nvar Field = function Field (options) {\n  if ( options === void 0 ) options = {};\n\n  this.id = uniqId();\n  this.el = options.el;\n  this.updated = false;\n  this.vmId = options.vmId;\n  defineNonReactive(this, 'dependencies', []);\n  defineNonReactive(this, 'watchers', []);\n  defineNonReactive(this, 'events', []);\n  this.delay = 0;\n  this.rules = {};\n  this.forceRequired = false;\n  this._cacheId(options);\n  this.classNames = assign({}, DEFAULT_OPTIONS.classNames);\n  options = assign({}, DEFAULT_OPTIONS, options);\n  this._delay = !isNullOrUndefined(options.delay) ? options.delay : 0; // cache initial delay\n  this.validity = options.validity;\n  this.aria = options.aria;\n  this.flags = options.flags || createFlags();\n  defineNonReactive(this, 'vm', options.vm);\n  defineNonReactive(this, 'componentInstance', options.component);\n  this.ctorConfig = this.componentInstance ? getPath('$options.$_veeValidate', this.componentInstance) : undefined;\n  this.update(options);\n  // set initial value.\n  this.initialValue = this.value;\n  this.updated = false;\n};\n\nvar prototypeAccessors$1 = { validator: { configurable: true },isRequired: { configurable: true },isDisabled: { configurable: true },alias: { configurable: true },value: { configurable: true },bails: { configurable: true },rejectsFalse: { configurable: true } };\n\nprototypeAccessors$1.validator.get = function () {\n  if (!this.vm || !this.vm.$validator) {\n    return { validate: function () { return Promise.resolve(true); } };\n  }\n\n  return this.vm.$validator;\n};\n\nprototypeAccessors$1.isRequired.get = function () {\n  return !!this.rules.required || this.forceRequired;\n};\n\nprototypeAccessors$1.isDisabled.get = function () {\n  return !!(this.el && this.el.disabled);\n};\n\n/**\n * Gets the display name (user-friendly name).\n */\nprototypeAccessors$1.alias.get = function () {\n  if (this._alias) {\n    return this._alias;\n  }\n\n  var alias = null;\n  if (this.ctorConfig && this.ctorConfig.alias) {\n    alias = isCallable(this.ctorConfig.alias) ? this.ctorConfig.alias.call(this.componentInstance) : this.ctorConfig.alias;\n  }\n\n  if (!alias && this.el) {\n    alias = getDataAttribute(this.el, 'as');\n  }\n\n  if (!alias && this.componentInstance) {\n    return this.componentInstance.$attrs && this.componentInstance.$attrs['data-vv-as'];\n  }\n\n  return alias;\n};\n\n/**\n * Gets the input value.\n */\n\nprototypeAccessors$1.value.get = function () {\n  if (!isCallable(this.getter)) {\n    return undefined;\n  }\n\n  return this.getter();\n};\n\nprototypeAccessors$1.bails.get = function () {\n  return this._bails;\n};\n\n/**\n * If the field rejects false as a valid value for the required rule.\n */\n\nprototypeAccessors$1.rejectsFalse.get = function () {\n  if (this.componentInstance && this.ctorConfig) {\n    return !!this.ctorConfig.rejectsFalse;\n  }\n\n  if (!this.el) {\n    return false;\n  }\n\n  return this.el.type === 'checkbox';\n};\n\n/**\n * Determines if the instance matches the options provided.\n */\nField.prototype.matches = function matches (options) {\n    var this$1 = this;\n\n  if (!options) {\n    return true;\n  }\n\n  if (options.id) {\n    return this.id === options.id;\n  }\n\n  var matchesComponentId = isNullOrUndefined(options.vmId) ? function () { return true; } : function (id) { return id === this$1.vmId; };\n  if (!matchesComponentId(options.vmId)) {\n    return false;\n  }\n\n  if (options.name === undefined && options.scope === undefined) {\n    return true;\n  }\n\n  if (options.scope === undefined) {\n    return this.name === options.name;\n  }\n\n  if (options.name === undefined) {\n    return this.scope === options.scope;\n  }\n\n  return options.name === this.name && options.scope === this.scope;\n};\n\n/**\n * Caches the field id.\n */\nField.prototype._cacheId = function _cacheId (options) {\n  if (this.el && !options.targetOf) {\n    this.el._veeValidateId = this.id;\n  }\n};\n\n/**\n * Keeps a reference of the most current validation run.\n */\nField.prototype.waitFor = function waitFor (pendingPromise) {\n  this._waitingFor = pendingPromise;\n};\n\nField.prototype.isWaitingFor = function isWaitingFor (promise) {\n  return this._waitingFor === promise;\n};\n\n/**\n * Updates the field with changed data.\n */\nField.prototype.update = function update (options) {\n    var this$1 = this;\n\n  this.targetOf = options.targetOf || null;\n  this.immediate = options.immediate || this.immediate || false;\n  this.persist = options.persist || this.persist || false;\n\n  // update errors scope if the field scope was changed.\n  if (!isNullOrUndefined(options.scope) && options.scope !== this.scope && isCallable(this.validator.update)) {\n    this.validator.update(this.id, { scope: options.scope });\n  }\n  this.scope = !isNullOrUndefined(options.scope) ? options.scope\n    : !isNullOrUndefined(this.scope) ? this.scope : null;\n  this.name = (!isNullOrUndefined(options.name) ? String(options.name) : options.name) || this.name || null;\n  this.rules = options.rules !== undefined ? normalizeRules(options.rules) : this.rules;\n  this._bails = options.bails !== undefined ? options.bails : this._bails;\n  this.model = options.model || this.model;\n  this.listen = options.listen !== undefined ? options.listen : this.listen;\n  this.classes = (options.classes || this.classes || false) && !this.componentInstance;\n  this.classNames = isObject(options.classNames) ? merge(this.classNames, options.classNames) : this.classNames;\n  this.getter = isCallable(options.getter) ? options.getter : this.getter;\n  this._alias = options.alias || this._alias;\n  this.events = (options.events) ? normalizeEvents(options.events) : this.events;\n  this.delay = makeDelayObject(this.events, options.delay || this.delay, this._delay);\n  this.updateDependencies();\n  this.addActionListeners();\n\n  if ( true && !this.name && !this.targetOf) {\n    warn('A field is missing a \"name\" or \"data-vv-name\" attribute');\n  }\n\n  // update required flag flags\n  if (options.rules !== undefined) {\n    this.flags.required = this.isRequired;\n  }\n\n  if (Object.keys(options.rules || {}).length === 0 && this.updated) {\n    var resetFlag = this.flags.validated;\n    this.validator.validate((\"#\" + (this.id))).then(function () {\n      this$1.flags.validated = resetFlag;\n    });\n  }\n\n  // validate if it was validated before and field was updated and there was a rules mutation.\n  if (this.flags.validated && options.rules !== undefined && this.updated) {\n    this.validator.validate((\"#\" + (this.id)));\n  }\n\n  this.updated = true;\n  this.addValueListeners();\n\n  // no need to continue.\n  if (!this.el) {\n    return;\n  }\n  this.updateClasses();\n  this.updateAriaAttrs();\n};\n\n/**\n * Resets field flags and errors.\n */\nField.prototype.reset = function reset () {\n    var this$1 = this;\n\n  if (this._cancellationToken) {\n    this._cancellationToken.cancelled = true;\n    delete this._cancellationToken;\n  }\n\n  var defaults = createFlags();\n  Object.keys(this.flags).filter(function (flag) { return flag !== 'required'; }).forEach(function (flag) {\n    this$1.flags[flag] = defaults[flag];\n  });\n\n  // update initial value\n  this.initialValue = this.value;\n  this.flags.changed = false;\n\n  this.addValueListeners();\n  this.addActionListeners();\n  this.updateClasses(true);\n  this.updateAriaAttrs();\n  this.updateCustomValidity();\n};\n\n/**\n * Sets the flags and their negated counterparts, and updates the classes and re-adds action listeners.\n */\nField.prototype.setFlags = function setFlags (flags) {\n    var this$1 = this;\n\n  var negated = {\n    pristine: 'dirty',\n    dirty: 'pristine',\n    valid: 'invalid',\n    invalid: 'valid',\n    touched: 'untouched',\n    untouched: 'touched'\n  };\n\n  Object.keys(flags).forEach(function (flag) {\n    this$1.flags[flag] = flags[flag];\n    // if it has a negation and was not specified, set it as well.\n    if (negated[flag] && flags[negated[flag]] === undefined) {\n      this$1.flags[negated[flag]] = !flags[flag];\n    }\n  });\n\n  if (\n    flags.untouched !== undefined ||\n    flags.touched !== undefined ||\n    flags.dirty !== undefined ||\n    flags.pristine !== undefined\n  ) {\n    this.addActionListeners();\n  }\n  this.updateClasses();\n  this.updateAriaAttrs();\n  this.updateCustomValidity();\n};\n\n/**\n * Determines if the field requires references to target fields.\n*/\nField.prototype.updateDependencies = function updateDependencies () {\n    var this$1 = this;\n\n  // reset dependencies.\n  this.dependencies.forEach(function (d) { return d.field.destroy(); });\n  this.dependencies = [];\n\n  // we get the selectors for each field.\n  var fields = Object.keys(this.rules).reduce(function (prev, r) {\n    if (RuleContainer.isTargetRule(r)) {\n      prev.push({ selector: this$1.rules[r][0], name: r });\n    }\n\n    return prev;\n  }, []);\n\n  if (!fields.length || !this.vm || !this.vm.$el) { return; }\n\n  // must be contained within the same component, so we use the vm root element constrain our dom search.\n  fields.forEach(function (ref$1) {\n      var selector = ref$1.selector;\n      var name = ref$1.name;\n\n    var ref = this$1.vm.$refs[selector];\n    var el = Array.isArray(ref) ? ref[0] : ref;\n    if (!el) {\n      return;\n    }\n\n    var options = {\n      vm: this$1.vm,\n      classes: this$1.classes,\n      classNames: this$1.classNames,\n      delay: this$1.delay,\n      scope: this$1.scope,\n      events: this$1.events.join('|'),\n      immediate: this$1.immediate,\n      targetOf: this$1.id\n    };\n\n    // probably a component.\n    if (isCallable(el.$watch)) {\n      options.component = el;\n      options.el = el.$el;\n      options.getter = Resolver.resolveGetter(el.$el, el.$vnode);\n    } else {\n      options.el = el;\n      options.getter = Resolver.resolveGetter(el, {});\n    }\n\n    this$1.dependencies.push({ name: name, field: new Field(options) });\n  });\n};\n\n/**\n * Removes listeners.\n */\nField.prototype.unwatch = function unwatch (tag) {\n    if ( tag === void 0 ) tag = null;\n\n  if (!tag) {\n    this.watchers.forEach(function (w) { return w.unwatch(); });\n    this.watchers = [];\n    return;\n  }\n\n  this.watchers.filter(function (w) { return tag.test(w.tag); }).forEach(function (w) { return w.unwatch(); });\n  this.watchers = this.watchers.filter(function (w) { return !tag.test(w.tag); });\n};\n\n/**\n * Updates the element classes depending on each field flag status.\n */\nField.prototype.updateClasses = function updateClasses (isReset) {\n    var this$1 = this;\n    if ( isReset === void 0 ) isReset = false;\n\n  if (!this.classes || this.isDisabled) { return; }\n  var applyClasses = function (el) {\n    toggleClass(el, this$1.classNames.dirty, this$1.flags.dirty);\n    toggleClass(el, this$1.classNames.pristine, this$1.flags.pristine);\n    toggleClass(el, this$1.classNames.touched, this$1.flags.touched);\n    toggleClass(el, this$1.classNames.untouched, this$1.flags.untouched);\n\n    // remove valid/invalid classes on reset.\n    if (isReset) {\n      toggleClass(el, this$1.classNames.valid, false);\n      toggleClass(el, this$1.classNames.invalid, false);\n    }\n\n    // make sure we don't set any classes if the state is undetermined.\n    if (!isNullOrUndefined(this$1.flags.valid) && this$1.flags.validated) {\n      toggleClass(el, this$1.classNames.valid, this$1.flags.valid);\n    }\n\n    if (!isNullOrUndefined(this$1.flags.invalid) && this$1.flags.validated) {\n      toggleClass(el, this$1.classNames.invalid, this$1.flags.invalid);\n    }\n  };\n\n  if (!isCheckboxOrRadioInput(this.el)) {\n    applyClasses(this.el);\n    return;\n  }\n\n  var els = document.querySelectorAll((\"input[name=\\\"\" + (this.el.name) + \"\\\"]\"));\n  toArray(els).forEach(applyClasses);\n};\n\n/**\n * Adds the listeners required for automatic classes and some flags.\n */\nField.prototype.addActionListeners = function addActionListeners () {\n    var this$1 = this;\n\n  // remove previous listeners.\n  this.unwatch(/class/);\n\n  if (!this.el) { return; }\n\n  var onBlur = function () {\n    this$1.flags.touched = true;\n    this$1.flags.untouched = false;\n    if (this$1.classes) {\n      toggleClass(this$1.el, this$1.classNames.touched, true);\n      toggleClass(this$1.el, this$1.classNames.untouched, false);\n    }\n\n    // only needed once.\n    this$1.unwatch(/^class_blur$/);\n  };\n\n  var inputEvent = isTextInput(this.el) ? 'input' : 'change';\n  var onInput = function () {\n    this$1.flags.dirty = true;\n    this$1.flags.pristine = false;\n    if (this$1.classes) {\n      toggleClass(this$1.el, this$1.classNames.pristine, false);\n      toggleClass(this$1.el, this$1.classNames.dirty, true);\n    }\n\n    // only needed once.\n    this$1.unwatch(/^class_input$/);\n  };\n\n  if (this.componentInstance && isCallable(this.componentInstance.$once)) {\n    this.componentInstance.$once('input', onInput);\n    this.componentInstance.$once('blur', onBlur);\n    this.watchers.push({\n      tag: 'class_input',\n      unwatch: function () {\n        this$1.componentInstance.$off('input', onInput);\n      }\n    });\n    this.watchers.push({\n      tag: 'class_blur',\n      unwatch: function () {\n        this$1.componentInstance.$off('blur', onBlur);\n      }\n    });\n    return;\n  }\n\n  if (!this.el) { return; }\n\n  addEventListener(this.el, inputEvent, onInput);\n  // Checkboxes and radio buttons on Mac don't emit blur naturally, so we listen on click instead.\n  var blurEvent = isCheckboxOrRadioInput(this.el) ? 'change' : 'blur';\n  addEventListener(this.el, blurEvent, onBlur);\n  this.watchers.push({\n    tag: 'class_input',\n    unwatch: function () {\n      this$1.el.removeEventListener(inputEvent, onInput);\n    }\n  });\n\n  this.watchers.push({\n    tag: 'class_blur',\n    unwatch: function () {\n      this$1.el.removeEventListener(blurEvent, onBlur);\n    }\n  });\n};\n\nField.prototype.checkValueChanged = function checkValueChanged () {\n  // handle some people initialize the value to null, since text inputs have empty string value.\n  if (this.initialValue === null && this.value === '' && isTextInput(this.el)) {\n    return false;\n  }\n\n  return this.value !== this.initialValue;\n};\n\n/**\n * Determines the suitable primary event to listen for.\n */\nField.prototype._determineInputEvent = function _determineInputEvent () {\n  // if its a custom component, use the customized model event or the input event.\n  if (this.componentInstance) {\n    return (this.componentInstance.$options.model && this.componentInstance.$options.model.event) || 'input';\n  }\n\n  if (this.model && this.model.lazy) {\n    return 'change';\n  }\n\n  if (isTextInput(this.el)) {\n    return 'input';\n  }\n\n  return 'change';\n};\n\n/**\n * Determines the list of events to listen to.\n */\nField.prototype._determineEventList = function _determineEventList (defaultInputEvent) {\n    var this$1 = this;\n\n  // if no event is configured, or it is a component or a text input then respect the user choice.\n  if (!this.events.length || this.componentInstance || isTextInput(this.el)) {\n    return [].concat( this.events ).map(function (evt) {\n      if (evt === 'input' && this$1.model && this$1.model.lazy) {\n        return 'change';\n      }\n\n      return evt;\n    });\n  }\n\n  // force suitable event for non-text type fields.\n  return this.events.map(function (e) {\n    if (e === 'input') {\n      return defaultInputEvent;\n    }\n\n    return e;\n  });\n};\n\n/**\n * Adds the listeners required for validation.\n */\nField.prototype.addValueListeners = function addValueListeners () {\n    var this$1 = this;\n\n  this.unwatch(/^input_.+/);\n  if (!this.listen || !this.el) { return; }\n\n  var token = { cancelled: false };\n  var fn = this.targetOf ? function () {\n    var target = this$1.validator._resolveField((\"#\" + (this$1.targetOf)));\n    if (target && target.flags.validated) {\n      this$1.validator.validate((\"#\" + (this$1.targetOf)));\n    }\n  } : function () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n    // if its a DOM event, resolve the value, otherwise use the first parameter as the value.\n    if (args.length === 0 || isEvent(args[0])) {\n      args[0] = this$1.value;\n    }\n\n    this$1.flags.pending = true;\n    this$1._cancellationToken = token;\n    this$1.validator.validate((\"#\" + (this$1.id)), args[0]);\n  };\n\n  var inputEvent = this._determineInputEvent();\n  var events = this._determineEventList(inputEvent);\n\n  // if on input validation is requested.\n  if (includes(events, inputEvent)) {\n    var ctx = null;\n    var expression = null;\n    var watchCtxVm = false;\n    // if its watchable from the context vm.\n    if (this.model && this.model.expression) {\n      ctx = this.vm;\n      expression = this.model.expression;\n      watchCtxVm = true;\n    }\n\n    // watch it from the custom component vm instead.\n    if (!expression && this.componentInstance && this.componentInstance.$options.model) {\n      ctx = this.componentInstance;\n      expression = this.componentInstance.$options.model.prop || 'value';\n    }\n\n    if (ctx && expression) {\n      var debouncedFn = debounce(fn, this.delay[inputEvent], token);\n      var unwatch = ctx.$watch(expression, debouncedFn);\n      this.watchers.push({\n        tag: 'input_model',\n        unwatch: function () {\n          this$1.vm.$nextTick(function () {\n            unwatch();\n          });\n        }\n      });\n\n      // filter out input event when we are watching from the context vm.\n      if (watchCtxVm) {\n        events = events.filter(function (e) { return e !== inputEvent; });\n      }\n    }\n  }\n\n  // Add events.\n  events.forEach(function (e) {\n    var debouncedFn = debounce(fn, this$1.delay[e], token);\n\n    this$1._addComponentEventListener(e, debouncedFn);\n    this$1._addHTMLEventListener(e, debouncedFn);\n  });\n};\n\nField.prototype._addComponentEventListener = function _addComponentEventListener (evt, validate) {\n    var this$1 = this;\n\n  if (!this.componentInstance) { return; }\n\n  this.componentInstance.$on(evt, validate);\n  this.watchers.push({\n    tag: 'input_vue',\n    unwatch: function () {\n      this$1.componentInstance.$off(evt, validate);\n    }\n  });\n};\n\nField.prototype._addHTMLEventListener = function _addHTMLEventListener (evt, validate) {\n    var this$1 = this;\n\n  if (!this.el || this.componentInstance) { return; }\n\n  // listen for the current element.\n  var addListener = function (el) {\n    addEventListener(el, evt, validate);\n    this$1.watchers.push({\n      tag: 'input_native',\n      unwatch: function () {\n        el.removeEventListener(evt, validate);\n      }\n    });\n  };\n\n  addListener(this.el);\n  if (!isCheckboxOrRadioInput(this.el)) {\n    return;\n  }\n\n  var els = document.querySelectorAll((\"input[name=\\\"\" + (this.el.name) + \"\\\"]\"));\n  toArray(els).forEach(function (el) {\n    // skip if it is added by v-validate and is not the current element.\n    if (el._veeValidateId && el !== this$1.el) {\n      return;\n    }\n\n    addListener(el);\n  });\n};\n\n/**\n * Updates aria attributes on the element.\n */\nField.prototype.updateAriaAttrs = function updateAriaAttrs () {\n    var this$1 = this;\n\n  if (!this.aria || !this.el || !isCallable(this.el.setAttribute)) { return; }\n\n  var applyAriaAttrs = function (el) {\n    el.setAttribute('aria-required', this$1.isRequired ? 'true' : 'false');\n    el.setAttribute('aria-invalid', this$1.flags.invalid ? 'true' : 'false');\n  };\n\n  if (!isCheckboxOrRadioInput(this.el)) {\n    applyAriaAttrs(this.el);\n    return;\n  }\n\n  var els = document.querySelectorAll((\"input[name=\\\"\" + (this.el.name) + \"\\\"]\"));\n  toArray(els).forEach(applyAriaAttrs);\n};\n\n/**\n * Updates the custom validity for the field.\n */\nField.prototype.updateCustomValidity = function updateCustomValidity () {\n  if (!this.validity || !this.el || !isCallable(this.el.setCustomValidity) || !this.validator.errors) { return; }\n\n  this.el.setCustomValidity(this.flags.valid ? '' : (this.validator.errors.firstById(this.id) || ''));\n};\n\n/**\n * Removes all listeners.\n */\nField.prototype.destroy = function destroy () {\n  // ignore the result of any ongoing validation.\n  if (this._cancellationToken) {\n    this._cancellationToken.cancelled = true;\n  }\n\n  this.unwatch();\n  this.dependencies.forEach(function (d) { return d.field.destroy(); });\n  this.dependencies = [];\n};\n\nObject.defineProperties( Field.prototype, prototypeAccessors$1 );\n\n// \n\nvar FieldBag = function FieldBag (items) {\n  if ( items === void 0 ) items = [];\n\n  this.items = items || [];\n  this.itemsById = this.items.reduce(function (itemsById, item) {\n    itemsById[item.id] = item;\n    return itemsById;\n  }, {});\n};\n\nvar prototypeAccessors$2 = { length: { configurable: true } };\n\nFieldBag.prototype[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = function () {\n    var this$1 = this;\n\n  var index = 0;\n  return {\n    next: function () {\n      return { value: this$1.items[index++], done: index > this$1.items.length };\n    }\n  };\n};\n\n/**\n * Gets the current items length.\n */\n\nprototypeAccessors$2.length.get = function () {\n  return this.items.length;\n};\n\n/**\n * Finds the first field that matches the provided matcher object.\n */\nFieldBag.prototype.find = function find$1 (matcher) {\n  return find(this.items, function (item) { return item.matches(matcher); });\n};\n\n/**\n * Finds the field with the given id, using a plain object as a map to link\n * ids to items faster than by looping over the array and matching.\n */\nFieldBag.prototype.findById = function findById (id) {\n  return this.itemsById[id] || null;\n};\n\n/**\n * Filters the items down to the matched fields.\n */\nFieldBag.prototype.filter = function filter (matcher) {\n  // multiple matchers to be tried.\n  if (Array.isArray(matcher)) {\n    return this.items.filter(function (item) { return matcher.some(function (m) { return item.matches(m); }); });\n  }\n\n  return this.items.filter(function (item) { return item.matches(matcher); });\n};\n\n/**\n * Maps the field items using the mapping function.\n */\nFieldBag.prototype.map = function map (mapper) {\n  return this.items.map(mapper);\n};\n\n/**\n * Finds and removes the first field that matches the provided matcher object, returns the removed item.\n */\nFieldBag.prototype.remove = function remove (matcher) {\n  var item = null;\n  if (matcher instanceof Field) {\n    item = matcher;\n  } else {\n    item = this.find(matcher);\n  }\n\n  if (!item) { return null; }\n\n  var index = this.items.indexOf(item);\n  this.items.splice(index, 1);\n  delete this.itemsById[item.id];\n\n  return item;\n};\n\n/**\n * Adds a field item to the list.\n */\nFieldBag.prototype.push = function push (item) {\n  if (! (item instanceof Field)) {\n    throw createError('FieldBag only accepts instances of Field that has an id defined.');\n  }\n\n  if (!item.id) {\n    throw createError('Field id must be defined.');\n  }\n\n  if (this.findById(item.id)) {\n    throw createError((\"Field with id \" + (item.id) + \" is already added.\"));\n  }\n\n  this.items.push(item);\n  this.itemsById[item.id] = item;\n};\n\nObject.defineProperties( FieldBag.prototype, prototypeAccessors$2 );\n\nvar ScopedValidator = function ScopedValidator (base, vm) {\n  this.id = vm._uid;\n  this._base = base;\n  this._paused = false;\n\n  // create a mirror bag with limited component scope.\n  this.errors = new ErrorBag(base.errors, this.id);\n};\n\nvar prototypeAccessors$3 = { flags: { configurable: true },rules: { configurable: true },fields: { configurable: true },dictionary: { configurable: true },locale: { configurable: true } };\n\nprototypeAccessors$3.flags.get = function () {\n    var this$1 = this;\n\n  return this._base.fields.items.filter(function (f) { return f.vmId === this$1.id; }).reduce(function (acc, field) {\n    if (field.scope) {\n      if (!acc[(\"$\" + (field.scope))]) {\n        acc[(\"$\" + (field.scope))] = {};\n      }\n\n      acc[(\"$\" + (field.scope))][field.name] = field.flags;\n    }\n\n    acc[field.name] = field.flags;\n\n    return acc;\n  }, {});\n};\n\nprototypeAccessors$3.rules.get = function () {\n  return this._base.rules;\n};\n\nprototypeAccessors$3.fields.get = function () {\n  return new FieldBag(this._base.fields.filter({ vmId: this.id }));\n};\n\nprototypeAccessors$3.dictionary.get = function () {\n  return this._base.dictionary;\n};\n\nprototypeAccessors$3.locale.get = function () {\n  return this._base.locale;\n};\n\nprototypeAccessors$3.locale.set = function (val) {\n  this._base.locale = val;\n};\n\nScopedValidator.prototype.localize = function localize () {\n    var ref;\n\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n  return (ref = this._base).localize.apply(ref, args);\n};\n\nScopedValidator.prototype.update = function update () {\n    var ref;\n\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n  return (ref = this._base).update.apply(ref, args);\n};\n\nScopedValidator.prototype.attach = function attach (opts) {\n  var attachOpts = assign({}, opts, { vmId: this.id });\n\n  return this._base.attach(attachOpts);\n};\n\nScopedValidator.prototype.pause = function pause () {\n  this._paused = true;\n};\n\nScopedValidator.prototype.resume = function resume () {\n  this._paused = false;\n};\n\nScopedValidator.prototype.remove = function remove (ruleName) {\n  return this._base.remove(ruleName);\n};\n\nScopedValidator.prototype.detach = function detach (name, scope) {\n  return this._base.detach(name, scope, this.id);\n};\n\nScopedValidator.prototype.extend = function extend () {\n    var ref;\n\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n  return (ref = this._base).extend.apply(ref, args);\n};\n\nScopedValidator.prototype.validate = function validate (descriptor, value, opts) {\n    if ( opts === void 0 ) opts = {};\n\n  if (this._paused) { return Promise.resolve(true); }\n\n  return this._base.validate(descriptor, value, assign({}, { vmId: this.id }, opts || {}));\n};\n\nScopedValidator.prototype.verify = function verify () {\n    var ref;\n\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n  return (ref = this._base).verify.apply(ref, args);\n};\n\nScopedValidator.prototype.validateAll = function validateAll (values, opts) {\n    if ( opts === void 0 ) opts = {};\n\n  if (this._paused) { return Promise.resolve(true); }\n\n  return this._base.validateAll(values, assign({}, { vmId: this.id }, opts || {}));\n};\n\nScopedValidator.prototype.validateScopes = function validateScopes (opts) {\n    if ( opts === void 0 ) opts = {};\n\n  if (this._paused) { return Promise.resolve(true); }\n\n  return this._base.validateScopes(assign({}, { vmId: this.id }, opts || {}));\n};\n\nScopedValidator.prototype.destroy = function destroy () {\n  delete this.id;\n  delete this._base;\n};\n\nScopedValidator.prototype.reset = function reset (matcher) {\n  return this._base.reset(Object.assign({}, matcher || {}, { vmId: this.id }));\n};\n\nScopedValidator.prototype.flag = function flag () {\n    var ref;\n\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n  return (ref = this._base).flag.apply(ref, args.concat( [this.id] ));\n};\n\nScopedValidator.prototype._resolveField = function _resolveField () {\n    var ref;\n\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n  return (ref = this._base)._resolveField.apply(ref, args);\n};\n\nObject.defineProperties( ScopedValidator.prototype, prototypeAccessors$3 );\n\nvar VALIDATOR = null;\n\nvar getValidator = function () {\n  return VALIDATOR;\n};\n\nvar setValidator = function (value) {\n  VALIDATOR = value;\n\n  return value;\n};\n\n// \n\n/**\n * Checks if a parent validator instance was requested.\n */\nvar requestsValidator = function (injections) {\n  if (isObject(injections) && injections.$validator) {\n    return true;\n  }\n\n  return false;\n};\n\nvar mixin = {\n  provide: function provide () {\n    if (this.$validator && !isBuiltInComponent(this.$vnode)) {\n      return {\n        $validator: this.$validator\n      };\n    }\n\n    return {};\n  },\n  beforeCreate: function beforeCreate () {\n    // if built in do nothing.\n    if (isBuiltInComponent(this.$vnode) || this.$options.$__veeInject === false) {\n      return;\n    }\n\n    // if its a root instance set the config if it exists.\n    if (!this.$parent) {\n      setConfig(this.$options.$_veeValidate || {});\n    }\n\n    var options = resolveConfig(this);\n\n    // if its a root instance, inject anyways, or if it requested a new instance.\n    if (!this.$parent || (this.$options.$_veeValidate && /new/.test(this.$options.$_veeValidate.validator))) {\n      this.$validator = new ScopedValidator(getValidator(), this);\n    }\n\n    var requested = requestsValidator(this.$options.inject);\n\n    // if automatic injection is enabled and no instance was requested.\n    if (! this.$validator && options.inject && !requested) {\n      this.$validator = new ScopedValidator(getValidator(), this);\n    }\n\n    // don't inject errors or fieldBag as no validator was resolved.\n    if (!requested && !this.$validator) {\n      return;\n    }\n\n    // There is a validator but it isn't injected, mark as reactive.\n    if (!requested && this.$validator) {\n      var Vue = this.$options._base; // the vue constructor.\n      Vue.util.defineReactive(this.$validator, 'errors', this.$validator.errors);\n    }\n\n    if (!this.$options.computed) {\n      this.$options.computed = {};\n    }\n\n    this.$options.computed[options.errorBagName || 'errors'] = function errorBagGetter () {\n      return this.$validator.errors;\n    };\n    this.$options.computed[options.fieldsBagName || 'fields'] = function fieldBagGetter () {\n      return this.$validator.fields.items.reduce(function (acc, field) {\n        if (field.scope) {\n          if (!acc[(\"$\" + (field.scope))]) {\n            acc[(\"$\" + (field.scope))] = {};\n          }\n\n          acc[(\"$\" + (field.scope))][field.name] = field.flags;\n\n          return acc;\n        }\n\n        acc[field.name] = field.flags;\n\n        return acc;\n      }, {});\n    };\n  },\n  beforeDestroy: function beforeDestroy () {\n    if (this.$validator && this._uid === this.$validator.id) {\n      this.$validator.errors.clear(); // remove errors generated by this component.\n    }\n  }\n};\n\n// \n\n/**\n * Finds the requested field by id from the context object.\n */\nfunction findField (el, context) {\n  if (!context || !context.$validator) {\n    return null;\n  }\n\n  return context.$validator.fields.findById(el._veeValidateId);\n}\nvar directive = {\n  bind: function bind (el, binding, vnode) {\n    var validator = vnode.context.$validator;\n    if (!validator) {\n      if (true) {\n        warn(\"No validator instance is present on vm, did you forget to inject '$validator'?\");\n      }\n\n      return;\n    }\n\n    var fieldOptions = Resolver.generate(el, binding, vnode);\n    validator.attach(fieldOptions);\n  },\n  inserted: function inserted (el, binding, vnode) {\n    var field = findField(el, vnode.context);\n    var scope = Resolver.resolveScope(el, binding, vnode);\n\n    // skip if scope hasn't changed.\n    if (!field || scope === field.scope) { return; }\n\n    // only update scope.\n    field.update({ scope: scope });\n\n    // allows the field to re-evaluated once more in the update hook.\n    field.updated = false;\n  },\n  update: function update (el, binding, vnode) {\n    var field = findField(el, vnode.context);\n\n    // make sure we don't do unneccasary work if no important change was done.\n    if (!field || (field.updated && isEqual(binding.value, binding.oldValue))) { return; }\n    var scope = Resolver.resolveScope(el, binding, vnode);\n    var rules = Resolver.resolveRules(el, binding, vnode);\n\n    field.update({\n      scope: scope,\n      rules: rules\n    });\n  },\n  unbind: function unbind (el, binding, ref) {\n    var context = ref.context;\n\n    var field = findField(el, context);\n    if (!field) { return; }\n\n    context.$validator.detach(field);\n  }\n};\n\n// \n\nvar Validator = function Validator (validations, options, pluginContainer) {\n  if ( options === void 0 ) options = { fastExit: true };\n  if ( pluginContainer === void 0 ) pluginContainer = null;\n\n  this.errors = new ErrorBag();\n  this.fields = new FieldBag();\n  this._createFields(validations);\n  this.paused = false;\n  this.fastExit = !isNullOrUndefined(options && options.fastExit) ? options.fastExit : true;\n  this.$vee = pluginContainer || {\n    _vm: {\n      $nextTick: function (cb) { return isCallable(cb) ? cb() : Promise.resolve(); },\n      $emit: function () {},\n      $off: function () {}\n    }\n  };\n};\n\nvar prototypeAccessors$4 = { rules: { configurable: true },dictionary: { configurable: true },flags: { configurable: true },locale: { configurable: true } };\nvar staticAccessors$1 = { rules: { configurable: true },dictionary: { configurable: true },locale: { configurable: true } };\n\n/**\n * @deprecated\n */\nstaticAccessors$1.rules.get = function () {\n  if (true) {\n    warn('this accessor will be deprecated, use `import { rules } from \"vee-validate\"` instead.');\n  }\n\n  return RuleContainer.rules;\n};\n\n/**\n * @deprecated\n */\nprototypeAccessors$4.rules.get = function () {\n  if (true) {\n    warn('this accessor will be deprecated, use `import { rules } from \"vee-validate\"` instead.');\n  }\n\n  return RuleContainer.rules;\n};\n\nprototypeAccessors$4.dictionary.get = function () {\n  return DictionaryResolver.getDriver();\n};\n\nstaticAccessors$1.dictionary.get = function () {\n  return DictionaryResolver.getDriver();\n};\n\nprototypeAccessors$4.flags.get = function () {\n  return this.fields.items.reduce(function (acc, field) {\n      var obj;\n\n    if (field.scope) {\n      acc[(\"$\" + (field.scope))] = ( obj = {}, obj[field.name] = field.flags, obj );\n\n      return acc;\n    }\n\n    acc[field.name] = field.flags;\n\n    return acc;\n  }, {});\n};\n\n/**\n * Getter for the current locale.\n */\nprototypeAccessors$4.locale.get = function () {\n  return Validator.locale;\n};\n\n/**\n * Setter for the validator locale.\n */\nprototypeAccessors$4.locale.set = function (value) {\n  Validator.locale = value;\n};\n\nstaticAccessors$1.locale.get = function () {\n  return DictionaryResolver.getDriver().locale;\n};\n\n/**\n * Setter for the validator locale.\n */\nstaticAccessors$1.locale.set = function (value) {\n  var hasChanged = value !== DictionaryResolver.getDriver().locale;\n  DictionaryResolver.getDriver().locale = value;\n  if (hasChanged && Validator.$vee && Validator.$vee._vm) {\n    Validator.$vee._vm.$emit('localeChanged');\n  }\n};\n\n/**\n * Static constructor.\n * @deprecated\n */\nValidator.create = function create (validations, options) {\n  if (true) {\n    warn('Please use `new` to create new validator instances.');\n  }\n\n  return new Validator(validations, options);\n};\n\n/**\n * Adds a custom validator to the list of validation rules.\n */\nValidator.extend = function extend (name, validator, options) {\n    if ( options === void 0 ) options = {};\n\n  Validator._guardExtend(name, validator);\n  // rules imported from the minimal bundle\n  // will have the options embedded in them\n  var mergedOpts = validator.options || {};\n  Validator._merge(name, {\n    validator: validator,\n    paramNames: (options && options.paramNames) || validator.paramNames,\n    options: assign({ hasTarget: false, immediate: true }, mergedOpts, options || {})\n  });\n};\n\n/**\n * Removes a rule from the list of validators.\n * @deprecated\n */\nValidator.remove = function remove (name) {\n  if (true) {\n    warn('this method will be deprecated, you can still override your rules with `extend`');\n  }\n\n  RuleContainer.remove(name);\n};\n\n/**\n * Adds and sets the current locale for the validator.\n*/\nValidator.prototype.localize = function localize (lang, dictionary) {\n  Validator.localize(lang, dictionary);\n};\n\n/**\n * Adds and sets the current locale for the validator.\n */\nValidator.localize = function localize (lang, dictionary) {\n    var obj;\n\n  if (isObject(lang)) {\n    DictionaryResolver.getDriver().merge(lang);\n    return;\n  }\n\n  // merge the dictionary.\n  if (dictionary) {\n    var locale = lang || dictionary.name;\n    dictionary = assign({}, dictionary);\n    DictionaryResolver.getDriver().merge(( obj = {}, obj[locale] = dictionary, obj ));\n  }\n\n  if (lang) {\n    // set the locale.\n    Validator.locale = lang;\n  }\n};\n\n/**\n * Registers a field to be validated.\n */\nValidator.prototype.attach = function attach (fieldOpts) {\n    var this$1 = this;\n\n  // We search for a field with the same name & scope, having persist enabled\n  var oldFieldMatcher = { name: fieldOpts.name, scope: fieldOpts.scope, persist: true };\n  var oldField = fieldOpts.persist ? this.fields.find(oldFieldMatcher) : null;\n\n  if (oldField) {\n    // We keep the flags of the old field, then we remove its instance\n    fieldOpts.flags = oldField.flags;\n    oldField.destroy();\n    this.fields.remove(oldField);\n  }\n\n  // fixes initial value detection with v-model and select elements.\n  var value = fieldOpts.initialValue;\n  var field = new Field(fieldOpts);\n  this.fields.push(field);\n\n  // validate the field initially\n  if (field.immediate) {\n    this.$vee._vm.$nextTick(function () { return this$1.validate((\"#\" + (field.id)), value || field.value, { vmId: fieldOpts.vmId }); });\n  } else {\n    this._validate(field, value || field.value, { initial: true }).then(function (result) {\n      field.flags.valid = result.valid;\n      field.flags.invalid = !result.valid;\n    });\n  }\n\n  return field;\n};\n\n/**\n * Sets the flags on a field.\n */\nValidator.prototype.flag = function flag (name, flags, uid) {\n    if ( uid === void 0 ) uid = null;\n\n  var field = this._resolveField(name, undefined, uid);\n  if (!field || !flags) {\n    return;\n  }\n\n  field.setFlags(flags);\n};\n\n/**\n * Removes a field from the validator.\n */\nValidator.prototype.detach = function detach (name, scope, uid) {\n  var field = isCallable(name.destroy) ? name : this._resolveField(name, scope, uid);\n  if (!field) { return; }\n\n  // We destroy/remove the field & error instances if it's not a `persist` one\n  if (!field.persist) {\n    field.destroy();\n    this.errors.remove(field.name, field.scope, field.vmId);\n    this.fields.remove(field);\n  }\n};\n\n/**\n * Adds a custom validator to the list of validation rules.\n */\nValidator.prototype.extend = function extend (name, validator, options) {\n    if ( options === void 0 ) options = {};\n\n  Validator.extend(name, validator, options);\n};\n\nValidator.prototype.reset = function reset (matcher) {\n    var this$1 = this;\n\n  // two ticks\n  return this.$vee._vm.$nextTick().then(function () {\n    return this$1.$vee._vm.$nextTick();\n  }).then(function () {\n    this$1.fields.filter(matcher).forEach(function (field) {\n      field.waitFor(null);\n      field.reset(); // reset field flags.\n      this$1.errors.remove(field.name, field.scope, matcher && matcher.vmId);\n    });\n  });\n};\n\n/**\n * Updates a field, updating both errors and flags.\n */\nValidator.prototype.update = function update (id, ref) {\n    var scope = ref.scope;\n\n  var field = this._resolveField((\"#\" + id));\n  if (!field) { return; }\n\n  // remove old scope.\n  this.errors.update(id, { scope: scope });\n};\n\n/**\n * Removes a rule from the list of validators.\n * @deprecated\n */\nValidator.prototype.remove = function remove (name) {\n  Validator.remove(name);\n};\n\n/**\n * Validates a value against a registered field validations.\n */\nValidator.prototype.validate = function validate (fieldDescriptor, value, ref) {\n    var this$1 = this;\n    if ( ref === void 0 ) ref = {};\n    var silent = ref.silent;\n    var vmId = ref.vmId;\n\n  if (this.paused) { return Promise.resolve(true); }\n\n  // overload to validate all.\n  if (isNullOrUndefined(fieldDescriptor)) {\n    return this.validateScopes({ silent: silent, vmId: vmId });\n  }\n\n  // overload to validate scope-less fields.\n  if (fieldDescriptor === '*') {\n    return this.validateAll(undefined, { silent: silent, vmId: vmId });\n  }\n\n  // if scope validation was requested.\n  if (/^(.+)\\.\\*$/.test(fieldDescriptor)) {\n    var matched = fieldDescriptor.match(/^(.+)\\.\\*$/)[1];\n    return this.validateAll(matched);\n  }\n\n  var field = this._resolveField(fieldDescriptor);\n  if (!field) {\n    return this._handleFieldNotFound(fieldDescriptor);\n  }\n\n  if (!silent) { field.flags.pending = true; }\n  if (value === undefined) {\n    value = field.value;\n  }\n\n  var validationPromise = this._validate(field, value);\n  field.waitFor(validationPromise);\n\n  return validationPromise.then(function (result) {\n    if (!silent && field.isWaitingFor(validationPromise)) {\n      // allow next validation to mutate the state.\n      field.waitFor(null);\n      this$1._handleValidationResults([result], vmId);\n    }\n\n    return result.valid;\n  });\n};\n\n/**\n * Pauses the validator.\n */\nValidator.prototype.pause = function pause () {\n  this.paused = true;\n\n  return this;\n};\n\n/**\n * Resumes the validator.\n */\nValidator.prototype.resume = function resume () {\n  this.paused = false;\n\n  return this;\n};\n\n/**\n * Validates each value against the corresponding field validations.\n */\nValidator.prototype.validateAll = function validateAll (values, ref) {\n    var this$1 = this;\n    if ( ref === void 0 ) ref = {};\n    var silent = ref.silent;\n    var vmId = ref.vmId;\n\n  if (this.paused) { return Promise.resolve(true); }\n\n  var matcher = null;\n  var providedValues = false;\n\n  if (typeof values === 'string') {\n    matcher = { scope: values, vmId: vmId };\n  } else if (isObject(values)) {\n    matcher = Object.keys(values).map(function (key) {\n      return { name: key, vmId: vmId, scope: null };\n    });\n    providedValues = true;\n  } else if (Array.isArray(values)) {\n    matcher = values.map(function (key) {\n      return typeof key === 'object' ? Object.assign({ vmId: vmId }, key) : { name: key, vmId: vmId };\n    });\n  } else {\n    matcher = { scope: null, vmId: vmId };\n  }\n\n  return Promise.all(\n    this.fields.filter(matcher).map(function (field) { return this$1._validate(field, providedValues ? values[field.name] : field.value); })\n  ).then(function (results) {\n    if (!silent) {\n      this$1._handleValidationResults(results, vmId);\n    }\n\n    return results.every(function (t) { return t.valid; });\n  });\n};\n\n/**\n * Validates all scopes.\n */\nValidator.prototype.validateScopes = function validateScopes (ref) {\n    var this$1 = this;\n    if ( ref === void 0 ) ref = {};\n    var silent = ref.silent;\n    var vmId = ref.vmId;\n\n  if (this.paused) { return Promise.resolve(true); }\n\n  return Promise.all(\n    this.fields.filter({ vmId: vmId }).map(function (field) { return this$1._validate(field, field.value); })\n  ).then(function (results) {\n    if (!silent) {\n      this$1._handleValidationResults(results, vmId);\n    }\n\n    return results.every(function (t) { return t.valid; });\n  });\n};\n\n/**\n * Validates a value against the rules.\n */\nValidator.prototype.verify = function verify (value, rules, options) {\n    if ( options === void 0 ) options = {};\n\n  var field = {\n    name: (options && options.name) || '{field}',\n    rules: normalizeRules(rules),\n    bails: getPath('bails', options, true),\n    forceRequired: false,\n    get isRequired () {\n      return !!this.rules.required || this.forceRequired;\n    }\n  };\n\n  var targetRules = Object.keys(field.rules).filter(RuleContainer.isTargetRule);\n  if (targetRules.length && options && isObject(options.values)) {\n    field.dependencies = targetRules.map(function (rule) {\n      var ref = field.rules[rule];\n        var targetKey = ref[0];\n\n      return {\n        name: rule,\n        field: { value: options.values[targetKey] }\n      };\n    });\n  }\n\n  return this._validate(field, value).then(function (result) {\n    var errors = [];\n    var ruleMap = {};\n    result.errors.forEach(function (e) {\n      errors.push(e.msg);\n      ruleMap[e.rule] = e.msg;\n    });\n\n    return {\n      valid: result.valid,\n      errors: errors,\n      failedRules: ruleMap\n    };\n  });\n};\n\n/**\n * Perform cleanup.\n */\nValidator.prototype.destroy = function destroy () {\n  this.$vee._vm.$off('localeChanged');\n};\n\n/**\n * Creates the fields to be validated.\n */\nValidator.prototype._createFields = function _createFields (validations) {\n    var this$1 = this;\n\n  if (!validations) { return; }\n\n  Object.keys(validations).forEach(function (field) {\n    var options = assign({}, { name: field, rules: validations[field] });\n    this$1.attach(options);\n  });\n};\n\n/**\n * Date rules need the existence of a format, so date_format must be supplied.\n */\nValidator.prototype._getDateFormat = function _getDateFormat (validations) {\n  var format = null;\n  if (validations.date_format && Array.isArray(validations.date_format)) {\n    format = validations.date_format[0];\n  }\n\n  return format || DictionaryResolver.getDriver().getDateFormat(this.locale);\n};\n\n/**\n * Formats an error message for field and a rule.\n */\nValidator.prototype._formatErrorMessage = function _formatErrorMessage (field, rule, data, targetName) {\n    if ( data === void 0 ) data = {};\n    if ( targetName === void 0 ) targetName = null;\n\n  var name = this._getFieldDisplayName(field);\n  var params = this._getLocalizedParams(rule, targetName);\n\n  return DictionaryResolver.getDriver().getFieldMessage(this.locale, field.name, rule.name, [name, params, data]);\n};\n\n/**\n * We need to convert any object param to an array format since the locales do not handle params as objects yet.\n */\nValidator.prototype._convertParamObjectToArray = function _convertParamObjectToArray (obj, ruleName) {\n  if (Array.isArray(obj)) {\n    return obj;\n  }\n\n  var paramNames = RuleContainer.getParamNames(ruleName);\n  if (!paramNames || !isObject(obj)) {\n    return obj;\n  }\n\n  return paramNames.reduce(function (prev, paramName) {\n    if (paramName in obj) {\n      prev.push(obj[paramName]);\n    }\n\n    return prev;\n  }, []);\n};\n\n/**\n * Translates the parameters passed to the rule (mainly for target fields).\n */\nValidator.prototype._getLocalizedParams = function _getLocalizedParams (rule, targetName) {\n    if ( targetName === void 0 ) targetName = null;\n\n  var params = this._convertParamObjectToArray(rule.params, rule.name);\n  if (rule.options.hasTarget && params && params[0]) {\n    var localizedName = targetName || DictionaryResolver.getDriver().getAttribute(this.locale, params[0], params[0]);\n    return [localizedName].concat(params.slice(1));\n  }\n\n  return params;\n};\n\n/**\n * Resolves an appropriate display name, first checking 'data-as' or the registered 'prettyName'\n */\nValidator.prototype._getFieldDisplayName = function _getFieldDisplayName (field) {\n  return field.alias || DictionaryResolver.getDriver().getAttribute(this.locale, field.name, field.name);\n};\n\n/**\n * Converts an array of params to an object with named properties.\n * Only works if the rule is configured with a paramNames array.\n * Returns the same params if it cannot convert it.\n */\nValidator.prototype._convertParamArrayToObj = function _convertParamArrayToObj (params, ruleName) {\n  var paramNames = RuleContainer.getParamNames(ruleName);\n  if (!paramNames) {\n    return params;\n  }\n\n  if (isObject(params)) {\n    // check if the object is either a config object or a single parameter that is an object.\n    var hasKeys = paramNames.some(function (name) { return Object.keys(params).indexOf(name) !== -1; });\n    // if it has some of the keys, return it as is.\n    if (hasKeys) {\n      return params;\n    }\n    // otherwise wrap the object in an array.\n    params = [params];\n  }\n\n  // Reduce the paramsNames to a param object.\n  return params.reduce(function (prev, value, idx) {\n    prev[paramNames[idx]] = value;\n\n    return prev;\n  }, {});\n};\n\n/**\n * Tests a single input value against a rule.\n */\nValidator.prototype._test = function _test (field, value, rule) {\n    var this$1 = this;\n\n  var validator = RuleContainer.getValidatorMethod(rule.name);\n  var params = Array.isArray(rule.params) ? toArray(rule.params) : rule.params;\n  if (!params) {\n    params = [];\n  }\n\n  var targetName = null;\n  if (!validator || typeof validator !== 'function') {\n    return Promise.reject(createError((\"No such validator '\" + (rule.name) + \"' exists.\")));\n  }\n\n  // has field dependencies.\n  if (rule.options.hasTarget && field.dependencies) {\n    var target = find(field.dependencies, function (d) { return d.name === rule.name; });\n    if (target) {\n      targetName = target.field.alias;\n      params = [target.field.value].concat(params.slice(1));\n    }\n  } else if (rule.name === 'required' && field.rejectsFalse) {\n    // invalidate false if no args were specified and the field rejects false by default.\n    params = params.length ? params : [true];\n  }\n\n  if (rule.options.isDate) {\n    var dateFormat = this._getDateFormat(field.rules);\n    if (rule.name !== 'date_format') {\n      params.push(dateFormat);\n    }\n  }\n\n  var result = validator(value, this._convertParamArrayToObj(params, rule.name));\n\n  // If it is a promise.\n  if (isCallable(result.then)) {\n    return result.then(function (values) {\n      var allValid = true;\n      var data = {};\n      if (Array.isArray(values)) {\n        allValid = values.every(function (t) { return (isObject(t) ? t.valid : t); });\n      } else { // Is a single object/boolean.\n        allValid = isObject(values) ? values.valid : values;\n        data = values.data;\n      }\n\n      return {\n        valid: allValid,\n        data: result.data,\n        errors: allValid ? [] : [this$1._createFieldError(field, rule, data, targetName)]\n      };\n    });\n  }\n\n  if (!isObject(result)) {\n    result = { valid: result, data: {} };\n  }\n\n  return {\n    valid: result.valid,\n    data: result.data,\n    errors: result.valid ? [] : [this._createFieldError(field, rule, result.data, targetName)]\n  };\n};\n\n/**\n * Merges a validator object into the RULES and Messages.\n */\nValidator._merge = function _merge (name, ref) {\n    var validator = ref.validator;\n    var options = ref.options;\n    var paramNames = ref.paramNames;\n\n  var validate = isCallable(validator) ? validator : validator.validate;\n  if (validator.getMessage) {\n    DictionaryResolver.getDriver().setMessage(Validator.locale, name, validator.getMessage);\n  }\n\n  RuleContainer.add(name, {\n    validate: validate,\n    options: options,\n    paramNames: paramNames\n  });\n};\n\n/**\n * Guards from extension violations.\n */\nValidator._guardExtend = function _guardExtend (name, validator) {\n  if (isCallable(validator)) {\n    return;\n  }\n\n  if (!isCallable(validator.validate)) {\n    throw createError(\n      (\"Extension Error: The validator '\" + name + \"' must be a function or have a 'validate' method.\")\n    );\n  }\n};\n\n/**\n * Creates a Field Error Object.\n */\nValidator.prototype._createFieldError = function _createFieldError (field, rule, data, targetName) {\n    var this$1 = this;\n\n  return {\n    id: field.id,\n    vmId: field.vmId,\n    field: field.name,\n    msg: this._formatErrorMessage(field, rule, data, targetName),\n    rule: rule.name,\n    scope: field.scope,\n    regenerate: function () {\n      return this$1._formatErrorMessage(field, rule, data, targetName);\n    }\n  };\n};\n\n/**\n * Tries different strategies to find a field.\n */\nValidator.prototype._resolveField = function _resolveField (name, scope, uid) {\n  if (name[0] === '#') {\n    return this.fields.findById(name.slice(1));\n  }\n\n  if (!isNullOrUndefined(scope)) {\n    return this.fields.find({ name: name, scope: scope, vmId: uid });\n  }\n\n  if (includes(name, '.')) {\n    var ref = name.split('.');\n      var fieldScope = ref[0];\n      var fieldName = ref.slice(1);\n    var field = this.fields.find({ name: fieldName.join('.'), scope: fieldScope, vmId: uid });\n    if (field) {\n      return field;\n    }\n  }\n\n  return this.fields.find({ name: name, scope: null, vmId: uid });\n};\n\n/**\n * Handles when a field is not found.\n */\nValidator.prototype._handleFieldNotFound = function _handleFieldNotFound (name, scope) {\n  var fullName = isNullOrUndefined(scope) ? name : (\"\" + (!isNullOrUndefined(scope) ? scope + '.' : '') + name);\n\n  return Promise.reject(createError(\n    (\"Validating a non-existent field: \\\"\" + fullName + \"\\\". Use \\\"attach()\\\" first.\")\n  ));\n};\n\n/**\n * Handles validation results.\n */\nValidator.prototype._handleValidationResults = function _handleValidationResults (results, vmId) {\n    var this$1 = this;\n\n  var matchers = results.map(function (result) { return ({ id: result.id }); });\n  this.errors.removeById(matchers.map(function (m) { return m.id; }));\n  // remove by name and scope to remove any custom errors added.\n  results.forEach(function (result) {\n    this$1.errors.remove(result.field, result.scope, vmId);\n  });\n  var allErrors = results.reduce(function (prev, curr) {\n    prev.push.apply(prev, curr.errors);\n\n    return prev;\n  }, []);\n\n  this.errors.add(allErrors);\n\n  // handle flags.\n  this.fields.filter(matchers).forEach(function (field) {\n    var result = find(results, function (r) { return r.id === field.id; });\n    field.setFlags({\n      pending: false,\n      valid: result.valid,\n      validated: true\n    });\n  });\n};\n\nValidator.prototype._shouldSkip = function _shouldSkip (field, value) {\n  // field is configured to run through the pipeline regardless\n  if (field.bails === false) {\n    return false;\n  }\n\n  // disabled fields are skipped if useConstraintAttrs is enabled in config\n  if (field.isDisabled && getConfig().useConstraintAttrs) {\n    return true;\n  }\n\n  // skip if the field is not required and has an empty value.\n  return !field.isRequired && (isNullOrUndefined(value) || value === '' || isEmptyArray(value));\n};\n\nValidator.prototype._shouldBail = function _shouldBail (field) {\n  // if the field was configured explicitly.\n  if (field.bails !== undefined) {\n    return field.bails;\n  }\n\n  return this.fastExit;\n};\n\n/**\n * Starts the validation process.\n */\nValidator.prototype._validate = function _validate (field, value, ref) {\n    var this$1 = this;\n    if ( ref === void 0 ) ref = {};\n    var initial = ref.initial;\n\n  var requireRules = Object.keys(field.rules).filter(RuleContainer.isRequireRule);\n\n  field.forceRequired = false;\n  requireRules.forEach(function (rule) {\n    var ruleOptions = RuleContainer.getOptions(rule);\n    var result = this$1._test(field, value, { name: rule, params: field.rules[rule], options: ruleOptions });\n\n    if (isCallable(result.then)) { throw createError('Require rules cannot be async'); }\n    if (!isObject(result)) { throw createError('Require rules has to return an object (see docs)'); }\n\n    if (result.data.required === true) {\n      field.forceRequired = true;\n    }\n  });\n\n  if (this._shouldSkip(field, value)) {\n    return Promise.resolve({ valid: true, id: field.id, field: field.name, scope: field.scope, errors: [] });\n  }\n\n  var promises = [];\n  var errors = [];\n  var isExitEarly = false;\n  if (isCallable(field.checkValueChanged)) {\n    field.flags.changed = field.checkValueChanged();\n  }\n\n  // use of '.some()' is to break iteration in middle by returning true\n  Object.keys(field.rules).filter(function (rule) {\n    if (!initial || !RuleContainer.has(rule)) { return true; }\n\n    return RuleContainer.isImmediate(rule);\n  }).some(function (rule) {\n    var ruleOptions = RuleContainer.getOptions(rule);\n    var result = this$1._test(field, value, { name: rule, params: field.rules[rule], options: ruleOptions });\n    if (isCallable(result.then)) {\n      promises.push(result);\n    } else if (!result.valid && this$1._shouldBail(field)) {\n      errors.push.apply(errors, result.errors);\n      isExitEarly = true;\n    } else {\n      // promisify the result.\n      promises.push(new Promise(function (resolve) { return resolve(result); }));\n    }\n\n    return isExitEarly;\n  });\n\n  if (isExitEarly) {\n    return Promise.resolve({ valid: false, errors: errors, id: field.id, field: field.name, scope: field.scope });\n  }\n\n  return Promise.all(promises).then(function (results) {\n    return results.reduce(function (prev, v) {\n        var ref;\n\n      if (!v.valid) {\n        (ref = prev.errors).push.apply(ref, v.errors);\n      }\n\n      prev.valid = prev.valid && v.valid;\n\n      return prev;\n    }, { valid: true, errors: errors, id: field.id, field: field.name, scope: field.scope });\n  });\n};\n\nObject.defineProperties( Validator.prototype, prototypeAccessors$4 );\nObject.defineProperties( Validator, staticAccessors$1 );\n\n// \n\nvar normalizeValue = function (value) {\n  if (isObject(value)) {\n    return Object.keys(value).reduce(function (prev, key) {\n      prev[key] = normalizeValue(value[key]);\n\n      return prev;\n    }, {});\n  }\n\n  if (isCallable(value)) {\n    return value('{0}', ['{1}', '{2}', '{3}']);\n  }\n\n  return value;\n};\n\nvar normalizeFormat = function (locale) {\n  // normalize messages\n  var dictionary = {};\n  if (locale.messages) {\n    dictionary.messages = normalizeValue(locale.messages);\n  }\n\n  if (locale.custom) {\n    dictionary.custom = normalizeValue(locale.custom);\n  }\n\n  if (locale.attributes) {\n    dictionary.attributes = locale.attributes;\n  }\n\n  if (!isNullOrUndefined(locale.dateFormat)) {\n    dictionary.dateFormat = locale.dateFormat;\n  }\n\n  return dictionary;\n};\n\nvar I18nDictionary = function I18nDictionary (i18n, rootKey) {\n  this.i18n = i18n;\n  this.rootKey = rootKey;\n};\n\nvar prototypeAccessors$5 = { locale: { configurable: true } };\n\nprototypeAccessors$5.locale.get = function () {\n  return this.i18n.locale;\n};\n\nprototypeAccessors$5.locale.set = function (value) {\n  warn('Cannot set locale from the validator when using vue-i18n, use i18n.locale setter instead');\n};\n\nI18nDictionary.prototype.getDateFormat = function getDateFormat (locale) {\n  return this.i18n.getDateTimeFormat(locale || this.locale);\n};\n\nI18nDictionary.prototype.setDateFormat = function setDateFormat (locale, value) {\n  this.i18n.setDateTimeFormat(locale || this.locale, value);\n};\n\nI18nDictionary.prototype.getMessage = function getMessage (_, key, data) {\n  var path = (this.rootKey) + \".messages.\" + key;\n  var dataOptions = data;\n\n  if (Array.isArray(data)) {\n    dataOptions = [].concat.apply([], data);\n  }\n\n  if (this.i18n.te(path)) {\n    return this.i18n.t(path, dataOptions);\n  }\n\n  // fallback to the fallback message\n  if (this.i18n.te(path, this.i18n.fallbackLocale)) {\n    return this.i18n.t(path, this.i18n.fallbackLocale, dataOptions);\n  }\n\n  // fallback to the root message\n  return this.i18n.t(((this.rootKey) + \".messages._default\"), dataOptions);\n};\n\nI18nDictionary.prototype.getAttribute = function getAttribute (_, key, fallback) {\n    if ( fallback === void 0 ) fallback = '';\n\n  var path = (this.rootKey) + \".attributes.\" + key;\n  if (this.i18n.te(path)) {\n    return this.i18n.t(path);\n  }\n\n  return fallback;\n};\n\nI18nDictionary.prototype.getFieldMessage = function getFieldMessage (_, field, key, data) {\n  var path = (this.rootKey) + \".custom.\" + field + \".\" + key;\n  if (this.i18n.te(path)) {\n    return this.i18n.t(path, data);\n  }\n\n  return this.getMessage(_, key, data);\n};\n\nI18nDictionary.prototype.merge = function merge$1 (dictionary) {\n    var this$1 = this;\n\n  Object.keys(dictionary).forEach(function (localeKey) {\n      var obj;\n\n    // i18n doesn't deep merge\n    // first clone the existing locale (avoid mutations to locale)\n    var clone = merge({}, getPath((localeKey + \".\" + (this$1.rootKey)), this$1.i18n.messages, {}));\n    // Merge cloned locale with new one\n    var locale = merge(clone, normalizeFormat(dictionary[localeKey]));\n    this$1.i18n.mergeLocaleMessage(localeKey, ( obj = {}, obj[this$1.rootKey] = locale, obj ));\n    if (locale.dateFormat) {\n      this$1.i18n.setDateTimeFormat(localeKey, locale.dateFormat);\n    }\n  });\n};\n\nI18nDictionary.prototype.setMessage = function setMessage (locale, key, value) {\n    var obj, obj$1;\n\n  this.merge(( obj$1 = {}, obj$1[locale] = {\n      messages: ( obj = {}, obj[key] = value, obj )\n    }, obj$1 ));\n};\n\nI18nDictionary.prototype.setAttribute = function setAttribute (locale, key, value) {\n    var obj, obj$1;\n\n  this.merge(( obj$1 = {}, obj$1[locale] = {\n      attributes: ( obj = {}, obj[key] = value, obj )\n    }, obj$1 ));\n};\n\nObject.defineProperties( I18nDictionary.prototype, prototypeAccessors$5 );\n\nvar aggressive = function () { return ({\n  on: ['input']\n}); };\n\nvar lazy = function () { return ({\n  on: ['change']\n}); };\n\nvar eager = function (ref) {\n  var errors = ref.errors;\n\n  if (errors.length) {\n    return {\n      on: ['input']\n    };\n  }\n\n  return {\n    on: ['change', 'blur']\n  };\n};\n\nvar passive = function () { return ({\n  on: []\n}); };\n\nvar modes = {\n  aggressive: aggressive,\n  eager: eager,\n  passive: passive,\n  lazy: lazy\n};\n\n// \n\nvar Vue;\nvar pendingPlugins;\nvar pluginInstance;\n\nvar VeeValidate$1 = function VeeValidate (config, _Vue) {\n  this.configure(config);\n  pluginInstance = this;\n  if (_Vue) {\n    Vue = _Vue;\n  }\n  this._validator = setValidator(\n    new Validator(null, { fastExit: config && config.fastExit }, this)\n  );\n  this._initVM(this.config);\n  this._initI18n(this.config);\n};\n\nvar prototypeAccessors$6 = { i18nDriver: { configurable: true },config: { configurable: true } };\nvar staticAccessors$2 = { i18nDriver: { configurable: true },config: { configurable: true } };\n\nVeeValidate$1.setI18nDriver = function setI18nDriver (driver, instance) {\n  DictionaryResolver.setDriver(driver, instance);\n};\n\nVeeValidate$1.configure = function configure (cfg) {\n  setConfig(cfg);\n};\n\nVeeValidate$1.setMode = function setMode (mode, implementation) {\n  setConfig({ mode: mode });\n  if (!implementation) {\n    return;\n  }\n\n  if (!isCallable(implementation)) {\n    throw new Error('A mode implementation must be a function');\n  }\n\n  modes[mode] = implementation;\n};\n\nVeeValidate$1.use = function use (plugin, options) {\n    if ( options === void 0 ) options = {};\n\n  if (!isCallable(plugin)) {\n    return warn('The plugin must be a callable function');\n  }\n\n  // Don't install plugins until vee-validate is installed.\n  if (!pluginInstance) {\n    if (!pendingPlugins) {\n      pendingPlugins = [];\n    }\n    pendingPlugins.push({ plugin: plugin, options: options });\n    return;\n  }\n\n  plugin({ Validator: Validator, ErrorBag: ErrorBag, Rules: Validator.rules }, options);\n};\nVeeValidate$1.install = function install (_Vue, opts) {\n  if (Vue && _Vue === Vue) {\n    if (true) {\n      warn('already installed, Vue.use(VeeValidate) should only be called once.');\n    }\n    return;\n  }\n\n  Vue = _Vue;\n  pluginInstance = new VeeValidate$1(opts);\n  // inject the plugin container statically into the validator class\n  Validator.$vee = pluginInstance;\n\n  detectPassiveSupport();\n\n  Vue.mixin(mixin);\n  Vue.directive('validate', directive);\n  if (pendingPlugins) {\n    pendingPlugins.forEach(function (ref) {\n        var plugin = ref.plugin;\n        var options = ref.options;\n\n      VeeValidate$1.use(plugin, options);\n    });\n    pendingPlugins = null;\n  }\n};\n\nprototypeAccessors$6.i18nDriver.get = function () {\n  return DictionaryResolver.getDriver();\n};\n\nstaticAccessors$2.i18nDriver.get = function () {\n  return DictionaryResolver.getDriver();\n};\n\nprototypeAccessors$6.config.get = function () {\n  return getConfig();\n};\n\nstaticAccessors$2.config.get = function () {\n  return getConfig();\n};\n\nVeeValidate$1.prototype._initVM = function _initVM (config) {\n    var this$1 = this;\n\n  this._vm = new Vue({\n    data: function () { return ({\n      errors: this$1._validator.errors,\n      fields: this$1._validator.fields\n    }); }\n  });\n};\n\nVeeValidate$1.prototype._initI18n = function _initI18n (config) {\n    var this$1 = this;\n\n  var dictionary = config.dictionary;\n    var i18n = config.i18n;\n    var i18nRootKey = config.i18nRootKey;\n    var locale = config.locale;\n  var onLocaleChanged = function () {\n    if (dictionary) {\n      this$1.i18nDriver.merge(dictionary);\n    }\n\n    this$1._validator.errors.regenerate();\n  };\n\n  // i18 is being used for localization.\n  if (i18n) {\n    VeeValidate$1.setI18nDriver('i18n', new I18nDictionary(i18n, i18nRootKey));\n    i18n._vm.$watch('locale', onLocaleChanged);\n  } else if (typeof window !== 'undefined') {\n    this._vm.$on('localeChanged', onLocaleChanged);\n  }\n\n  if (dictionary) {\n    this.i18nDriver.merge(dictionary);\n  }\n\n  if (locale && !i18n) {\n    this._validator.localize(locale);\n  }\n};\n\nVeeValidate$1.prototype.configure = function configure (cfg) {\n  setConfig(cfg);\n};\n\nObject.defineProperties( VeeValidate$1.prototype, prototypeAccessors$6 );\nObject.defineProperties( VeeValidate$1, staticAccessors$2 );\n\nVeeValidate$1.mixin = mixin;\nVeeValidate$1.directive = directive;\nVeeValidate$1.Validator = Validator;\nVeeValidate$1.ErrorBag = ErrorBag;\n\n/**\n * Formates file size.\n *\n * @param {Number|String} size\n */\nvar formatFileSize = function (size) {\n  var units = ['Byte', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  var threshold = 1024;\n  size = Number(size) * threshold;\n  var i = size === 0 ? 0 : Math.floor(Math.log(size) / Math.log(threshold));\n  return (((size / Math.pow(threshold, i)).toFixed(2) * 1) + \" \" + (units[i]));\n};\n\n/**\n * Checks if vee-validate is defined globally.\n */\nvar isDefinedGlobally = function () {\n  return typeof VeeValidate !== 'undefined';\n};\n\nvar obj;\n\nvar messages = {\n  _default: function (field) { return (\"The \" + field + \" value is not valid.\"); },\n  after: function (field, ref) {\n    var target = ref[0];\n    var inclusion = ref[1];\n\n    return (\"The \" + field + \" must be after \" + (inclusion ? 'or equal to ' : '') + target + \".\");\n},\n  alpha: function (field) { return (\"The \" + field + \" field may only contain alphabetic characters.\"); },\n  alpha_dash: function (field) { return (\"The \" + field + \" field may contain alpha-numeric characters as well as dashes and underscores.\"); },\n  alpha_num: function (field) { return (\"The \" + field + \" field may only contain alpha-numeric characters.\"); },\n  alpha_spaces: function (field) { return (\"The \" + field + \" field may only contain alphabetic characters as well as spaces.\"); },\n  before: function (field, ref) {\n    var target = ref[0];\n    var inclusion = ref[1];\n\n    return (\"The \" + field + \" must be before \" + (inclusion ? 'or equal to ' : '') + target + \".\");\n},\n  between: function (field, ref) {\n    var min = ref[0];\n    var max = ref[1];\n\n    return (\"The \" + field + \" field must be between \" + min + \" and \" + max + \".\");\n},\n  confirmed: function (field) { return (\"The \" + field + \" confirmation does not match.\"); },\n  credit_card: function (field) { return (\"The \" + field + \" field is invalid.\"); },\n  date_between: function (field, ref) {\n    var min = ref[0];\n    var max = ref[1];\n\n    return (\"The \" + field + \" must be between \" + min + \" and \" + max + \".\");\n},\n  date_format: function (field, ref) {\n    var format = ref[0];\n\n    return (\"The \" + field + \" must be in the format \" + format + \".\");\n},\n  decimal: function (field, ref) {\n    if ( ref === void 0 ) ref = [];\n    var decimals = ref[0]; if ( decimals === void 0 ) decimals = '*';\n\n    return (\"The \" + field + \" field must be numeric and may contain\" + (!decimals || decimals === '*' ? '' : ' ' + decimals) + \" decimal points.\");\n},\n  digits: function (field, ref) {\n    var length = ref[0];\n\n    return (\"The \" + field + \" field must be numeric and contains exactly \" + length + \" digits.\");\n},\n  dimensions: function (field, ref) {\n    var width = ref[0];\n    var height = ref[1];\n\n    return (\"The \" + field + \" field must be \" + width + \" pixels by \" + height + \" pixels.\");\n},\n  email: function (field) { return (\"The \" + field + \" field must be a valid email.\"); },\n  excluded: function (field) { return (\"The \" + field + \" field must be a valid value.\"); },\n  ext: function (field) { return (\"The \" + field + \" field must be a valid file.\"); },\n  image: function (field) { return (\"The \" + field + \" field must be an image.\"); },\n  included: function (field) { return (\"The \" + field + \" field must be a valid value.\"); },\n  integer: function (field) { return (\"The \" + field + \" field must be an integer.\"); },\n  ip: function (field) { return (\"The \" + field + \" field must be a valid ip address.\"); },\n  ip_or_fqdn: function (field) { return (\"The \" + field + \" field must be a valid ip address or FQDN.\"); },\n  length: function (field, ref) {\n    var length = ref[0];\n    var max = ref[1];\n\n    if (max) {\n      return (\"The \" + field + \" length must be between \" + length + \" and \" + max + \".\");\n    }\n\n    return (\"The \" + field + \" length must be \" + length + \".\");\n  },\n  max: function (field, ref) {\n    var length = ref[0];\n\n    return (\"The \" + field + \" field may not be greater than \" + length + \" characters.\");\n},\n  max_value: function (field, ref) {\n    var max = ref[0];\n\n    return (\"The \" + field + \" field must be \" + max + \" or less.\");\n},\n  mimes: function (field) { return (\"The \" + field + \" field must have a valid file type.\"); },\n  min: function (field, ref) {\n    var length = ref[0];\n\n    return (\"The \" + field + \" field must be at least \" + length + \" characters.\");\n},\n  min_value: function (field, ref) {\n    var min = ref[0];\n\n    return (\"The \" + field + \" field must be \" + min + \" or more.\");\n},\n  numeric: function (field) { return (\"The \" + field + \" field may only contain numeric characters.\"); },\n  regex: function (field) { return (\"The \" + field + \" field format is invalid.\"); },\n  required: function (field) { return (\"The \" + field + \" field is required.\"); },\n  required_if: function (field, ref) {\n    var target = ref[0];\n\n    return (\"The \" + field + \" field is required when the \" + target + \" field has this value.\");\n},\n  size: function (field, ref) {\n    var size = ref[0];\n\n    return (\"The \" + field + \" size must be less than \" + (formatFileSize(size)) + \".\");\n},\n  url: function (field) { return (\"The \" + field + \" field is not a valid URL.\"); }\n};\n\nvar locale = {\n  name: 'en',\n  messages: messages,\n  attributes: {}\n};\n\nif (isDefinedGlobally()) {\n  // eslint-disable-next-line\n  VeeValidate.Validator.localize(( obj = {}, obj[locale.name] = locale, obj ));\n}\n\nfunction toInteger (dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number)\n}\n\nvar MILLISECONDS_IN_MINUTE = 60000;\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nfunction getTimezoneOffsetInMilliseconds (dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = date.getTimezoneOffset();\n  date.setSeconds(0, 0);\n  var millisecondsPartOfTimezoneOffset = date.getTime() % MILLISECONDS_IN_MINUTE;\n\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset\n}\n\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE$1 = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\n\nvar patterns = {\n  dateTimeDelimeter: /[T ]/,\n  plainTime: /:/,\n  timeZoneDelimeter: /[Z ]/i,\n\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [\n    /^([+-]\\d{2})$/, // 0 additional digits\n    /^([+-]\\d{3})$/, // 1 additional digit\n    /^([+-]\\d{4})$/ // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [\n    /^([+-]\\d{4})/, // 0 additional digits\n    /^([+-]\\d{5})/, // 1 additional digit\n    /^([+-]\\d{6})/ // 2 additional digits\n  ],\n\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n\n  // timezone tokens\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-])(\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/\n};\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nfunction toDate (argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  if (argument === null) {\n    return new Date(NaN)\n  }\n\n  var options = dirtyOptions || {};\n\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2')\n  }\n\n  // Clone the date\n  if (argument instanceof Date ||\n    (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (typeof argument === 'number' || Object.prototype.toString.call(argument) === '[object Number]') {\n    return new Date(argument)\n  } else if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN)\n  }\n\n  var dateStrings = splitDateString(argument);\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n  var year = parseYearResult.year;\n  var restDateString = parseYearResult.restDateString;\n\n  var date = parseDate(restDateString, year);\n\n  if (isNaN(date)) {\n    return new Date(NaN)\n  }\n\n  if (date) {\n    var timestamp = date.getTime();\n    var time = 0;\n    var offset;\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time);\n\n      if (isNaN(time)) {\n        return new Date(NaN)\n      }\n    }\n\n    if (dateStrings.timezone) {\n      offset = parseTimezone(dateStrings.timezone);\n      if (isNaN(offset)) {\n        return new Date(NaN)\n      }\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\n    }\n\n    return new Date(timestamp + time + offset)\n  } else {\n    return new Date(NaN)\n  }\n}\n\nfunction splitDateString (dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimeter);\n  var timeString;\n\n  if (patterns.plainTime.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    if (patterns.timeZoneDelimeter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear (dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits];\n  var patternYYYYY = patterns.YYYYY[additionalDigits];\n\n  var token;\n\n  // YYYY or ±YYYYY\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n  if (token) {\n    var yearString = token[1];\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    }\n  }\n\n  // YY or ±YYY\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n  if (token) {\n    var centuryString = token[1];\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  }\n}\n\nfunction parseDate (dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token;\n  var date;\n  var month;\n  var week;\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0);\n    date.setUTCFullYear(year);\n    return date\n  }\n\n  // YYYY-MM\n  token = patterns.MM.exec(dateString);\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n\n    if (!validateDate(year, month)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, month);\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = patterns.DDD.exec(dateString);\n  if (token) {\n    date = new Date(0);\n    var dayOfYear = parseInt(token[1], 10);\n\n    if (!validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, 0, dayOfYear);\n    return date\n  }\n\n  // YYYY-MM-DD or YYYYMMDD\n  token = patterns.MMDD.exec(dateString);\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    var day = parseInt(token[2], 10);\n\n    if (!validateDate(year, month, day)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, month, day);\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = patterns.Www.exec(dateString);\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n\n    if (!validateWeekDate(year, week)) {\n      return new Date(NaN)\n    }\n\n    return dayOfISOWeekYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = patterns.WwwD.exec(dateString);\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    var dayOfWeek = parseInt(token[2], 10) - 1;\n\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN)\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime (timeString) {\n  var token;\n  var hours;\n  var minutes;\n\n  // hh\n  token = patterns.HH.exec(timeString);\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'));\n\n    if (!validateTime(hours)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = patterns.HHMM.exec(timeString);\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseFloat(token[2].replace(',', '.'));\n\n    if (!validateTime(hours, minutes)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE$1\n  }\n\n  // hh:mm:ss or hhmmss\n  token = patterns.HHMMSS.exec(timeString);\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseInt(token[2], 10);\n    var seconds = parseFloat(token[3].replace(',', '.'));\n\n    if (!validateTime(hours, minutes, seconds)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE$1 +\n      seconds * 1000\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction parseTimezone (timezoneString) {\n  var token;\n  var absoluteOffset;\n\n  // Z\n  token = patterns.timezoneZ.exec(timezoneString);\n  if (token) {\n    return 0\n  }\n\n  var hours;\n\n  // ±hh\n  token = patterns.timezoneHH.exec(timezoneString);\n  if (token) {\n    hours = parseInt(token[2], 10);\n\n    if (!validateTimezone(hours)) {\n      return NaN\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR;\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = patterns.timezoneHHMM.exec(timezoneString);\n  if (token) {\n    hours = parseInt(token[2], 10);\n    var minutes = parseInt(token[3], 10);\n\n    if (!validateTimezone(hours, minutes)) {\n      return NaN\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE$1;\n    return (token[1] === '+') ? -absoluteOffset : absoluteOffset\n  }\n\n  return 0\n}\n\nfunction dayOfISOWeekYear (isoWeekYear, week, day) {\n  week = week || 0;\n  day = day || 0;\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date\n}\n\n// Validation functions\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex (year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)\n}\n\nfunction validateDate (year, month, date) {\n  if (month < 0 || month > 11) {\n    return false\n  }\n\n  if (date != null) {\n    if (date < 1) {\n      return false\n    }\n\n    var isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n      return false\n    }\n    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction validateDayOfYearDate (year, dayOfYear) {\n  if (dayOfYear < 1) {\n    return false\n  }\n\n  var isLeapYear = isLeapYearIndex(year);\n  if (isLeapYear && dayOfYear > 366) {\n    return false\n  }\n  if (!isLeapYear && dayOfYear > 365) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateWeekDate (year, week, day) {\n  if (week < 0 || week > 52) {\n    return false\n  }\n\n  if (day != null && (day < 0 || day > 6)) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateTime (hours, minutes, seconds) {\n  if (hours != null && (hours < 0 || hours >= 25)) {\n    return false\n  }\n\n  if (minutes != null && (minutes < 0 || minutes >= 60)) {\n    return false\n  }\n\n  if (seconds != null && (seconds < 0 || seconds >= 60)) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateTimezone (hours, minutes) {\n  if (minutes != null && (minutes < 0 || minutes > 59)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @param {Date|String|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nfunction addMilliseconds (dirtyDate, dirtyAmount, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var timestamp = toDate(dirtyDate, dirtyOptions).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount)\n}\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {*} date - the date to check\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid('2014-02-31')\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\nfunction isValid (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  return !isNaN(date)\n}\n\nvar formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n\n  halfAMinute: 'half a minute',\n\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nfunction formatDistance (token, count, options) {\n  options = options || {};\n\n  var result;\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result\n    } else {\n      return result + ' ago'\n    }\n  }\n\n  return result\n}\n\nfunction buildFormatLongFn (args) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {};\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format\n  }\n}\n\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\n\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\n\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\n\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\n\nvar formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nfunction formatRelative (token, date, baseDate, options) {\n  return formatRelativeLocale[token]\n}\n\nfunction buildLocalizeFn (args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var context = options.context ? String(options.context) : 'standalone';\n\n    var valuesArray;\n    if (context === 'formatting' && args.formattingValues) {\n      valuesArray = args.formattingValues[width] || args.formattingValues[args.defaultFormattingWidth];\n    } else {\n      valuesArray = args.values[width] || args.values[args.defaultWidth];\n    }\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;\n    return valuesArray[index]\n  }\n}\n\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\n\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\n\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\n\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nfunction ordinalNumber (dirtyNumber, dirtyOptions) {\n  var number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st'\n      case 2:\n        return number + 'nd'\n      case 3:\n        return number + 'rd'\n    }\n  }\n  return number + 'th'\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1\n    }\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaulFormattingWidth: 'wide'\n  })\n};\n\nfunction buildMatchPatternFn (args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) {\n      return null\n    }\n    var matchedString = matchResult[0];\n\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) {\n      return null\n    }\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    }\n  }\n}\n\nfunction buildMatchFn (args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var width = options.width;\n\n    var matchPattern = (width && args.matchPatterns[width]) || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null\n    }\n    var matchedString = matchResult[0];\n\n    var parsePatterns = (width && args.parsePatterns[width]) || args.parsePatterns[args.defaultParseWidth];\n\n    var value;\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = parsePatterns.findIndex(function (pattern) {\n        return pattern.test(string)\n      });\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(string)\n      });\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    }\n  }\n}\n\nfunction findKey (object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key\n    }\n  }\n}\n\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\n\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\n\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\n\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\n\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\n\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\n\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10)\n    }\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1\n    }\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale$1 = {\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1\n  }\n};\n\nvar MILLISECONDS_IN_DAY = 86400000;\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction getUTCDayOfYear (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction startOfUTCISOWeek (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var weekStartsOn = 1;\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction getUTCISOWeekYear (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear, dirtyOptions);\n\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year\n  } else {\n    return year - 1\n  }\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction startOfUTCISOWeekYear (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var year = getUTCISOWeekYear(dirtyDate, dirtyOptions);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary, dirtyOptions);\n  return date\n}\n\nvar MILLISECONDS_IN_WEEK = 604800000;\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction getUTCISOWeek (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var diff = startOfUTCISOWeek(date, dirtyOptions).getTime() - startOfUTCISOWeekYear(date, dirtyOptions).getTime();\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction startOfUTCWeek (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')\n  }\n\n  var date = toDate(dirtyDate, options);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction getUTCWeekYear (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale &&\n    locale.options &&\n    locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate =\n    localeFirstWeekContainsDate == null\n      ? 1\n      : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate =\n    options.firstWeekContainsDate == null\n      ? defaultFirstWeekContainsDate\n      : toInteger(options.firstWeekContainsDate);\n\n  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively')\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year\n  } else {\n    return year - 1\n  }\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction startOfUTCWeekYear (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale &&\n    locale.options &&\n    locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate =\n    localeFirstWeekContainsDate == null\n      ? 1\n      : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate =\n    options.firstWeekContainsDate == null\n      ? defaultFirstWeekContainsDate\n      : toInteger(options.firstWeekContainsDate);\n\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date\n}\n\nvar MILLISECONDS_IN_WEEK$1 = 604800000;\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction getUTCWeek (dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var diff = startOfUTCWeek(date, dirtyOptions).getTime() - startOfUTCWeekYear(date, dirtyOptions).getTime();\n\n  // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n  return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1\n}\n\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {width: 'abbreviated'})\n      // A, B\n      case 'GGGGG':\n        return localize.era(era, {width: 'narrow'})\n      // Anno Domini, Before Christ\n      case 'GGGG':\n      default:\n        return localize.era(era, {width: 'wide'})\n    }\n  },\n\n  // Year\n  y: function (date, token, localize, options) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    var signedYear = date.getUTCFullYear();\n\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n\n    // Two digit year\n    if (token === 'yy') {\n      var twoDigitYear = year % 100;\n      return addLeadingZeros(twoDigitYear, 2)\n    }\n\n    // Ordinal number\n    if (token === 'yo') {\n      return localize.ordinalNumber(year, {unit: 'year'})\n    }\n\n    // Padding\n    return addLeadingZeros(year, token.length)\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options);\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2)\n    }\n\n    // Ordinal number\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {unit: 'year'})\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length)\n  },\n\n  // ISO week-numbering year\n  R: function (date, token, localize, options) {\n    var isoWeekYear = getUTCISOWeekYear(date, options);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length)\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token, localize, options) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length)\n  },\n\n  // Quarter\n  Q: function (date, token, localize, options) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter)\n      // 01, 02, 03, 04\n      case 'QQ':\n        return addLeadingZeros(quarter, 2)\n      // 1st, 2nd, 3rd, 4th\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {unit: 'quarter'})\n      // Q1, Q2, Q3, Q4\n      case 'QQQ':\n        return localize.quarter(quarter, {width: 'abbreviated', context: 'formatting'})\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case 'QQQQQ':\n        return localize.quarter(quarter, {width: 'narrow', context: 'formatting'})\n      // 1st quarter, 2nd quarter, ...\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {width: 'wide', context: 'formatting'})\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize, options) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter)\n      // 01, 02, 03, 04\n      case 'qq':\n        return addLeadingZeros(quarter, 2)\n      // 1st, 2nd, 3rd, 4th\n      case 'qo':\n        return localize.ordinalNumber(quarter, {unit: 'quarter'})\n      // Q1, Q2, Q3, Q4\n      case 'qqq':\n        return localize.quarter(quarter, {width: 'abbreviated', context: 'standalone'})\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case 'qqqqq':\n        return localize.quarter(quarter, {width: 'narrow', context: 'standalone'})\n      // 1st quarter, 2nd quarter, ...\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {width: 'wide', context: 'standalone'})\n    }\n  },\n\n  // Month\n  M: function (date, token, localize, options) {\n    var month = date.getUTCMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'M':\n        return String(month + 1)\n      // 01, 02, ..., 12\n      case 'MM':\n        return addLeadingZeros(month + 1, 2)\n      // 1st, 2nd, ..., 12th\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {unit: 'month'})\n      // Jan, Feb, ..., Dec\n      case 'MMM':\n        return localize.month(month, {width: 'abbreviated', context: 'formatting'})\n      // J, F, ..., D\n      case 'MMMMM':\n        return localize.month(month, {width: 'narrow', context: 'formatting'})\n      // January, February, ..., December\n      case 'MMMM':\n      default:\n        return localize.month(month, {width: 'wide', context: 'formatting'})\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize, options) {\n    var month = date.getUTCMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1)\n      // 01, 02, ..., 12\n      case 'LL':\n        return addLeadingZeros(month + 1, 2)\n      // 1st, 2nd, ..., 12th\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {unit: 'month'})\n      // Jan, Feb, ..., Dec\n      case 'LLL':\n        return localize.month(month, {width: 'abbreviated', context: 'standalone'})\n      // J, F, ..., D\n      case 'LLLLL':\n        return localize.month(month, {width: 'narrow', context: 'standalone'})\n      // January, February, ..., December\n      case 'LLLL':\n      default:\n        return localize.month(month, {width: 'wide', context: 'standalone'})\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {unit: 'week'})\n    }\n\n    return addLeadingZeros(week, token.length)\n  },\n\n  // ISO week of year\n  I: function (date, token, localize, options) {\n    var isoWeek = getUTCISOWeek(date, options);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {unit: 'week'})\n    }\n\n    return addLeadingZeros(isoWeek, token.length)\n  },\n\n  // Day of the month\n  d: function (date, token, localize, options) {\n    var dayOfMonth = date.getUTCDate();\n\n    if (token === 'do') {\n      return localize.ordinalNumber(dayOfMonth, {unit: 'date'})\n    }\n\n    return addLeadingZeros(dayOfMonth, token.length)\n  },\n\n  // Day of year\n  D: function (date, token, localize, options) {\n    var dayOfYear = getUTCDayOfYear(date, options);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {unit: 'dayOfYear'})\n    }\n\n    return addLeadingZeros(dayOfYear, token.length)\n  },\n\n  // Day of week\n  E: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {width: 'abbreviated', context: 'formatting'})\n      // T\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {width: 'narrow', context: 'formatting'})\n      // Tu\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {width: 'short', context: 'formatting'})\n      // Tuesday\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {width: 'wide', context: 'formatting'})\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = ((dayOfWeek - options.weekStartsOn + 8) % 7) || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek)\n      // Padded numerical value\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2)\n      // 1st, 2nd, ..., 7th\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {unit: 'day'})\n      case 'eee':\n        return localize.day(dayOfWeek, {width: 'abbreviated', context: 'formatting'})\n      // T\n      case 'eeeee':\n        return localize.day(dayOfWeek, {width: 'narrow', context: 'formatting'})\n      // Tu\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {width: 'short', context: 'formatting'})\n      // Tuesday\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {width: 'wide', context: 'formatting'})\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = ((dayOfWeek - options.weekStartsOn + 8) % 7) || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek)\n      // Padded numberical value\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length)\n      // 1st, 2nd, ..., 7th\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {unit: 'day'})\n      case 'ccc':\n        return localize.day(dayOfWeek, {width: 'abbreviated', context: 'standalone'})\n      // T\n      case 'ccccc':\n        return localize.day(dayOfWeek, {width: 'narrow', context: 'standalone'})\n      // Tu\n      case 'cccccc':\n        return localize.day(dayOfWeek, {width: 'short', context: 'standalone'})\n      // Tuesday\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {width: 'wide', context: 'standalone'})\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek)\n      // 02\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length)\n      // 2nd\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {unit: 'day'})\n      // Tue\n      case 'iii':\n        return localize.day(dayOfWeek, {width: 'abbreviated', context: 'formatting'})\n      // T\n      case 'iiiii':\n        return localize.day(dayOfWeek, {width: 'narrow', context: 'formatting'})\n      // Tu\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {width: 'short', context: 'formatting'})\n      // Tuesday\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {width: 'wide', context: 'formatting'})\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = (hours / 12) >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {width: 'abbreviated', context: 'formatting'})\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {width: 'narrow', context: 'formatting'})\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {width: 'wide', context: 'formatting'})\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = (hours / 12) >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {width: 'abbreviated', context: 'formatting'})\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {width: 'narrow', context: 'formatting'})\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {width: 'wide', context: 'formatting'})\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {width: 'abbreviated', context: 'formatting'})\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {width: 'narrow', context: 'formatting'})\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {width: 'wide', context: 'formatting'})\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize, options) {\n    var hours = date.getUTCHours() % 12;\n\n    if (hours === 0) {\n      hours = 12;\n    }\n\n    if (token === 'ho') {\n      return localize.ordinalNumber(hours, {unit: 'hour'})\n    }\n\n    return addLeadingZeros(hours, token.length)\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize, options) {\n    var hours = date.getUTCHours();\n\n    if (token === 'Ho') {\n      return localize.ordinalNumber(hours, {unit: 'hour'})\n    }\n\n    return addLeadingZeros(hours, token.length)\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize, options) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {unit: 'hour'})\n    }\n\n    return addLeadingZeros(hours, token.length)\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize, options) {\n    var hours = date.getUTCHours();\n\n    if (hours === 0) {\n      hours = 24;\n    }\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {unit: 'hour'})\n    }\n\n    return addLeadingZeros(hours, token.length)\n  },\n\n  // Minute\n  m: function (date, token, localize, options) {\n    var minutes = date.getUTCMinutes();\n\n    if (token === 'mo') {\n      return localize.ordinalNumber(minutes, {unit: 'minute'})\n    }\n\n    return addLeadingZeros(minutes, token.length)\n  },\n\n  // Second\n  s: function (date, token, localize, options) {\n    var seconds = date.getUTCSeconds();\n\n    if (token === 'so') {\n      return localize.ordinalNumber(seconds, {unit: 'second'})\n    }\n\n    return addLeadingZeros(seconds, token.length)\n  },\n\n  // Fraction of second\n  S: function (date, token, localize, options) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, numberOfDigits)\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z'\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset)\n\n      // Hours, minutes and optional seconds without `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case 'XXXX':\n      case 'XX': // Hours and minutes without `:` delimeter\n        return formatTimezone(timezoneOffset)\n\n      // Hours, minutes and optional seconds with `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimeter\n      default:\n        return formatTimezone(timezoneOffset, ':')\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset)\n\n      // Hours, minutes and optional seconds without `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case 'xxxx':\n      case 'xx': // Hours and minutes without `:` delimeter\n        return formatTimezone(timezoneOffset)\n\n      // Hours, minutes and optional seconds with `:` delimeter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimeter\n      default:\n        return formatTimezone(timezoneOffset, ':')\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':')\n      // Long\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':')\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':')\n      // Long\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':')\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length)\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length)\n  }\n};\n\nfunction addLeadingZeros (number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n  return sign + output\n}\n\nfunction formatTimezone (offset, dirtyDelimeter) {\n  var delimeter = dirtyDelimeter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimeter + minutes\n}\n\nfunction formatTimezoneWithOptionalMinutes (offset, dirtyDelimeter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2)\n  }\n  return formatTimezone(offset, dirtyDelimeter)\n}\n\nfunction formatTimezoneShort (offset, dirtyDelimeter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours)\n  }\n  var delimeter = dirtyDelimeter || '';\n  return sign + String(hours) + delimeter + addLeadingZeros(minutes, 2)\n}\n\nfunction dateLongFormatter (pattern, formatLong, options) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({width: 'short'})\n    case 'PP':\n      return formatLong.date({width: 'medium'})\n    case 'PPP':\n      return formatLong.date({width: 'long'})\n    case 'PPPP':\n    default:\n      return formatLong.date({width: 'full'})\n  }\n}\n\nfunction timeLongFormatter (pattern, formatLong, options) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({width: 'short'})\n    case 'pp':\n      return formatLong.time({width: 'medium'})\n    case 'ppp':\n      return formatLong.time({width: 'long'})\n    case 'pppp':\n    default:\n      return formatLong.time({width: 'full'})\n  }\n}\n\nfunction dateTimeLongFormatter (pattern, formatLong, options) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong, options)\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({width: 'short'});\n      break\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({width: 'medium'});\n      break\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({width: 'long'});\n      break\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({width: 'full'});\n      break\n  }\n\n  return dateTimeFormat\n    .replace('{{date}}', dateLongFormatter(datePattern, formatLong, options))\n    .replace('{{time}}', timeLongFormatter(timePattern, formatLong, options))\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\n\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * @param {Date|String|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\nfunction subMilliseconds (dirtyDate, dirtyAmount, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount, dirtyOptions)\n}\n\nvar protectedTokens = ['D', 'DD', 'YY', 'YYYY'];\n\nfunction isProtectedToken(token) {\n  return protectedTokens.indexOf(token) !== -1\n}\n\nfunction throwProtectedError(token) {\n  throw new RangeError(\n    '`options.awareOfUnicodeTokens` must be set to `true` to use `' +\n      token +\n      '` token; see: https://git.io/fxCyr'\n  )\n}\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nvar escapedStringRegExp = /^'(.*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\n\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 8     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 8     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          | a..aaa  | AM, PM                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 0001, ..., 999               |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 05/29/1453                        | 7     |\n * |                                 | PP      | May 29, 1453                      | 7     |\n * |                                 | PPP     | May 29th, 1453                    | 7     |\n * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |\n * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. These tokens are often confused with others. See: https://git.io/fxCyr\n *\n * @param {Date|String|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens (`yy`, `yyyy`).\n *   See: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see: https://git.io/fxCyr\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(\n *   new Date(2014, 1, 11),\n *   'MM/dd/yyyy'\n * )\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(\n *   new Date(2014, 6, 2),\n *   \"do 'de' MMMM yyyy\",\n *   {locale: eoLocale}\n * )\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(\n *   new Date(2014, 6, 2, 15),\n *   \"h 'o''clock'\"\n * )\n * //=> \"3 o'clock\"\n */\nfunction format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError(\n      '2 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n\n  var locale = options.locale || locale$1;\n\n  var localeFirstWeekContainsDate =\n    locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate =\n    localeFirstWeekContainsDate == null\n      ? 1\n      : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate =\n    options.firstWeekContainsDate == null\n      ? defaultFirstWeekContainsDate\n      : toInteger(options.firstWeekContainsDate);\n\n  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError(\n      'firstWeekContainsDate must be between 1 and 7 inclusively'\n    )\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn =\n    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn =\n    options.weekStartsOn == null\n      ? defaultWeekStartsOn\n      : toInteger(options.weekStartsOn);\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property')\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property')\n  }\n\n  var originalDate = toDate(dirtyDate, options);\n\n  if (!isValid(originalDate, options)) {\n    return 'Invalid Date'\n  }\n\n  // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset, options);\n\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n\n  var result = formatStr\n    .match(longFormattingTokensRegExp)\n    .map(function(substring) {\n      var firstCharacter = substring[0];\n      if (firstCharacter === 'p' || firstCharacter === 'P') {\n        var longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong, formatterOptions)\n      }\n      return substring\n    })\n    .join('')\n    .match(formattingTokensRegExp)\n    .map(function(substring) {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return \"'\"\n      }\n\n      var firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return cleanEscapedString(substring)\n      }\n\n      var formatter = formatters[firstCharacter];\n      if (formatter) {\n        if (!options.awareOfUnicodeTokens && isProtectedToken(substring)) {\n          throwProtectedError(substring);\n        }\n        return formatter(utcDate, substring, locale.localize, formatterOptions)\n      }\n\n      return substring\n    })\n    .join('');\n\n  return result\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\")\n}\n\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * @param {Date|String|Number} date - the date that should be after the other one to return true\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\nfunction isAfter (dirtyDate, dirtyDateToCompare, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var dateToCompare = toDate(dirtyDateToCompare, dirtyOptions);\n  return date.getTime() > dateToCompare.getTime()\n}\n\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * @param {Date|String|Number} date - the date that should be before the other one to return true\n * @param {Date|String|Number} dateToCompare - the date to compare with\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\nfunction isBefore (dirtyDate, dirtyDateToCompare, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var dateToCompare = toDate(dirtyDateToCompare, dirtyOptions);\n  return date.getTime() < dateToCompare.getTime()\n}\n\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param {*} value - the value to check\n * @param {Options} [options] - the object with options. Unused; present for FP submodule compatibility sake. See [Options]{@link https://date-fns.org/docs/Options}\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * var result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * var result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * var result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * var result = isDate({})\n * //=> false\n */\n\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * @param {Date|String|Number} dateLeft - the first date to compare\n * @param {Date|String|Number} dateRight - the second date to compare\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * var result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0)\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\nfunction isEqual$1 (dirtyLeftDate, dirtyRightDate, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var dateLeft = toDate(dirtyLeftDate, dirtyOptions);\n  var dateRight = toDate(dirtyRightDate, dirtyOptions);\n  return dateLeft.getTime() === dateRight.getTime()\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction setUTCDay (dirtyDate, dirtyDay, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn);\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var day = toInteger(dirtyDay);\n\n  var currentDay = date.getUTCDay();\n\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction setUTCWeek (dirtyDate, dirtyWeek, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var week = toInteger(dirtyWeek);\n  var diff = getUTCWeek(date, dirtyOptions) - week;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction setUTCISODay (dirtyDate, dirtyDay, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var day = toInteger(dirtyDay);\n\n  if (day % 7 === 0) {\n    day = day - 7;\n  }\n\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate, dirtyOptions);\n  var currentDay = date.getUTCDay();\n\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date\n}\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction setUTCISOWeek (dirtyDate, dirtyISOWeek, dirtyOptions) {\n  if (arguments.length < 2) {\n    throw new TypeError('2 arguments required, but only ' + arguments.length + ' present')\n  }\n\n  var date = toDate(dirtyDate, dirtyOptions);\n  var isoWeek = toInteger(dirtyISOWeek);\n  var diff = getUTCISOWeek(date, dirtyOptions) - isoWeek;\n  date.setUTCDate(date.getUTCDate() - diff * 7);\n  return date\n}\n\nvar MILLISECONDS_IN_HOUR$1 = 3600000;\nvar MILLISECONDS_IN_MINUTE$2 = 60000;\nvar MILLISECONDS_IN_SECOND = 1000;\n\nvar numericPatterns = {\n  month: /^(1[0-2]|0?\\d)/, // 0 to 12\n  date: /^(3[0-1]|[0-2]?\\d)/, // 0 to 31\n  dayOfYear: /^(36[0-6]|3[0-5]\\d|[0-2]?\\d?\\d)/, // 0 to 366\n  week: /^(5[0-3]|[0-4]?\\d)/, // 0 to 53\n  hour23h: /^(2[0-3]|[0-1]?\\d)/, // 0 to 23\n  hour24h: /^(2[0-4]|[0-1]?\\d)/, // 0 to 24\n  hour11h: /^(1[0-1]|0?\\d)/, // 0 to 11\n  hour12h: /^(1[0-2]|0?\\d)/, // 0 to 12\n  minute: /^[0-5]?\\d/, // 0 to 59\n  second: /^[0-5]?\\d/, // 0 to 59\n\n  singleDigit: /^\\d/, // 0 to 9\n  twoDigits: /^\\d{1,2}/, // 0 to 99\n  threeDigits: /^\\d{1,3}/, // 0 to 999\n  fourDigits: /^\\d{1,4}/, // 0 to 9999\n\n  anyDigitsSigned: /^-?\\d+/,\n  singleDigitSigned: /^-?\\d/, // 0 to 9, -0 to -9\n  twoDigitsSigned: /^-?\\d{1,2}/, // 0 to 99, -0 to -99\n  threeDigitsSigned: /^-?\\d{1,3}/, // 0 to 999, -0 to -999\n  fourDigitsSigned: /^-?\\d{1,4}/ // 0 to 9999, -0 to -9999\n};\n\nvar timezonePatterns = {\n  basicOptionalMinutes: /^([+-])(\\d{2})(\\d{2})?|Z/,\n  basic: /^([+-])(\\d{2})(\\d{2})|Z/,\n  basicOptionalSeconds: /^([+-])(\\d{2})(\\d{2})((\\d{2}))?|Z/,\n  extended: /^([+-])(\\d{2}):(\\d{2})|Z/,\n  extendedOptionalSeconds: /^([+-])(\\d{2}):(\\d{2})(:(\\d{2}))?|Z/\n};\n\nfunction parseNumericPattern (pattern, string, valueCallback) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null\n  }\n\n  var value = parseInt(matchResult[0], 10);\n\n  return {\n    value: valueCallback ? valueCallback(value) : value,\n    rest: string.slice(matchResult[0].length)\n  }\n}\n\nfunction parseTimezonePattern (pattern, string) {\n  var matchResult = string.match(pattern);\n\n  if (!matchResult) {\n    return null\n  }\n\n  // Input is 'Z'\n  if (matchResult[0] === 'Z') {\n    return {\n      value: 0,\n      rest: string.slice(1)\n    }\n  }\n\n  var sign = matchResult[1] === '+' ? 1 : -1;\n  var hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;\n  var minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;\n  var seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;\n\n  return {\n    value: sign * (\n      hours * MILLISECONDS_IN_HOUR$1 +\n        minutes * MILLISECONDS_IN_MINUTE$2 +\n        seconds * MILLISECONDS_IN_SECOND\n    ),\n    rest: string.slice(matchResult[0].length)\n  }\n}\n\nfunction parseAnyDigitsSigned (string, valueCallback) {\n  return parseNumericPattern(numericPatterns.anyDigitsSigned, string, valueCallback)\n}\n\nfunction parseNDigits (n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigit, string, valueCallback)\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigits, string, valueCallback)\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigits, string, valueCallback)\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigits, string, valueCallback)\n    default:\n      return parseNumericPattern(new RegExp('^\\\\d{1,' + n + '}'), string, valueCallback)\n  }\n}\n\nfunction parseNDigitsSigned (n, string, valueCallback) {\n  switch (n) {\n    case 1:\n      return parseNumericPattern(numericPatterns.singleDigitSigned, string, valueCallback)\n    case 2:\n      return parseNumericPattern(numericPatterns.twoDigitsSigned, string, valueCallback)\n    case 3:\n      return parseNumericPattern(numericPatterns.threeDigitsSigned, string, valueCallback)\n    case 4:\n      return parseNumericPattern(numericPatterns.fourDigitsSigned, string, valueCallback)\n    default:\n      return parseNumericPattern(new RegExp('^-?\\\\d{1,' + n + '}'), string, valueCallback)\n  }\n}\n\nfunction dayPeriodEnumToHours (enumValue) {\n  switch (enumValue) {\n    case 'morning':\n      return 4\n    case 'evening':\n      return 17\n    case 'pm':\n    case 'noon':\n    case 'afternoon':\n      return 12\n    case 'am':\n    case 'midnight':\n    case 'night':\n    default:\n      return 0\n  }\n}\n\nfunction normalizeTwoDigitYear (twoDigitYear, currentYear) {\n  var isCommonEra = currentYear > 0;\n  // Absolute number of the current year:\n  // 1 -> 1 AC\n  // 0 -> 1 BC\n  // -1 -> 2 BC\n  var absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;\n\n  var result;\n  if (absCurrentYear <= 50) {\n    result = twoDigitYear || 100;\n  } else {\n    var rangeEnd = absCurrentYear + 50;\n    var rangeEndCentury = Math.floor(rangeEnd / 100) * 100;\n    var isPreviousCentury = twoDigitYear >= rangeEnd % 100;\n    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);\n  }\n\n  return isCommonEra ? result : 1 - result\n}\n\nvar DAYS_IN_MONTH$1 = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR$1 = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n// User for validation\nfunction isLeapYearIndex$1 (year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)\n}\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |\n * |  p  |                                |  P  |                                |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n */\nvar parsers = {\n  // Era\n  G: {\n    priority: 140,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        // AD, BC\n        case 'G':\n        case 'GG':\n        case 'GGG':\n          return match.era(string, {width: 'abbreviated'}) ||\n            match.era(string, {width: 'narrow'})\n        // A, B\n        case 'GGGGG':\n          return match.era(string, {width: 'narrow'})\n        // Anno Domini, Before Christ\n        case 'GGGG':\n        default:\n          return match.era(string, {width: 'wide'}) ||\n            match.era(string, {width: 'abbreviated'}) ||\n            match.era(string, {width: 'narrow'})\n      }\n    },\n    set: function (date, value, options) {\n      // Sets year 10 BC if BC, or 10 AC if AC\n      date.setUTCFullYear(value === 1 ? 10 : -9, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Year\n  y: {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    priority: 130,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'yy'\n        }\n      };\n\n      switch (token) {\n        case 'y':\n          return parseNDigits(4, string, valueCallback)\n        case 'yo':\n          return match.ordinalNumber(string, {unit: 'year', valueCallback: valueCallback})\n        default:\n          return parseNDigits(token.length, string, valueCallback)\n      }\n    },\n    validate: function (date, value, options) {\n      return value.isTwoDigitYear || value.year > 0\n    },\n    set: function (date, value, options) {\n      var currentYear = getUTCWeekYear(date, options);\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, 1);\n        date.setUTCHours(0, 0, 0, 0);\n        return date\n      }\n\n      var year = currentYear > 0 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Local week-numbering year\n  Y: {\n    priority: 130,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (year) {\n        return {\n          year: year,\n          isTwoDigitYear: token === 'YY'\n        }\n      };\n\n      switch (token) {\n        case 'Y':\n          return parseNDigits(4, string, valueCallback)\n        case 'Yo':\n          return match.ordinalNumber(string, {unit: 'year', valueCallback: valueCallback})\n        default:\n          return parseNDigits(token.length, string, valueCallback)\n      }\n    },\n    validate: function (date, value, options) {\n      return value.isTwoDigitYear || value.year > 0\n    },\n    set: function (date, value, options) {\n      var currentYear = date.getUTCFullYear();\n\n      if (value.isTwoDigitYear) {\n        var normalizedTwoDigitYear = normalizeTwoDigitYear(value.year, currentYear);\n        date.setUTCFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);\n        date.setUTCHours(0, 0, 0, 0);\n        return startOfUTCWeek(date, options)\n      }\n\n      var year = currentYear > 0 ? value.year : 1 - value.year;\n      date.setUTCFullYear(year, 0, options.firstWeekContainsDate);\n      date.setUTCHours(0, 0, 0, 0);\n      return startOfUTCWeek(date, options)\n    }\n  },\n\n  // ISO week-numbering year\n  R: {\n    priority: 130,\n    parse: function (string, token, match, options) {\n      if (token === 'R') {\n        return parseNDigitsSigned(4, string)\n      }\n\n      return parseNDigitsSigned(token.length, string)\n    },\n    set: function (date, value, options) {\n      var firstWeekOfYear = new Date(0);\n      firstWeekOfYear.setUTCFullYear(value, 0, 4);\n      firstWeekOfYear.setUTCHours(0, 0, 0, 0);\n      return startOfUTCISOWeek(firstWeekOfYear)\n    }\n  },\n\n  // Extended year\n  u: {\n    priority: 130,\n    parse: function (string, token, match, options) {\n      if (token === 'u') {\n        return parseNDigitsSigned(4, string)\n      }\n\n      return parseNDigitsSigned(token.length, string)\n    },\n    set: function (date, value, options) {\n      date.setUTCFullYear(value, 0, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Quarter\n  Q: {\n    priority: 120,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'Q':\n        case 'QQ': // 01, 02, 03, 04\n          return parseNDigits(token.length, string)\n        // 1st, 2nd, 3rd, 4th\n        case 'Qo':\n          return match.ordinalNumber(string, {unit: 'quarter'})\n        // Q1, Q2, Q3, Q4\n        case 'QQQ':\n          return match.quarter(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.quarter(string, {width: 'narrow', context: 'formatting'})\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n        case 'QQQQQ':\n          return match.quarter(string, {width: 'narrow', context: 'formatting'})\n        // 1st quarter, 2nd quarter, ...\n        case 'QQQQ':\n        default:\n          return match.quarter(string, {width: 'wide', context: 'formatting'}) ||\n            match.quarter(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.quarter(string, {width: 'narrow', context: 'formatting'})\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 1 && value <= 4\n    },\n    set: function (date, value, options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Stand-alone quarter\n  q: {\n    priority: 120,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        // 1, 2, 3, 4\n        case 'q':\n        case 'qq': // 01, 02, 03, 04\n          return parseNDigits(token.length, string)\n        // 1st, 2nd, 3rd, 4th\n        case 'qo':\n          return match.ordinalNumber(string, {unit: 'quarter'})\n        // Q1, Q2, Q3, Q4\n        case 'qqq':\n          return match.quarter(string, {width: 'abbreviated', context: 'standalone'}) ||\n            match.quarter(string, {width: 'narrow', context: 'standalone'})\n        // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n        case 'qqqqq':\n          return match.quarter(string, {width: 'narrow', context: 'standalone'})\n        // 1st quarter, 2nd quarter, ...\n        case 'qqqq':\n        default:\n          return match.quarter(string, {width: 'wide', context: 'standalone'}) ||\n            match.quarter(string, {width: 'abbreviated', context: 'standalone'}) ||\n            match.quarter(string, {width: 'narrow', context: 'standalone'})\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 1 && value <= 4\n    },\n    set: function (date, value, options) {\n      date.setUTCMonth((value - 1) * 3, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Month\n  M: {\n    priority: 110,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        return value - 1\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'M':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback)\n        // 01, 02, ..., 12\n        case 'MM':\n          return parseNDigits(2, string, valueCallback)\n        // 1st, 2nd, ..., 12th\n        case 'Mo':\n          return match.ordinalNumber(string, {unit: 'month', valueCallback: valueCallback})\n        // Jan, Feb, ..., Dec\n        case 'MMM':\n          return match.month(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.month(string, {width: 'narrow', context: 'formatting'})\n        // J, F, ..., D\n        case 'MMMMM':\n          return match.month(string, {width: 'narrow', context: 'formatting'})\n        // January, February, ..., December\n        case 'MMMM':\n        default:\n          return match.month(string, {width: 'wide', context: 'formatting'}) ||\n            match.month(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.month(string, {width: 'narrow', context: 'formatting'})\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 0 && value <= 11\n    },\n    set: function (date, value, options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Stand-alone month\n  L: {\n    priority: 110,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        return value - 1\n      };\n\n      switch (token) {\n        // 1, 2, ..., 12\n        case 'L':\n          return parseNumericPattern(numericPatterns.month, string, valueCallback)\n        // 01, 02, ..., 12\n        case 'LL':\n          return parseNDigits(2, string, valueCallback)\n        // 1st, 2nd, ..., 12th\n        case 'Lo':\n          return match.ordinalNumber(string, {unit: 'month', valueCallback: valueCallback})\n        // Jan, Feb, ..., Dec\n        case 'LLL':\n          return match.month(string, {width: 'abbreviated', context: 'standalone'}) ||\n            match.month(string, {width: 'narrow', context: 'standalone'})\n        // J, F, ..., D\n        case 'LLLLL':\n          return match.month(string, {width: 'narrow', context: 'standalone'})\n        // January, February, ..., December\n        case 'LLLL':\n        default:\n          return match.month(string, {width: 'wide', context: 'standalone'}) ||\n            match.month(string, {width: 'abbreviated', context: 'standalone'}) ||\n            match.month(string, {width: 'narrow', context: 'standalone'})\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 0 && value <= 11\n    },\n    set: function (date, value, options) {\n      date.setUTCMonth(value, 1);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Local week of year\n  w: {\n    priority: 100,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'w':\n          return parseNumericPattern(numericPatterns.week, string)\n        case 'wo':\n          return match.ordinalNumber(string, {unit: 'week'})\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 1 && value <= 53\n    },\n    set: function (date, value, options) {\n      return startOfUTCWeek(setUTCWeek(date, value, options), options)\n    }\n  },\n\n  // ISO week of year\n  I: {\n    priority: 100,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'I':\n          return parseNumericPattern(numericPatterns.week, string)\n        case 'Io':\n          return match.ordinalNumber(string, {unit: 'week'})\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 1 && value <= 53\n    },\n    set: function (date, value, options) {\n      return startOfUTCISOWeek(setUTCISOWeek(date, value, options), options)\n    }\n  },\n\n  // Day of the month\n  d: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'd':\n          return parseNumericPattern(numericPatterns.date, string)\n        case 'do':\n          return match.ordinalNumber(string, {unit: 'date'})\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function (date, value, options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex$1(year);\n      var month = date.getUTCMonth();\n      if (isLeapYear) {\n        return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR$1[month]\n      } else {\n        return value >= 1 && value <= DAYS_IN_MONTH$1[month]\n      }\n    },\n    set: function (date, value, options) {\n      date.setUTCDate(value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Day of year\n  D: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'D':\n        case 'DD':\n          return parseNumericPattern(numericPatterns.dayOfYear, string)\n        case 'Do':\n          return match.ordinalNumber(string, {unit: 'date'})\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function (date, value, options) {\n      var year = date.getUTCFullYear();\n      var isLeapYear = isLeapYearIndex$1(year);\n      if (isLeapYear) {\n        return value >= 1 && value <= 366\n      } else {\n        return value >= 1 && value <= 365\n      }\n    },\n    set: function (date, value, options) {\n      date.setUTCMonth(0, value);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Day of week\n  E: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        // Tue\n        case 'E':\n        case 'EE':\n        case 'EEE':\n          return match.day(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.day(string, {width: 'short', context: 'formatting'}) ||\n            match.day(string, {width: 'narrow', context: 'formatting'})\n        // T\n        case 'EEEEE':\n          return match.day(string, {width: 'narrow', context: 'formatting'})\n        // Tu\n        case 'EEEEEE':\n          return match.day(string, {width: 'short', context: 'formatting'}) ||\n          match.day(string, {width: 'narrow', context: 'formatting'})\n        // Tuesday\n        case 'EEEE':\n        default:\n          return match.day(string, {width: 'wide', context: 'formatting'}) ||\n            match.day(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.day(string, {width: 'short', context: 'formatting'}) ||\n            match.day(string, {width: 'narrow', context: 'formatting'})\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 0 && value <= 6\n    },\n    set: function (date, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Local day of week\n  e: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays\n      };\n\n      switch (token) {\n        // 3\n        case 'e':\n        case 'ee': // 03\n          return parseNDigits(token.length, string, valueCallback)\n        // 3rd\n        case 'eo':\n          return match.ordinalNumber(string, {unit: 'day', valueCallback: valueCallback})\n        // Tue\n        case 'eee':\n          return match.day(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.day(string, {width: 'short', context: 'formatting'}) ||\n            match.day(string, {width: 'narrow', context: 'formatting'})\n        // T\n        case 'eeeee':\n          return match.day(string, {width: 'narrow', context: 'formatting'})\n        // Tu\n        case 'eeeeee':\n          return match.day(string, {width: 'short', context: 'formatting'}) ||\n          match.day(string, {width: 'narrow', context: 'formatting'})\n        // Tuesday\n        case 'eeee':\n        default:\n          return match.day(string, {width: 'wide', context: 'formatting'}) ||\n            match.day(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.day(string, {width: 'short', context: 'formatting'}) ||\n            match.day(string, {width: 'narrow', context: 'formatting'})\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 0 && value <= 6\n    },\n    set: function (date, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Stand-alone local day of week\n  c: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        var wholeWeekDays = Math.floor((value - 1) / 7) * 7;\n        return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays\n      };\n\n      switch (token) {\n        // 3\n        case 'c':\n        case 'cc': // 03\n          return parseNDigits(token.length, string, valueCallback)\n        // 3rd\n        case 'co':\n          return match.ordinalNumber(string, {unit: 'day', valueCallback: valueCallback})\n        // Tue\n        case 'ccc':\n          return match.day(string, {width: 'abbreviated', context: 'standalone'}) ||\n            match.day(string, {width: 'short', context: 'standalone'}) ||\n            match.day(string, {width: 'narrow', context: 'standalone'})\n        // T\n        case 'ccccc':\n          return match.day(string, {width: 'narrow', context: 'standalone'})\n        // Tu\n        case 'cccccc':\n          return match.day(string, {width: 'short', context: 'standalone'}) ||\n          match.day(string, {width: 'narrow', context: 'standalone'})\n        // Tuesday\n        case 'cccc':\n        default:\n          return match.day(string, {width: 'wide', context: 'standalone'}) ||\n            match.day(string, {width: 'abbreviated', context: 'standalone'}) ||\n            match.day(string, {width: 'short', context: 'standalone'}) ||\n            match.day(string, {width: 'narrow', context: 'standalone'})\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 0 && value <= 6\n    },\n    set: function (date, value, options) {\n      date = setUTCDay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // ISO day of week\n  i: {\n    priority: 90,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        if (value === 0) {\n          return 7\n        }\n        return value\n      };\n\n      switch (token) {\n        // 2\n        case 'i':\n        case 'ii': // 02\n          return parseNDigits(token.length, string)\n        // 2nd\n        case 'io':\n          return match.ordinalNumber(string, {unit: 'day'})\n        // Tue\n        case 'iii':\n          return match.day(string, {width: 'abbreviated', context: 'formatting', valueCallback: valueCallback}) ||\n            match.day(string, {width: 'short', context: 'formatting', valueCallback: valueCallback}) ||\n            match.day(string, {width: 'narrow', context: 'formatting', valueCallback: valueCallback})\n        // T\n        case 'iiiii':\n          return match.day(string, {width: 'narrow', context: 'formatting', valueCallback: valueCallback})\n        // Tu\n        case 'iiiiii':\n          return match.day(string, {width: 'short', context: 'formatting', valueCallback: valueCallback}) ||\n          match.day(string, {width: 'narrow', context: 'formatting', valueCallback: valueCallback})\n        // Tuesday\n        case 'iiii':\n        default:\n          return match.day(string, {width: 'wide', context: 'formatting', valueCallback: valueCallback}) ||\n            match.day(string, {width: 'abbreviated', context: 'formatting', valueCallback: valueCallback}) ||\n            match.day(string, {width: 'short', context: 'formatting', valueCallback: valueCallback}) ||\n            match.day(string, {width: 'narrow', context: 'formatting', valueCallback: valueCallback})\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 1 && value <= 7\n    },\n    set: function (date, value, options) {\n      date = setUTCISODay(date, value, options);\n      date.setUTCHours(0, 0, 0, 0);\n      return date\n    }\n  },\n\n  // AM or PM\n  a: {\n    priority: 80,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'a':\n        case 'aa':\n        case 'aaa':\n          return match.dayPeriod(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.dayPeriod(string, {width: 'narrow', context: 'formatting'})\n        case 'aaaaa':\n          return match.dayPeriod(string, {width: 'narrow', context: 'formatting'})\n        case 'aaaa':\n        default:\n          return match.dayPeriod(string, {width: 'wide', context: 'formatting'}) ||\n            match.dayPeriod(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.dayPeriod(string, {width: 'narrow', context: 'formatting'})\n      }\n    },\n    set: function (date, value, options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date\n    }\n  },\n\n  // AM, PM, midnight\n  b: {\n    priority: 80,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'b':\n        case 'bb':\n        case 'bbb':\n          return match.dayPeriod(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.dayPeriod(string, {width: 'narrow', context: 'formatting'})\n        case 'bbbbb':\n          return match.dayPeriod(string, {width: 'narrow', context: 'formatting'})\n        case 'bbbb':\n        default:\n          return match.dayPeriod(string, {width: 'wide', context: 'formatting'}) ||\n            match.dayPeriod(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.dayPeriod(string, {width: 'narrow', context: 'formatting'})\n      }\n    },\n    set: function (date, value, options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: {\n    priority: 80,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'B':\n        case 'BB':\n        case 'BBB':\n          return match.dayPeriod(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.dayPeriod(string, {width: 'narrow', context: 'formatting'})\n        case 'BBBBB':\n          return match.dayPeriod(string, {width: 'narrow', context: 'formatting'})\n        case 'BBBB':\n        default:\n          return match.dayPeriod(string, {width: 'wide', context: 'formatting'}) ||\n            match.dayPeriod(string, {width: 'abbreviated', context: 'formatting'}) ||\n            match.dayPeriod(string, {width: 'narrow', context: 'formatting'})\n      }\n    },\n    set: function (date, value, options) {\n      date.setUTCHours(dayPeriodEnumToHours(value), 0, 0, 0);\n      return date\n    }\n  },\n\n  // Hour [1-12]\n  h: {\n    priority: 70,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'h':\n          return parseNumericPattern(numericPatterns.hour12h, string)\n        case 'ho':\n          return match.ordinalNumber(string, {unit: 'hour'})\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 1 && value <= 12\n    },\n    set: function (date, value, options) {\n      var isPM = date.getUTCHours() >= 12;\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else if (!isPM && value === 12) {\n        date.setUTCHours(0, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n      return date\n    }\n  },\n\n  // Hour [0-23]\n  H: {\n    priority: 70,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'H':\n          return parseNumericPattern(numericPatterns.hour23h, string)\n        case 'Ho':\n          return match.ordinalNumber(string, {unit: 'hour'})\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 0 && value <= 23\n    },\n    set: function (date, value, options) {\n      date.setUTCHours(value, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Hour [0-11]\n  K: {\n    priority: 70,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'K':\n          return parseNumericPattern(numericPatterns.hour11h, string)\n        case 'Ko':\n          return match.ordinalNumber(string, {unit: 'hour'})\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 0 && value <= 11\n    },\n    set: function (date, value, options) {\n      var isPM = date.getUTCHours() >= 12;\n      if (isPM && value < 12) {\n        date.setUTCHours(value + 12, 0, 0, 0);\n      } else {\n        date.setUTCHours(value, 0, 0, 0);\n      }\n      return date\n    }\n  },\n\n  // Hour [1-24]\n  k: {\n    priority: 70,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'k':\n          return parseNumericPattern(numericPatterns.hour24h, string)\n        case 'ko':\n          return match.ordinalNumber(string, {unit: 'hour'})\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 1 && value <= 24\n    },\n    set: function (date, value, options) {\n      var hours = value <= 24 ? value % 24 : value;\n      date.setUTCHours(hours, 0, 0, 0);\n      return date\n    }\n  },\n\n  // Minute\n  m: {\n    priority: 60,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'm':\n          return parseNumericPattern(numericPatterns.minute, string)\n        case 'mo':\n          return match.ordinalNumber(string, {unit: 'minute'})\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 0 && value <= 59\n    },\n    set: function (date, value, options) {\n      date.setUTCMinutes(value, 0, 0);\n      return date\n    }\n  },\n\n  // Second\n  s: {\n    priority: 50,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 's':\n          return parseNumericPattern(numericPatterns.second, string)\n        case 'so':\n          return match.ordinalNumber(string, {unit: 'second'})\n        default:\n          return parseNDigits(token.length, string)\n      }\n    },\n    validate: function (date, value, options) {\n      return value >= 0 && value <= 59\n    },\n    set: function (date, value, options) {\n      date.setUTCSeconds(value, 0);\n      return date\n    }\n  },\n\n  // Fraction of second\n  S: {\n    priority: 40,\n    parse: function (string, token, match, options) {\n      var valueCallback = function (value) {\n        return Math.floor(value * Math.pow(10, -token.length + 3))\n      };\n      return parseNDigits(token.length, string, valueCallback)\n    },\n    set: function (date, value, options) {\n      date.setUTCMilliseconds(value);\n      return date\n    }\n  },\n\n  // Timezone (ISO-8601. +00:00 is `'Z'`)\n  X: {\n    priority: 20,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'X':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string)\n        case 'XX':\n          return parseTimezonePattern(timezonePatterns.basic, string)\n        case 'XXXX':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string)\n        case 'XXXXX':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string)\n        case 'XXX':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string)\n      }\n    },\n    set: function (date, value, options) {\n      return new Date(date.getTime() - value)\n    }\n  },\n\n  // Timezone (ISO-8601)\n  x: {\n    priority: 20,\n    parse: function (string, token, match, options) {\n      switch (token) {\n        case 'x':\n          return parseTimezonePattern(timezonePatterns.basicOptionalMinutes, string)\n        case 'xx':\n          return parseTimezonePattern(timezonePatterns.basic, string)\n        case 'xxxx':\n          return parseTimezonePattern(timezonePatterns.basicOptionalSeconds, string)\n        case 'xxxxx':\n          return parseTimezonePattern(timezonePatterns.extendedOptionalSeconds, string)\n        case 'xxx':\n        default:\n          return parseTimezonePattern(timezonePatterns.extended, string)\n      }\n    },\n    set: function (date, value, options) {\n      return new Date(date.getTime() - value)\n    }\n  },\n\n  // Seconds timestamp\n  t: {\n    priority: 10,\n    parse: function (string, token, match, options) {\n      return parseAnyDigitsSigned(string)\n    },\n    set: function (date, value, options) {\n      return new Date(value * 1000)\n    }\n  },\n\n  // Milliseconds timestamp\n  T: {\n    priority: 10,\n    parse: function (string, token, match, options) {\n      return parseAnyDigitsSigned(string)\n    },\n    set: function (date, value, options) {\n      return new Date(value)\n    }\n  }\n};\n\nvar TIMEZONE_UNIT_PRIORITY = 20;\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nvar formattingTokensRegExp$1 = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\nvar escapedStringRegExp$1 = /^'(.*?)'?$/;\nvar doubleQuoteRegExp$1 = /''/g;\n\nvar notWhitespaceRegExp = /\\S/;\n\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 6     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 6     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 1, 2, ..., 11, 0                  |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              |  40 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  20 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  20 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Seconds timestamp               |  10 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Milliseconds timestamp          |  10 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `baseDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *\n * 6. These tokens are often confused with others. See: https://git.io/fxCyr\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `baseDate` which works as a context of parsing.\n *\n * `baseDate` must be passed for correct work of the function.\n * If you're not sure which `baseDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `baseDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `baseDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|String|Number} baseDate - defines values missing from the parsed dateString\n * @param {Options} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens (`yy`, `yyyy`).\n *   See: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see: https://git.io/fxCyr\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse(\n *   '02/11/2014',\n *   'MM/dd/yyyy',\n *   new Date()\n * )\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse(\n *   '28-a de februaro',\n *   \"do 'de' MMMM\",\n *   new Date(2010, 0, 1),\n *   {locale: eo}\n * )\n * //=> Sun Feb 28 2010 00:00:00\n */\nfunction parse(\n  dirtyDateString,\n  dirtyFormatString,\n  dirtyBaseDate,\n  dirtyOptions\n) {\n  if (arguments.length < 3) {\n    throw new TypeError(\n      '3 arguments required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n\n  var locale = options.locale || locale$1;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property')\n  }\n\n  var localeFirstWeekContainsDate =\n    locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate =\n    localeFirstWeekContainsDate == null\n      ? 1\n      : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate =\n    options.firstWeekContainsDate == null\n      ? defaultFirstWeekContainsDate\n      : toInteger(options.firstWeekContainsDate);\n\n  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError(\n      'firstWeekContainsDate must be between 1 and 7 inclusively'\n    )\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn =\n    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn =\n    options.weekStartsOn == null\n      ? defaultWeekStartsOn\n      : toInteger(options.weekStartsOn);\n\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyBaseDate, options)\n    } else {\n      return new Date(NaN)\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale\n  };\n\n  // If timezone isn't specified, it will be set to the system timezone\n  var setters = [\n    {\n      priority: TIMEZONE_UNIT_PRIORITY,\n      set: dateToSystemTimezone,\n      index: 0\n    }\n  ];\n\n  var i;\n\n  var tokens = formatString.match(formattingTokensRegExp$1);\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.awareOfUnicodeTokens && isProtectedToken(token)) {\n      throwProtectedError(token);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n    if (parser) {\n      var parseResult = parser.parse(\n        dateString,\n        token,\n        locale.match,\n        subFnOptions\n      );\n\n      if (!parseResult) {\n        return new Date(NaN)\n      }\n\n      setters.push({\n        priority: parser.priority,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n\n      dateString = parseResult.rest;\n    } else {\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString$1(token);\n      }\n\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN)\n      }\n    }\n  }\n\n  // Check if the remaining input contains something other than whitespace\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN)\n  }\n\n  var uniquePrioritySetters = setters\n    .map(function(setter) {\n      return setter.priority\n    })\n    .sort(function(a, b) {\n      return b - a\n    })\n    .filter(function(priority, index, array) {\n      return array.indexOf(priority) === index\n    })\n    .map(function(priority) {\n      return setters\n        .filter(function(setter) {\n          return setter.priority === priority\n        })\n        .reverse()\n    })\n    .map(function(setterArray) {\n      return setterArray[0]\n    });\n\n  var date = toDate(dirtyBaseDate, options);\n\n  if (isNaN(date)) {\n    return new Date(NaN)\n  }\n\n  // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (\n      setter.validate &&\n      !setter.validate(utcDate, setter.value, subFnOptions)\n    ) {\n      return new Date(NaN)\n    }\n\n    utcDate = setter.set(utcDate, setter.value, subFnOptions);\n  }\n\n  return utcDate\n}\n\nfunction dateToSystemTimezone(date) {\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate()\n  );\n  convertedDate.setHours(\n    date.getUTCHours(),\n    date.getUTCMinutes(),\n    date.getUTCSeconds(),\n    date.getUTCMilliseconds()\n  );\n  return convertedDate\n}\n\nfunction cleanEscapedString$1(input) {\n  return input.match(escapedStringRegExp$1)[1].replace(doubleQuoteRegExp$1, \"'\")\n}\n\n// This file is generated automatically by `scripts/build/indices.js`. Please, don't change it.\n\n// \n\n/**\n * Custom parse behavior on top of date-fns parse function.\n */\nfunction parseDate$1 (date, format$1) {\n  if (typeof date !== 'string') {\n    return isValid(date) ? date : null;\n  }\n\n  var parsed = parse(date, format$1, new Date());\n\n  // if date is not valid or the formatted output after parsing does not match\n  // the string value passed in (avoids overflows)\n  if (!isValid(parsed) || format(parsed, format$1) !== date) {\n    return null;\n  }\n\n  return parsed;\n}\n\nvar afterValidator = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var targetValue = ref.targetValue;\n  var inclusion = ref.inclusion; if ( inclusion === void 0 ) inclusion = false;\n  var format = ref.format;\n\n  if (typeof format === 'undefined') {\n    format = inclusion;\n    inclusion = false;\n  }\n\n  value = parseDate$1(value, format);\n  targetValue = parseDate$1(targetValue, format);\n\n  // if either is not valid.\n  if (!value || !targetValue) {\n    return false;\n  }\n\n  return isAfter(value, targetValue) || (inclusion && isEqual$1(value, targetValue));\n};\n\nvar options = {\n  hasTarget: true,\n  isDate: true\n};\n\n// required to convert from a list of array values to an object.\nvar paramNames = ['targetValue', 'inclusion', 'format'];\n\nvar after = {\n  validate: afterValidator,\n  options: options,\n  paramNames: paramNames\n};\n\n/**\n * Some Alpha Regex helpers.\n * https://github.com/chriso/validator.js/blob/master/src/lib/alpha.js\n */\n\nvar alpha = {\n  en: /^[A-Z]*$/i,\n  cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,\n  da: /^[A-ZÆØÅ]*$/i,\n  de: /^[A-ZÄÖÜß]*$/i,\n  es: /^[A-ZÁÉÍÑÓÚÜ]*$/i,\n  fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,\n  it: /^[A-Z\\xC0-\\xFF]*$/i,\n  lt: /^[A-ZĄČĘĖĮŠŲŪŽ]*$/i,\n  nl: /^[A-ZÉËÏÓÖÜ]*$/i,\n  hu: /^[A-ZÁÉÍÓÖŐÚÜŰ]*$/i,\n  pl: /^[A-ZĄĆĘŚŁŃÓŻŹ]*$/i,\n  pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,\n  ru: /^[А-ЯЁ]*$/i,\n  sk: /^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i,\n  sr: /^[A-ZČĆŽŠĐ]*$/i,\n  sv: /^[A-ZÅÄÖ]*$/i,\n  tr: /^[A-ZÇĞİıÖŞÜ]*$/i,\n  uk: /^[А-ЩЬЮЯЄІЇҐ]*$/i,\n  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/,\n  az: /^[A-ZÇƏĞİıÖŞÜ]*$/i\n};\n\nvar alphaSpaces = {\n  en: /^[A-Z\\s]*$/i,\n  cs: /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ\\s]*$/i,\n  da: /^[A-ZÆØÅ\\s]*$/i,\n  de: /^[A-ZÄÖÜß\\s]*$/i,\n  es: /^[A-ZÁÉÍÑÓÚÜ\\s]*$/i,\n  fr: /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ\\s]*$/i,\n  it: /^[A-Z\\xC0-\\xFF\\s]*$/i,\n  lt: /^[A-ZĄČĘĖĮŠŲŪŽ\\s]*$/i,\n  nl: /^[A-ZÉËÏÓÖÜ\\s]*$/i,\n  hu: /^[A-ZÁÉÍÓÖŐÚÜŰ\\s]*$/i,\n  pl: /^[A-ZĄĆĘŚŁŃÓŻŹ\\s]*$/i,\n  pt: /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ\\s]*$/i,\n  ru: /^[А-ЯЁ\\s]*$/i,\n  sk: /^[A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ\\s]*$/i,\n  sr: /^[A-ZČĆŽŠĐ\\s]*$/i,\n  sv: /^[A-ZÅÄÖ\\s]*$/i,\n  tr: /^[A-ZÇĞİıÖŞÜ\\s]*$/i,\n  uk: /^[А-ЩЬЮЯЄІЇҐ\\s]*$/i,\n  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ\\s]*$/,\n  az: /^[A-ZÇƏĞİıÖŞÜ\\s]*$/i\n};\n\nvar alphanumeric = {\n  en: /^[0-9A-Z]*$/i,\n  cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]*$/i,\n  da: /^[0-9A-ZÆØÅ]$/i,\n  de: /^[0-9A-ZÄÖÜß]*$/i,\n  es: /^[0-9A-ZÁÉÍÑÓÚÜ]*$/i,\n  fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]*$/i,\n  it: /^[0-9A-Z\\xC0-\\xFF]*$/i,\n  lt: /^[0-9A-ZĄČĘĖĮŠŲŪŽ]*$/i,\n  hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]*$/i,\n  nl: /^[0-9A-ZÉËÏÓÖÜ]*$/i,\n  pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]*$/i,\n  pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]*$/i,\n  ru: /^[0-9А-ЯЁ]*$/i,\n  sk: /^[0-9A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ]*$/i,\n  sr: /^[0-9A-ZČĆŽŠĐ]*$/i,\n  sv: /^[0-9A-ZÅÄÖ]*$/i,\n  tr: /^[0-9A-ZÇĞİıÖŞÜ]*$/i,\n  uk: /^[0-9А-ЩЬЮЯЄІЇҐ]*$/i,\n  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]*$/,\n  az: /^[0-9A-ZÇƏĞİıÖŞÜ]*$/i\n};\n\nvar alphaDash = {\n  en: /^[0-9A-Z_-]*$/i,\n  cs: /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ_-]*$/i,\n  da: /^[0-9A-ZÆØÅ_-]*$/i,\n  de: /^[0-9A-ZÄÖÜß_-]*$/i,\n  es: /^[0-9A-ZÁÉÍÑÓÚÜ_-]*$/i,\n  fr: /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ_-]*$/i,\n  it: /^[0-9A-Z\\xC0-\\xFF_-]*$/i,\n  lt: /^[0-9A-ZĄČĘĖĮŠŲŪŽ_-]*$/i,\n  nl: /^[0-9A-ZÉËÏÓÖÜ_-]*$/i,\n  hu: /^[0-9A-ZÁÉÍÓÖŐÚÜŰ_-]*$/i,\n  pl: /^[0-9A-ZĄĆĘŚŁŃÓŻŹ_-]*$/i,\n  pt: /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ_-]*$/i,\n  ru: /^[0-9А-ЯЁ_-]*$/i,\n  sk: /^[0-9A-ZÁÄČĎÉÍĹĽŇÓŔŠŤÚÝŽ_-]*$/i,\n  sr: /^[0-9A-ZČĆŽŠĐ_-]*$/i,\n  sv: /^[0-9A-ZÅÄÖ_-]*$/i,\n  tr: /^[0-9A-ZÇĞİıÖŞÜ_-]*$/i,\n  uk: /^[0-9А-ЩЬЮЯЄІЇҐ_-]*$/i,\n  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ_-]*$/,\n  az: /^[0-9A-ZÇƏĞİıÖŞÜ_-]*$/i\n};\n\nvar validate = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var locale = ref.locale;\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return validate(val, [locale]); });\n  }\n\n  // Match at least one locale.\n  if (! locale) {\n    return Object.keys(alpha).some(function (loc) { return alpha[loc].test(value); });\n  }\n\n  return (alpha[locale] || alpha.en).test(value);\n};\n\nvar paramNames$1 = ['locale'];\n\nvar alpha$1 = {\n  validate: validate,\n  paramNames: paramNames$1\n};\n\nvar validate$1 = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var locale = ref.locale;\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return validate$1(val, [locale]); });\n  }\n\n  // Match at least one locale.\n  if (! locale) {\n    return Object.keys(alphaDash).some(function (loc) { return alphaDash[loc].test(value); });\n  }\n\n  return (alphaDash[locale] || alphaDash.en).test(value);\n};\n\nvar paramNames$2 = ['locale'];\n\nvar alpha_dash = {\n  validate: validate$1,\n  paramNames: paramNames$2\n};\n\nvar validate$2 = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var locale = ref.locale;\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return validate$2(val, [locale]); });\n  }\n\n  // Match at least one locale.\n  if (! locale) {\n    return Object.keys(alphanumeric).some(function (loc) { return alphanumeric[loc].test(value); });\n  }\n\n  return (alphanumeric[locale] || alphanumeric.en).test(value);\n};\n\nvar paramNames$3 = ['locale'];\n\nvar alpha_num = {\n  validate: validate$2,\n  paramNames: paramNames$3\n};\n\nvar validate$3 = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var locale = ref.locale;\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return validate$3(val, [locale]); });\n  }\n\n  // Match at least one locale.\n  if (! locale) {\n    return Object.keys(alphaSpaces).some(function (loc) { return alphaSpaces[loc].test(value); });\n  }\n\n  return (alphaSpaces[locale] || alphaSpaces.en).test(value);\n};\n\nvar paramNames$4 = ['locale'];\n\nvar alpha_spaces = {\n  validate: validate$3,\n  paramNames: paramNames$4\n};\n\nvar validate$4 = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var targetValue = ref.targetValue;\n  var inclusion = ref.inclusion; if ( inclusion === void 0 ) inclusion = false;\n  var format = ref.format;\n\n  if (typeof format === 'undefined') {\n    format = inclusion;\n    inclusion = false;\n  }\n\n  value = parseDate$1(value, format);\n  targetValue = parseDate$1(targetValue, format);\n\n  // if either is not valid.\n  if (!value || !targetValue) {\n    return false;\n  }\n\n  return isBefore(value, targetValue) || (inclusion && isEqual$1(value, targetValue));\n};\n\nvar options$1 = {\n  hasTarget: true,\n  isDate: true\n};\n\nvar paramNames$5 = ['targetValue', 'inclusion', 'format'];\n\nvar before = {\n  validate: validate$4,\n  options: options$1,\n  paramNames: paramNames$5\n};\n\nvar validate$5 = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var min = ref.min;\n  var max = ref.max;\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return validate$5(val, { min: min, max: max }); });\n  }\n\n  return Number(min) <= value && Number(max) >= value;\n};\n\nvar paramNames$6 = ['min', 'max'];\n\nvar between = {\n  validate: validate$5,\n  paramNames: paramNames$6\n};\n\nvar validate$6 = function (value, ref) {\n  var targetValue = ref.targetValue;\n\n  return String(value) === String(targetValue);\n};\nvar options$2 = {\n  hasTarget: true\n};\n\nvar paramNames$7 = ['targetValue'];\n\nvar confirmed = {\n  validate: validate$6,\n  options: options$2,\n  paramNames: paramNames$7\n};\n\nfunction unwrapExports (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar assertString_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = assertString;\nfunction assertString(input) {\n  var isString = typeof input === 'string' || input instanceof String;\n\n  if (!isString) {\n    var invalidType = void 0;\n    if (input === null) {\n      invalidType = 'null';\n    } else {\n      invalidType = typeof input === 'undefined' ? 'undefined' : _typeof(input);\n      if (invalidType === 'object' && input.constructor && input.constructor.hasOwnProperty('name')) {\n        invalidType = input.constructor.name;\n      } else {\n        invalidType = 'a ' + invalidType;\n      }\n    }\n    throw new TypeError('Expected string but received ' + invalidType + '.');\n  }\n}\nmodule.exports = exports['default'];\n});\n\nunwrapExports(assertString_1);\n\nvar isCreditCard_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCreditCard;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable max-len */\nvar creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|6[27][0-9]{14})$/;\n/* eslint-enable max-len */\n\nfunction isCreditCard(str) {\n  (0, _assertString2.default)(str);\n  var sanitized = str.replace(/[- ]+/g, '');\n  if (!creditCard.test(sanitized)) {\n    return false;\n  }\n  var sum = 0;\n  var digit = void 0;\n  var tmpNum = void 0;\n  var shouldDouble = void 0;\n  for (var i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += tmpNum % 10 + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n  return !!(sum % 10 === 0 ? sanitized : false);\n}\nmodule.exports = exports['default'];\n});\n\nvar isCreditCard = unwrapExports(isCreditCard_1);\n\nvar validate$7 = function (value) { return isCreditCard(String(value)); };\n\nvar credit_card = {\n  validate: validate$7\n};\n\nvar validate$8 = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var min = ref.min;\n  var max = ref.max;\n  var inclusivity = ref.inclusivity; if ( inclusivity === void 0 ) inclusivity = '()';\n  var format = ref.format;\n\n  if (typeof format === 'undefined') {\n    format = inclusivity;\n    inclusivity = '()';\n  }\n\n  var minDate = parseDate$1(String(min), format);\n  var maxDate = parseDate$1(String(max), format);\n  var dateVal = parseDate$1(String(value), format);\n\n  if (!minDate || !maxDate || !dateVal) {\n    return false;\n  }\n\n  if (inclusivity === '()') {\n    return isAfter(dateVal, minDate) && isBefore(dateVal, maxDate);\n  }\n\n  if (inclusivity === '(]') {\n    return isAfter(dateVal, minDate) && (isEqual$1(dateVal, maxDate) || isBefore(dateVal, maxDate));\n  }\n\n  if (inclusivity === '[)') {\n    return isBefore(dateVal, maxDate) && (isEqual$1(dateVal, minDate) || isAfter(dateVal, minDate));\n  }\n\n  return isEqual$1(dateVal, maxDate) || isEqual$1(dateVal, minDate) ||\n    (isBefore(dateVal, maxDate) && isAfter(dateVal, minDate));\n};\n\nvar options$3 = {\n  isDate: true\n};\n\nvar paramNames$8 = ['min', 'max', 'inclusivity', 'format'];\n\nvar date_between = {\n  validate: validate$8,\n  options: options$3,\n  paramNames: paramNames$8\n};\n\nvar validate$9 = function (value, ref) {\n  var format = ref.format;\n\n  return !!parseDate$1(value, format);\n};\n\nvar options$4 = {\n  isDate: true\n};\n\nvar paramNames$9 = ['format'];\n\nvar date_format = {\n  validate: validate$9,\n  options: options$4,\n  paramNames: paramNames$9\n};\n\nvar validate$a = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var decimals = ref.decimals; if ( decimals === void 0 ) decimals = '*';\n  var separator = ref.separator; if ( separator === void 0 ) separator = '.';\n\n  if (isNullOrUndefined(value) || value === '') {\n    return false;\n  }\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return validate$a(val, { decimals: decimals, separator: separator }); });\n  }\n\n  // if is 0.\n  if (Number(decimals) === 0) {\n    return /^-?\\d*$/.test(value);\n  }\n\n  var regexPart = decimals === '*' ? '+' : (\"{1,\" + decimals + \"}\");\n  var regex = new RegExp((\"^[-+]?\\\\d*(\\\\\" + separator + \"\\\\d\" + regexPart + \")?([eE]{1}[-]?\\\\d+)?$\"));\n\n  if (! regex.test(value)) {\n    return false;\n  }\n\n  var parsedValue = parseFloat(value);\n\n  // eslint-disable-next-line\n  return parsedValue === parsedValue;\n};\n\nvar paramNames$a = ['decimals', 'separator'];\n\nvar decimal = {\n  validate: validate$a,\n  paramNames: paramNames$a\n};\n\nvar validate$b = function (value, ref) {\n  var length = ref[0];\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return validate$b(val, [length]); });\n  }\n  var strVal = String(value);\n\n  return /^[0-9]*$/.test(strVal) && strVal.length === Number(length);\n};\n\nvar digits = {\n  validate: validate$b\n};\n\nvar imageRegex = /\\.(jpg|svg|jpeg|png|bmp|gif)$/i;\n\nvar validateImage = function (file, width, height) {\n  var URL = window.URL || window.webkitURL;\n  return new Promise(function (resolve) {\n    var image = new Image();\n    image.onerror = function () { return resolve({ valid: false }); };\n    image.onload = function () { return resolve({\n      valid: image.width === Number(width) && image.height === Number(height)\n    }); };\n\n    image.src = URL.createObjectURL(file);\n  });\n};\n\nvar validate$c = function (files, ref) {\n  var width = ref[0];\n  var height = ref[1];\n\n  var images = ensureArray(files).filter(function (file) { return imageRegex.test(file.name); });\n  if (images.length === 0) {\n    return false;\n  }\n  return Promise.all(images.map(function (image) { return validateImage(image, width, height); }));\n};\n\nvar dimensions = {\n  validate: validate$c\n};\n\nvar merge_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge;\nfunction merge() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults = arguments[1];\n\n  for (var key in defaults) {\n    if (typeof obj[key] === 'undefined') {\n      obj[key] = defaults[key];\n    }\n  }\n  return obj;\n}\nmodule.exports = exports['default'];\n});\n\nunwrapExports(merge_1);\n\nvar isByteLength_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports.default = isByteLength;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable prefer-rest-params */\nfunction isByteLength(str, options) {\n  (0, _assertString2.default)(str);\n  var min = void 0;\n  var max = void 0;\n  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n    min = options.min || 0;\n    max = options.max;\n  } else {\n    // backwards compatibility: isByteLength(str, min [, max])\n    min = arguments[1];\n    max = arguments[2];\n  }\n  var len = encodeURI(str).split(/%..|./).length - 1;\n  return len >= min && (typeof max === 'undefined' || len <= max);\n}\nmodule.exports = exports['default'];\n});\n\nunwrapExports(isByteLength_1);\n\nvar isFQDN_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isFQDN;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\n\n\nvar _merge2 = _interopRequireDefault(merge_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_fqdn_options = {\n  require_tld: true,\n  allow_underscores: false,\n  allow_trailing_dot: false\n};\n\nfunction isFQDN(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_fqdn_options);\n\n  /* Remove the optional trailing dot before checking validity */\n  if (options.allow_trailing_dot && str[str.length - 1] === '.') {\n    str = str.substring(0, str.length - 1);\n  }\n  var parts = str.split('.');\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i].length > 63) {\n      return false;\n    }\n  }\n  if (options.require_tld) {\n    var tld = parts.pop();\n    if (!parts.length || !/^([a-z\\u00a1-\\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\n      return false;\n    }\n    // disallow spaces\n    if (/[\\s\\u2002-\\u200B\\u202F\\u205F\\u3000\\uFEFF\\uDB40\\uDC20]/.test(tld)) {\n      return false;\n    }\n  }\n  for (var part, _i = 0; _i < parts.length; _i++) {\n    part = parts[_i];\n    if (options.allow_underscores) {\n      part = part.replace(/_/g, '');\n    }\n    if (!/^[a-z\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    }\n    // disallow full-width chars\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      return false;\n    }\n    if (part[0] === '-' || part[part.length - 1] === '-') {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = exports['default'];\n});\n\nvar isFQDN = unwrapExports(isFQDN_1);\n\nvar isIP_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\nvar ipv6Block = /^[0-9A-F]{1,4}$/i;\n\nfunction isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  (0, _assertString2.default)(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  } else if (version === '4') {\n    if (!ipv4Maybe.test(str)) {\n      return false;\n    }\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  } else if (version === '6') {\n    var blocks = str.split(':');\n    var foundOmissionBlock = false; // marker to indicate ::\n\n    // At least some OS accept the last 32 bits of an IPv6 address\n    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\n    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\n    // and '::a.b.c.d' is deprecated, but also valid.\n    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);\n    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\n\n    if (blocks.length > expectedNumberOfBlocks) {\n      return false;\n    }\n    // initial or final ::\n    if (str === '::') {\n      return true;\n    } else if (str.substr(0, 2) === '::') {\n      blocks.shift();\n      blocks.shift();\n      foundOmissionBlock = true;\n    } else if (str.substr(str.length - 2) === '::') {\n      blocks.pop();\n      blocks.pop();\n      foundOmissionBlock = true;\n    }\n\n    for (var i = 0; i < blocks.length; ++i) {\n      // test for a :: which can not be at the string start/end\n      // since those cases have been handled above\n      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\n        if (foundOmissionBlock) {\n          return false; // multiple :: in address\n        }\n        foundOmissionBlock = true;\n      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) ; else if (!ipv6Block.test(blocks[i])) {\n        return false;\n      }\n    }\n    if (foundOmissionBlock) {\n      return blocks.length >= 1;\n    }\n    return blocks.length === expectedNumberOfBlocks;\n  }\n  return false;\n}\nmodule.exports = exports['default'];\n});\n\nvar isIP = unwrapExports(isIP_1);\n\nvar isEmail_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\n\n\nvar _merge2 = _interopRequireDefault(merge_1);\n\n\n\nvar _isByteLength2 = _interopRequireDefault(isByteLength_1);\n\n\n\nvar _isFQDN2 = _interopRequireDefault(isFQDN_1);\n\n\n\nvar _isIP2 = _interopRequireDefault(isIP_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_email_options = {\n  allow_display_name: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true\n};\n\n/* eslint-disable max-len */\n/* eslint-disable no-control-regex */\nvar displayName = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\,\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\s]*<(.+)>$/i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar gmailUserPart = /^[a-z\\d]+$/;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\n/* eslint-enable max-len */\n/* eslint-enable no-control-regex */\n\nfunction isEmail(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(displayName);\n    if (display_email) {\n      str = display_email[1];\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var user = parts.join('@');\n\n  var lower_domain = domain.toLowerCase();\n\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n      Previously we removed dots for gmail addresses before validating.\n      This was removed because it allows `multiple..dots@gmail.com`\n      to be reported as valid, but it is not.\n      Gmail only normalizes single dots, removing them from here is pointless,\n      should be done in normalizeEmail\n    */\n    user = user.toLowerCase();\n\n    // Removing sub-address from username before gmail validation\n    var username = user.split('+')[0];\n\n    // Dots are not included in gmail length restriction\n    if (!(0, _isByteLength2.default)(username.replace('.', ''), { min: 6, max: 30 })) {\n      return false;\n    }\n\n    var _user_parts = username.split('.');\n    for (var i = 0; i < _user_parts.length; i++) {\n      if (!gmailUserPart.test(_user_parts[i])) {\n        return false;\n      }\n    }\n  }\n\n  if (!(0, _isByteLength2.default)(user, { max: 64 }) || !(0, _isByteLength2.default)(domain, { max: 254 })) {\n    return false;\n  }\n\n  if (!(0, _isFQDN2.default)(domain, { require_tld: options.require_tld })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n\n    if (!(0, _isIP2.default)(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n\n      var noBracketdomain = domain.substr(1, domain.length - 2);\n\n      if (noBracketdomain.length === 0 || !(0, _isIP2.default)(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n\n  var user_parts = user.split('.');\n  for (var _i = 0; _i < user_parts.length; _i++) {\n    if (!pattern.test(user_parts[_i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\nmodule.exports = exports['default'];\n});\n\nvar isEmail = unwrapExports(isEmail_1);\n\nfunction objectWithoutProperties (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }\n\nvar validate$d = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var multiple = ref.multiple; if ( multiple === void 0 ) multiple = false;\n  var rest = objectWithoutProperties( ref, [\"multiple\"] );\n  var options = rest;\n\n  if (multiple && !Array.isArray(value)) {\n    value = String(value).split(',').map(function (emailStr) { return emailStr.trim(); });\n  }\n\n  var validatorOptions = assign({}, options);\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return isEmail(String(val), validatorOptions); });\n  }\n\n  return isEmail(String(value), validatorOptions);\n};\n\nvar email = {\n  validate: validate$d\n};\n\nvar validate$e = function (value, options) {\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return validate$e(val, options); });\n  }\n\n  return toArray(options).some(function (item) {\n    // eslint-disable-next-line\n    return item == value;\n  });\n};\n\nvar included = {\n  validate: validate$e\n};\n\nvar validate$f = function () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return !validate$e.apply(void 0, args);\n};\n\nvar excluded = {\n  validate: validate$f\n};\n\nvar validate$g = function (files, extensions) {\n  var regex = new RegExp((\".(\" + (extensions.join('|')) + \")$\"), 'i');\n  return ensureArray(files).every(function (file) { return regex.test(file.name); });\n};\n\nvar ext = {\n  validate: validate$g\n};\n\nvar validate$h = function (files) { return (Array.isArray(files) ? files : [files]).every(function (file) { return /\\.(jpg|svg|jpeg|png|bmp|gif)$/i.test(file.name); }); };\n\nvar image = {\n  validate: validate$h\n};\n\nvar validate$i = function (value) {\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return /^-?[0-9]+$/.test(String(val)); });\n  }\n\n  return /^-?[0-9]+$/.test(String(value));\n};\n\nvar integer = {\n  validate: validate$i\n};\n\nvar validate$j = function (value, ref) {\n  if ( ref === void 0 ) ref = {};\n  var version = ref.version; if ( version === void 0 ) version = 4;\n\n  if (isNullOrUndefined(value)) {\n    value = '';\n  }\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return isIP(val, version); });\n  }\n\n  return isIP(value, version);\n};\n\nvar paramNames$b = ['version'];\n\nvar ip = {\n  validate: validate$j,\n  paramNames: paramNames$b\n};\n\nvar validate$k = function (value) {\n  if (isNullOrUndefined(value)) {\n    value = '';\n  }\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return (isIP(val, '') || isFQDN(val)); });\n  }\n\n  return isIP(value, '') || isFQDN(value);\n};\n\nvar ip_or_fqdn = {\n  validate: validate$k\n};\n\nvar validate$l = function (value, ref) {\n  if ( ref === void 0 ) ref = [];\n  var other = ref[0];\n\n  return value === other;\n};\n\nvar is = {\n  validate: validate$l\n};\n\nvar validate$m = function (value, ref) {\n  if ( ref === void 0 ) ref = [];\n  var other = ref[0];\n\n  return value !== other;\n};\n\nvar is_not = {\n  validate: validate$m\n};\n\n/**\n * @param {Array|String} value\n * @param {Number} length\n * @param {Number} max\n */\nvar compare = function (value, length, max) {\n  if (max === undefined) {\n    return value.length === length;\n  }\n\n  // cast to number.\n  max = Number(max);\n\n  return value.length >= length && value.length <= max;\n};\n\nvar validate$n = function (value, ref) {\n  var length = ref[0];\n  var max = ref[1]; if ( max === void 0 ) max = undefined;\n\n  if (isNullOrUndefined(value)) {\n    return false;\n  }\n\n  length = Number(length);\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n\n  if (!value.length) {\n    value = toArray(value);\n  }\n\n  return compare(value, length, max);\n};\n\nvar length = {\n  validate: validate$n\n};\n\nvar validate$o = function (value, ref) {\n  var length = ref[0];\n\n  if (isNullOrUndefined(value)) {\n    return length >= 0;\n  }\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return validate$o(val, [length]); });\n  }\n\n  return String(value).length <= length;\n};\n\nvar max = {\n  validate: validate$o\n};\n\nvar validate$p = function (value, ref) {\n  var max = ref[0];\n\n  if (isNullOrUndefined(value) || value === '') {\n    return false;\n  }\n\n  if (Array.isArray(value)) {\n    return value.length > 0 && value.every(function (val) { return validate$p(val, [max]); });\n  }\n\n  return Number(value) <= max;\n};\n\nvar max_value = {\n  validate: validate$p\n};\n\nvar validate$q = function (files, mimes) {\n  var regex = new RegExp(((mimes.join('|').replace('*', '.+')) + \"$\"), 'i');\n  return ensureArray(files).every(function (file) { return regex.test(file.type); });\n};\n\nvar mimes = {\n  validate: validate$q\n};\n\nvar validate$r = function (value, ref) {\n  var length = ref[0];\n\n  if (isNullOrUndefined(value)) {\n    return false;\n  }\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return validate$r(val, [length]); });\n  }\n\n  return String(value).length >= length;\n};\n\nvar min = {\n  validate: validate$r\n};\n\nvar validate$s = function (value, ref) {\n  var min = ref[0];\n\n  if (isNullOrUndefined(value) || value === '') {\n    return false;\n  }\n\n  if (Array.isArray(value)) {\n    return value.length > 0 && value.every(function (val) { return validate$s(val, [min]); });\n  }\n\n  return Number(value) >= min;\n};\n\nvar min_value = {\n  validate: validate$s\n};\n\nvar ar = /^[٠١٢٣٤٥٦٧٨٩]+$/;\nvar en = /^[0-9]+$/;\n\nvar validate$t = function (value) {\n  var testValue = function (val) {\n    var strValue = String(val);\n\n    return en.test(strValue) || ar.test(strValue);\n  };\n\n  if (Array.isArray(value)) {\n    return value.every(testValue);\n  }\n\n  return testValue(value);\n};\n\nvar numeric = {\n  validate: validate$t\n};\n\nvar validate$u = function (value, ref) {\n  var expression = ref.expression;\n\n  if (typeof expression === 'string') {\n    expression = new RegExp(expression);\n  }\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return validate$u(val, { expression: expression }); });\n  }\n\n  return expression.test(String(value));\n};\n\nvar paramNames$c = ['expression'];\n\nvar regex = {\n  validate: validate$u,\n  paramNames: paramNames$c\n};\n\nvar validate$v = function (value, ref) {\n  if ( ref === void 0 ) ref = [];\n  var invalidateFalse = ref[0]; if ( invalidateFalse === void 0 ) invalidateFalse = false;\n\n  if (isNullOrUndefined(value) || isEmptyArray(value)) {\n    return false;\n  }\n\n  // incase a field considers `false` as an empty value like checkboxes.\n  if (value === false && invalidateFalse) {\n    return false;\n  }\n\n  return !!String(value).trim().length;\n};\n\nvar required = {\n  validate: validate$v\n};\n\nvar validate$w = function (value, ref) {\n  if ( ref === void 0 ) ref = [];\n  var otherFieldVal = ref[0];\n  var possibleVals = ref.slice(1);\n\n  var required = possibleVals.includes(String(otherFieldVal).trim());\n\n  if (!required) {\n    return {\n      valid: true,\n      data: {\n        required: required\n      }\n    };\n  }\n\n  var invalid = (isEmptyArray(value) || [false, null, undefined].includes(value));\n\n  invalid = invalid || !String(value).trim().length;\n\n  return {\n    valid: !invalid,\n    data: {\n      required: required\n    }\n  };\n};\n\nvar options$5 = {\n  hasTarget: true,\n  computesRequired: true\n};\n\nvar required_if = {\n  validate: validate$w,\n  options: options$5\n};\n\nvar validate$x = function (files, ref) {\n  var size = ref[0];\n\n  if (isNaN(size)) {\n    return false;\n  }\n  var nSize = Number(size) * 1024;\n  return ensureArray(files).every(function (file) { return file.size <= nSize; });\n};\n\nvar size = {\n  validate: validate$x\n};\n\nvar isURL_1 = createCommonjsModule(function (module, exports) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isURL;\n\n\n\nvar _assertString2 = _interopRequireDefault(assertString_1);\n\n\n\nvar _isFQDN2 = _interopRequireDefault(isFQDN_1);\n\n\n\nvar _isIP2 = _interopRequireDefault(isIP_1);\n\n\n\nvar _merge2 = _interopRequireDefault(merge_1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar default_url_options = {\n  protocols: ['http', 'https', 'ftp'],\n  require_tld: true,\n  require_protocol: false,\n  require_host: true,\n  require_valid_protocol: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_protocol_relative_urls: false\n};\n\nvar wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\n\nfunction isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\nfunction checkHost(host, matches) {\n  for (var i = 0; i < matches.length; i++) {\n    var match = matches[i];\n    if (host === match || isRegExp(match) && match.test(host)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isURL(url, options) {\n  (0, _assertString2.default)(url);\n  if (!url || url.length >= 2083 || /[\\s<>]/.test(url)) {\n    return false;\n  }\n  if (url.indexOf('mailto:') === 0) {\n    return false;\n  }\n  options = (0, _merge2.default)(options, default_url_options);\n  var protocol = void 0,\n      auth = void 0,\n      host = void 0,\n      hostname = void 0,\n      port = void 0,\n      port_str = void 0,\n      split = void 0,\n      ipv6 = void 0;\n\n  split = url.split('#');\n  url = split.shift();\n\n  split = url.split('?');\n  url = split.shift();\n\n  split = url.split('://');\n  if (split.length > 1) {\n    protocol = split.shift().toLowerCase();\n    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {\n      return false;\n    }\n  } else if (options.require_protocol) {\n    return false;\n  } else if (url.substr(0, 2) === '//') {\n    if (!options.allow_protocol_relative_urls) {\n      return false;\n    }\n    split[0] = url.substr(2);\n  }\n  url = split.join('://');\n\n  if (url === '') {\n    return false;\n  }\n\n  split = url.split('/');\n  url = split.shift();\n\n  if (url === '' && !options.require_host) {\n    return true;\n  }\n\n  split = url.split('@');\n  if (split.length > 1) {\n    auth = split.shift();\n    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\n      return false;\n    }\n  }\n  hostname = split.join('@');\n\n  port_str = null;\n  ipv6 = null;\n  var ipv6_match = hostname.match(wrapped_ipv6);\n  if (ipv6_match) {\n    host = '';\n    ipv6 = ipv6_match[1];\n    port_str = ipv6_match[2] || null;\n  } else {\n    split = hostname.split(':');\n    host = split.shift();\n    if (split.length) {\n      port_str = split.join(':');\n    }\n  }\n\n  if (port_str !== null) {\n    port = parseInt(port_str, 10);\n    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\n      return false;\n    }\n  }\n\n  if (!(0, _isIP2.default)(host) && !(0, _isFQDN2.default)(host, options) && (!ipv6 || !(0, _isIP2.default)(ipv6, 6))) {\n    return false;\n  }\n\n  host = host || ipv6;\n\n  if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {\n    return false;\n  }\n  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {\n    return false;\n  }\n\n  return true;\n}\nmodule.exports = exports['default'];\n});\n\nvar isURL = unwrapExports(isURL_1);\n\nvar validate$y = function (value, options) {\n  if ( options === void 0 ) options = {};\n\n  if (isNullOrUndefined(value)) {\n    value = '';\n  }\n\n  var validatorOptions = assign({}, options);\n\n  if (Array.isArray(value)) {\n    return value.every(function (val) { return isURL(val, validatorOptions); });\n  }\n\n  return isURL(value, validatorOptions);\n};\n\nvar url = {\n  validate: validate$y\n};\n\n/* eslint-disable camelcase */\n\nvar Rules = /*#__PURE__*/Object.freeze({\n  after: after,\n  alpha_dash: alpha_dash,\n  alpha_num: alpha_num,\n  alpha_spaces: alpha_spaces,\n  alpha: alpha$1,\n  before: before,\n  between: between,\n  confirmed: confirmed,\n  credit_card: credit_card,\n  date_between: date_between,\n  date_format: date_format,\n  decimal: decimal,\n  digits: digits,\n  dimensions: dimensions,\n  email: email,\n  ext: ext,\n  image: image,\n  included: included,\n  integer: integer,\n  length: length,\n  ip: ip,\n  ip_or_fqdn: ip_or_fqdn,\n  is_not: is_not,\n  is: is,\n  max: max,\n  max_value: max_value,\n  mimes: mimes,\n  min: min,\n  min_value: min_value,\n  excluded: excluded,\n  numeric: numeric,\n  regex: regex,\n  required: required,\n  required_if: required_if,\n  size: size,\n  url: url\n});\n\n// \n\nvar normalize = function (fields) {\n  if (Array.isArray(fields)) {\n    return fields.reduce(function (prev, curr) {\n      if (includes(curr, '.')) {\n        prev[curr.split('.')[1]] = curr;\n      } else {\n        prev[curr] = curr;\n      }\n\n      return prev;\n    }, {});\n  }\n\n  return fields;\n};\n\n// Combines two flags using either AND or OR depending on the flag type.\nvar combine = function (lhs, rhs) {\n  var mapper = {\n    pristine: function (lhs, rhs) { return lhs && rhs; },\n    dirty: function (lhs, rhs) { return lhs || rhs; },\n    touched: function (lhs, rhs) { return lhs || rhs; },\n    untouched: function (lhs, rhs) { return lhs && rhs; },\n    valid: function (lhs, rhs) { return lhs && rhs; },\n    invalid: function (lhs, rhs) { return lhs || rhs; },\n    pending: function (lhs, rhs) { return lhs || rhs; },\n    required: function (lhs, rhs) { return lhs || rhs; },\n    validated: function (lhs, rhs) { return lhs && rhs; }\n  };\n\n  return Object.keys(mapper).reduce(function (flags, flag) {\n    flags[flag] = mapper[flag](lhs[flag], rhs[flag]);\n\n    return flags;\n  }, {});\n};\n\nvar mapScope = function (scope, deep) {\n  if ( deep === void 0 ) deep = true;\n\n  return Object.keys(scope).reduce(function (flags, field) {\n    if (!flags) {\n      flags = assign({}, scope[field]);\n      return flags;\n    }\n\n    // scope.\n    var isScope = field.indexOf('$') === 0;\n    if (deep && isScope) {\n      return combine(mapScope(scope[field]), flags);\n    } else if (!deep && isScope) {\n      return flags;\n    }\n\n    flags = combine(flags, scope[field]);\n\n    return flags;\n  }, null);\n};\n\n/**\n * Maps fields to computed functions.\n */\nvar mapFields = function (fields) {\n  if (!fields) {\n    return function () {\n      return mapScope(this.$validator.flags);\n    };\n  }\n\n  var normalized = normalize(fields);\n  return Object.keys(normalized).reduce(function (prev, curr) {\n    var field = normalized[curr];\n    prev[curr] = function mappedField () {\n      // if field exists\n      if (this.$validator.flags[field]) {\n        return this.$validator.flags[field];\n      }\n\n      // scopeless fields were selected.\n      if (normalized[curr] === '*') {\n        return mapScope(this.$validator.flags, false);\n      }\n\n      // if it has a scope defined\n      var index = field.indexOf('.');\n      if (index <= 0) {\n        return {};\n      }\n\n      var ref = field.split('.');\n      var scope = ref[0];\n      var name = ref.slice(1);\n\n      scope = this.$validator.flags[(\"$\" + scope)];\n      name = name.join('.');\n\n      // an entire scope was selected: scope.*\n      if (name === '*' && scope) {\n        return mapScope(scope);\n      }\n\n      if (scope && scope[name]) {\n        return scope[name];\n      }\n\n      return {};\n    };\n\n    return prev;\n  }, {});\n};\n\nvar $validator = null;\n\nvar PROVIDER_COUNTER = 0;\n\nvar ValidationProvider = {\n  $__veeInject: false,\n  inject: {\n    $_veeObserver: {\n      from: '$_veeObserver',\n      default: function default$1 () {\n        if (!this.$vnode.context.$_veeObserver) {\n          this.$vnode.context.$_veeObserver = createObserver();\n        }\n\n        return this.$vnode.context.$_veeObserver;\n      }\n    }\n  },\n  props: {\n    vid: {\n      type: [String, Number],\n      default: function () {\n        PROVIDER_COUNTER++;\n\n        return (\"_vee_\" + PROVIDER_COUNTER);\n      }\n    },\n    name: {\n      type: String,\n      default: null\n    },\n    mode: {\n      type: [String, Function],\n      default: function () {\n        return getConfig().mode;\n      }\n    },\n    events: {\n      type: Array,\n      validate: function () {\n        /* istanbul ignore next */\n        if (true) {\n          warn('events prop and config will be deprecated in future version please use the interaction modes instead');\n        }\n\n        return true;\n      },\n      default: function () {\n        var events = getConfig().events;\n        if (typeof events === 'string') {\n          return events.split('|');\n        }\n\n        return events;\n      }\n    },\n    rules: {\n      type: [Object, String],\n      default: null\n    },\n    immediate: {\n      type: Boolean,\n      default: false\n    },\n    persist: {\n      type: Boolean,\n      default: false\n    },\n    bails: {\n      type: Boolean,\n      default: function () { return getConfig().fastExit; }\n    },\n    debounce: {\n      type: Number,\n      default: function () { return getConfig().delay || 0; }\n    },\n    tag: {\n      type: String,\n      default: 'span'\n    },\n    slim: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    rules: {\n      deep: true,\n      handler: function handler (val, oldVal) {\n        this._needsValidation = !isEqual(val, oldVal);\n      }\n    }\n  },\n  data: function () { return ({\n    messages: [],\n    value: undefined,\n    initialized: false,\n    initialValue: undefined,\n    flags: createFlags(),\n    failedRules: {},\n    forceRequired: false,\n    isDeactivated: false,\n    id: null\n  }); },\n  computed: {\n    isValid: function isValid () {\n      return this.flags.valid;\n    },\n    fieldDeps: function fieldDeps () {\n      var this$1 = this;\n\n      var rules = normalizeRules(this.rules);\n\n      return Object.keys(rules).filter(RuleContainer.isTargetRule).map(function (rule) {\n        var depName = rules[rule][0];\n        watchCrossFieldDep(this$1, depName);\n\n        return depName;\n      });\n    },\n    normalizedEvents: function normalizedEvents () {\n      var this$1 = this;\n\n      var ref = computeModeSetting(this);\n      var on = ref.on;\n\n      return normalizeEvents(on || this.events || []).map(function (e) {\n        if (e === 'input') {\n          return this$1._inputEventName;\n        }\n\n        return e;\n      });\n    },\n    isRequired: function isRequired () {\n      var rules = normalizeRules(this.rules);\n      var forceRequired = this.forceRequired;\n\n      var isRequired = rules.required || forceRequired;\n      this.flags.required = isRequired;\n\n      return isRequired;\n    },\n    classes: function classes () {\n      var this$1 = this;\n\n      var names = getConfig().classNames;\n      return Object.keys(this.flags).reduce(function (classes, flag) {\n        var className = (names && names[flag]) || flag;\n        if (isNullOrUndefined(this$1.flags[flag])) {\n          return classes;\n        }\n\n        if (className) {\n          classes[className] = this$1.flags[flag];\n        }\n\n        return classes;\n      }, {});\n    }\n  },\n  render: function render (h) {\n    var this$1 = this;\n\n    this.registerField();\n    var ctx = createValidationCtx(this);\n\n    // Gracefully handle non-existent scoped slots.\n    var slot = this.$scopedSlots.default;\n    /* istanbul ignore next */\n    if (!isCallable(slot)) {\n      if (true) {\n        warn('ValidationProvider expects a scoped slot. Did you forget to add \"v-slot\" to your slot?');\n      }\n\n      return h(this.tag, this.$slots.default);\n    }\n\n    var nodes = slot(ctx);\n    // Handle single-root slot.\n    extractVNodes(nodes).forEach(function (input) {\n      addListeners.call(this$1, input);\n    });\n\n    return this.slim ? createRenderless(h, nodes) : h(this.tag, nodes);\n  },\n  beforeDestroy: function beforeDestroy () {\n    // cleanup reference.\n    this.$_veeObserver.unsubscribe(this);\n  },\n  activated: function activated () {\n    this.$_veeObserver.subscribe(this);\n    this.isDeactivated = false;\n  },\n  deactivated: function deactivated () {\n    this.$_veeObserver.unsubscribe(this);\n    this.isDeactivated = true;\n  },\n  methods: {\n    setFlags: function setFlags (flags) {\n      var this$1 = this;\n\n      Object.keys(flags).forEach(function (flag) {\n        this$1.flags[flag] = flags[flag];\n      });\n    },\n    syncValue: function syncValue (e) {\n      var value = normalizeValue$1(e);\n      this.value = value;\n      this.flags.changed = this.initialValue !== value;\n    },\n    reset: function reset () {\n      this.messages = [];\n      this._pendingValidation = null;\n      this.initialValue = this.value;\n      var flags = createFlags();\n      this.setFlags(flags);\n    },\n    validate: function validate () {\n      var this$1 = this;\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      if (args.length > 0) {\n        this.syncValue(args[0]);\n      }\n\n      return this.validateSilent().then(function (result) {\n        this$1.applyResult(result);\n\n        return result;\n      });\n    },\n    validateSilent: function validateSilent () {\n      var this$1 = this;\n\n      this.setFlags({ pending: true });\n\n      return $validator.verify(this.value, this.rules, {\n        name: this.name,\n        values: createValuesLookup(this),\n        bails: this.bails\n      }).then(function (result) {\n        this$1.setFlags({ pending: false });\n        if (!this$1.isRequired) {\n          this$1.setFlags({ valid: result.valid, invalid: !result.valid });\n        }\n\n        return result;\n      });\n    },\n    applyResult: function applyResult (ref) {\n      var errors = ref.errors;\n      var failedRules = ref.failedRules;\n\n      this.messages = errors;\n      this.failedRules = assign({}, failedRules);\n      this.setFlags({\n        valid: !errors.length,\n        changed: this.value !== this.initialValue,\n        invalid: !!errors.length,\n        validated: true\n      });\n    },\n    registerField: function registerField () {\n      if (!$validator) {\n        $validator = getValidator() || new Validator(null, { fastExit: getConfig().fastExit });\n      }\n\n      updateRenderingContextRefs(this);\n    }\n  }\n};\n\nfunction createValidationCtx (ctx) {\n  return {\n    errors: ctx.messages,\n    flags: ctx.flags,\n    classes: ctx.classes,\n    valid: ctx.isValid,\n    failedRules: ctx.failedRules,\n    reset: function () { return ctx.reset(); },\n    validate: function () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      return ctx.validate.apply(ctx, args);\n  },\n    aria: {\n      'aria-invalid': ctx.flags.invalid ? 'true' : 'false',\n      'aria-required': ctx.isRequired ? 'true' : 'false'\n    }\n  };\n}\n\nfunction normalizeValue$1 (value) {\n  if (isEvent(value)) {\n    return value.target.type === 'file' ? toArray(value.target.files) : value.target.value;\n  }\n\n  return value;\n}\n\n/**\n * Determines if a provider needs to run validation.\n */\nfunction shouldValidate (ctx, model) {\n  // when an immediate/initial validation is needed and wasn't done before.\n  if (!ctx._ignoreImmediate && ctx.immediate) {\n    return true;\n  }\n\n  // when the value changes for whatever reason.\n  if (ctx.value !== model.value) {\n    return true;\n  }\n\n  // when it needs validation due to props/cross-fields changes.\n  if (ctx._needsValidation) {\n    return true;\n  }\n\n  // when the initial value is undefined and the field wasn't rendered yet.\n  if (!ctx.initialized && model.value === undefined) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction computeModeSetting (ctx) {\n  var compute = isCallable(ctx.mode) ? ctx.mode : modes[ctx.mode];\n\n  return compute({\n    errors: ctx.messages,\n    value: ctx.value,\n    flags: ctx.flags\n  });\n}\n\nfunction onRenderUpdate (model) {\n  if (!this.initialized) {\n    this.initialValue = model.value;\n  }\n\n  var validateNow = shouldValidate(this, model);\n  this._needsValidation = false;\n  this.value = model.value;\n  this._ignoreImmediate = true;\n\n  if (!validateNow) {\n    return;\n  }\n\n  this.validateSilent().then(this.immediate || this.flags.validated ? this.applyResult : function (x) { return x; });\n}\n\n// Creates the common handlers for a validatable context.\nfunction createCommonHandlers (ctx) {\n  var onInput = function (e) {\n    ctx.syncValue(e); // track and keep the value updated.\n    ctx.setFlags({ dirty: true, pristine: false });\n  };\n\n  // Blur event listener.\n  var onBlur = function () {\n    ctx.setFlags({ touched: true, untouched: false });\n  };\n\n  var onValidate = ctx.$veeHandler;\n  var mode = computeModeSetting(ctx);\n\n  // Handle debounce changes.\n  if (!onValidate || ctx.$veeDebounce !== ctx.debounce) {\n    onValidate = debounce(\n      function () {\n        ctx.$nextTick(function () {\n          var pendingPromise = ctx.validateSilent();\n          // avoids race conditions between successive validations.\n          ctx._pendingValidation = pendingPromise;\n          pendingPromise.then(function (result) {\n            if (pendingPromise === ctx._pendingValidation) {\n              ctx.applyResult(result);\n              ctx._pendingValidation = null;\n            }\n          });\n        });\n      },\n      mode.debounce || ctx.debounce\n    );\n\n    // Cache the handler so we don't create it each time.\n    ctx.$veeHandler = onValidate;\n    // cache the debounce value so we detect if it was changed.\n    ctx.$veeDebounce = ctx.debounce;\n  }\n\n  return { onInput: onInput, onBlur: onBlur, onValidate: onValidate };\n}\n\n// Adds all plugin listeners to the vnode.\nfunction addListeners (node) {\n  var model = findModel(node);\n  // cache the input eventName.\n  this._inputEventName = this._inputEventName || getInputEventName(node, model);\n\n  onRenderUpdate.call(this, model);\n\n  var ref = createCommonHandlers(this);\n  var onInput = ref.onInput;\n  var onBlur = ref.onBlur;\n  var onValidate = ref.onValidate;\n  addVNodeListener(node, this._inputEventName, onInput);\n  addVNodeListener(node, 'blur', onBlur);\n\n  // add the validation listeners.\n  this.normalizedEvents.forEach(function (evt) {\n    addVNodeListener(node, evt, onValidate);\n  });\n\n  this.initialized = true;\n}\n\nfunction createValuesLookup (ctx) {\n  var providers = ctx.$_veeObserver.refs;\n\n  return ctx.fieldDeps.reduce(function (acc, depName) {\n    if (!providers[depName]) {\n      return acc;\n    }\n\n    acc[depName] = providers[depName].value;\n\n    return acc;\n  }, {});\n}\n\nfunction updateRenderingContextRefs (ctx) {\n  // IDs should not be nullable.\n  if (isNullOrUndefined(ctx.id) && ctx.id === ctx.vid) {\n    ctx.id = PROVIDER_COUNTER;\n    PROVIDER_COUNTER++;\n  }\n\n  var id = ctx.id;\n  var vid = ctx.vid;\n  // Nothing has changed.\n  if (ctx.isDeactivated || (id === vid && ctx.$_veeObserver.refs[id])) {\n    return;\n  }\n\n  // vid was changed.\n  if (id !== vid && ctx.$_veeObserver.refs[id] === ctx) {\n    ctx.$_veeObserver.unsubscribe(ctx);\n  }\n\n  ctx.$_veeObserver.subscribe(ctx);\n  ctx.id = vid;\n}\n\nfunction createObserver () {\n  return {\n    refs: {},\n    subscribe: function subscribe (ctx) {\n      this.refs[ctx.vid] = ctx;\n    },\n    unsubscribe: function unsubscribe (ctx) {\n      delete this.refs[ctx.vid];\n    }\n  };\n}\n\nfunction watchCrossFieldDep (ctx, depName, withHooks) {\n  if ( withHooks === void 0 ) withHooks = true;\n\n  var providers = ctx.$_veeObserver.refs;\n  if (!ctx._veeWatchers) {\n    ctx._veeWatchers = {};\n  }\n\n  if (!providers[depName] && withHooks) {\n    return ctx.$once('hook:mounted', function () {\n      watchCrossFieldDep(ctx, depName, false);\n    });\n  }\n\n  if (!isCallable(ctx._veeWatchers[depName]) && providers[depName]) {\n    ctx._veeWatchers[depName] = providers[depName].$watch('value', function () {\n      if (ctx.flags.validated) {\n        ctx._needsValidation = true;\n        ctx.validate();\n      }\n    });\n  }\n}\n\nvar flagMergingStrategy = {\n  pristine: 'every',\n  dirty: 'some',\n  touched: 'some',\n  untouched: 'every',\n  valid: 'every',\n  invalid: 'some',\n  pending: 'some',\n  validated: 'every'\n};\n\nfunction mergeFlags (lhs, rhs, strategy) {\n  var stratName = flagMergingStrategy[strategy];\n\n  return [lhs, rhs][stratName](function (f) { return f; });\n}\n\nvar OBSERVER_COUNTER = 0;\n\nvar ValidationObserver = {\n  name: 'ValidationObserver',\n  provide: function provide () {\n    return {\n      $_veeObserver: this\n    };\n  },\n  inject: {\n    $_veeObserver: {\n      from: '$_veeObserver',\n      default: function default$1 () {\n        if (!this.$vnode.context.$_veeObserver) {\n          return null;\n        }\n\n        return this.$vnode.context.$_veeObserver;\n      }\n    }\n  },\n  props: {\n    tag: {\n      type: String,\n      default: 'span'\n    },\n    slim: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function () { return ({\n    vid: (\"obs_\" + (OBSERVER_COUNTER++)),\n    refs: {},\n    observers: [],\n    persistedStore: {}\n  }); },\n  computed: {\n    ctx: function ctx () {\n      var this$1 = this;\n\n      var ctx = {\n        errors: {},\n        validate: function (arg) {\n          var promise = this$1.validate(arg);\n\n          return {\n            then: function then (thenable) {\n              return promise.then(function (success) {\n                if (success && isCallable(thenable)) {\n                  return Promise.resolve(thenable());\n                }\n\n                return Promise.resolve(success);\n              });\n            }\n          };\n        },\n        reset: function () { return this$1.reset(); }\n      };\n\n      return values(this.refs).concat( Object.keys(this.persistedStore).map(function (key) {\n          return {\n            vid: key,\n            flags: this$1.persistedStore[key].flags,\n            messages: this$1.persistedStore[key].errors\n          };\n        }),\n        this.observers ).reduce(function (acc, provider) {\n        Object.keys(flagMergingStrategy).forEach(function (flag) {\n          var flags = provider.flags || provider.ctx;\n          if (!(flag in acc)) {\n            acc[flag] = flags[flag];\n            return;\n          }\n\n          acc[flag] = mergeFlags(acc[flag], flags[flag], flag);\n        });\n\n        acc.errors[provider.vid] = provider.messages || values(provider.ctx.errors).reduce(function (errs, obsErrors) {\n          return errs.concat(obsErrors);\n        }, []);\n\n        return acc;\n      }, ctx);\n    }\n  },\n  created: function created () {\n    if (this.$_veeObserver) {\n      this.$_veeObserver.subscribe(this, 'observer');\n    }\n  },\n  activated: function activated () {\n    if (this.$_veeObserver) {\n      this.$_veeObserver.subscribe(this, 'observer');\n    }\n  },\n  deactivated: function deactivated () {\n    if (this.$_veeObserver) {\n      this.$_veeObserver.unsubscribe(this, 'observer');\n    }\n  },\n  beforeDestroy: function beforeDestroy () {\n    if (this.$_veeObserver) {\n      this.$_veeObserver.unsubscribe(this, 'observer');\n    }\n  },\n  render: function render (h) {\n    var slots = this.$slots.default || this.$scopedSlots.default || [];\n    if (isCallable(slots)) {\n      slots = slots(this.ctx);\n    }\n\n    return this.slim ? createRenderless(h, slots) : h(this.tag, { on: this.$listeners, attrs: this.$attrs }, slots);\n  },\n  methods: {\n    subscribe: function subscribe (subscriber, kind) {\n      var obj;\n\n      if ( kind === void 0 ) kind = 'provider';\n      if (kind === 'observer') {\n        this.observers.push(subscriber);\n        return;\n      }\n\n      this.refs = Object.assign({}, this.refs, ( obj = {}, obj[subscriber.vid] = subscriber, obj ));\n      if (subscriber.persist && this.persistedStore[subscriber.vid]) {\n        this.restoreProviderState(subscriber);\n      }\n    },\n    unsubscribe: function unsubscribe (ref, kind) {\n      var vid = ref.vid;\n      if ( kind === void 0 ) kind = 'provider';\n\n      if (kind === 'provider') {\n        this.removeProvider(vid);\n      }\n\n      var idx = findIndex(this.observers, function (o) { return o.vid === vid; });\n      if (idx !== -1) {\n        this.observers.splice(idx, 1);\n      }\n    },\n    validate: function validate (ref) {\n      if ( ref === void 0 ) ref = { silent: false };\n      var silent = ref.silent;\n\n      return Promise.all(values(this.refs).map(function (ref) { return ref[silent ? 'validateSilent' : 'validate']().then(function (r) { return r.valid; }); }).concat( this.observers.map(function (obs) { return obs.validate({ silent: silent }); })\n      )).then(function (results) { return results.every(function (r) { return r; }); });\n    },\n    reset: function reset () {\n      var this$1 = this;\n\n      Object.keys(this.persistedStore).forEach(function (key) {\n        this$1.$delete(this$1.persistedStore, key);\n      });\n      return values(this.refs).concat( this.observers).forEach(function (ref) { return ref.reset(); });\n    },\n    restoreProviderState: function restoreProviderState (provider) {\n      var state = this.persistedStore[provider.vid];\n      provider.setFlags(state.flags);\n      provider.applyResult(state);\n      this.$delete(this.persistedStore, provider.vid);\n    },\n    removeProvider: function removeProvider (vid) {\n      var obj;\n\n      var provider = this.refs[vid];\n      // save it for the next time.\n      if (provider && provider.persist) {\n        /* istanbul ignore else */\n        if (true) {\n          if (vid.indexOf('_vee_') === 0) {\n            warn('Please provide a `vid` prop when using `persist`, there might be unexpected issues otherwise.');\n          }\n        }\n\n        this.persistedStore = assign({}, this.persistedStore, ( obj = {}, obj[vid] = {\n            flags: provider.flags,\n            errors: provider.messages,\n            failedRules: provider.failedRules\n          }, obj ));\n      }\n\n      this.$delete(this.refs, vid);\n    },\n  }\n};\n\nfunction withValidation (component, ctxToProps) {\n  if ( ctxToProps === void 0 ) ctxToProps = null;\n\n  var options = isCallable(component) ? component.options : component;\n  options.$__veeInject = false;\n  var hoc = {\n    name: ((options.name || 'AnonymousHoc') + \"WithValidation\"),\n    props: assign({}, ValidationProvider.props),\n    data: ValidationProvider.data,\n    computed: assign({}, ValidationProvider.computed),\n    methods: assign({}, ValidationProvider.methods),\n    $__veeInject: false,\n    beforeDestroy: ValidationProvider.beforeDestroy,\n    inject: ValidationProvider.inject\n  };\n\n  // Default ctx converts ctx props to component props.\n  if (!ctxToProps) {\n    ctxToProps = function (ctx) { return ctx; };\n  }\n\n  var eventName = (options.model && options.model.event) || 'input';\n\n  hoc.render = function (h) {\n    var obj;\n\n    this.registerField();\n    var vctx = createValidationCtx(this);\n    var listeners = assign({}, this.$listeners);\n\n    var model = findModel(this.$vnode);\n    this._inputEventName = this._inputEventName || getInputEventName(this.$vnode, model);\n    onRenderUpdate.call(this, model);\n\n    var ref = createCommonHandlers(this);\n    var onInput = ref.onInput;\n    var onBlur = ref.onBlur;\n    var onValidate = ref.onValidate;\n\n    mergeVNodeListeners(listeners, eventName, onInput);\n    mergeVNodeListeners(listeners, 'blur', onBlur);\n    this.normalizedEvents.forEach(function (evt, idx) {\n      mergeVNodeListeners(listeners, evt, onValidate);\n    });\n\n    // Props are any attrs not associated with ValidationProvider Plus the model prop.\n    // WARNING: Accidental prop overwrite will probably happen.\n    var ref$1 = findModelConfig(this.$vnode) || { prop: 'value' };\n    var prop = ref$1.prop;\n    var props = assign({}, this.$attrs, ( obj = {}, obj[prop] = model.value, obj ), ctxToProps(vctx));\n\n    return h(options, {\n      attrs: this.$attrs,\n      props: props,\n      on: listeners\n    }, normalizeSlots(this.$slots, this.$vnode.context));\n  };\n\n  return hoc;\n}\n\nvar version = '2.2.12';\n\nObject.keys(Rules).forEach(function (rule) {\n  Validator.extend(rule, Rules[rule].validate, assign({}, Rules[rule].options, { paramNames: Rules[rule].paramNames }));\n});\n\n// Merge the english messages.\nValidator.localize({ en: locale });\n\nvar install = VeeValidate$1.install;\n\nVeeValidate$1.version = version;\nVeeValidate$1.mapFields = mapFields;\nVeeValidate$1.ValidationProvider = ValidationProvider;\nVeeValidate$1.ValidationObserver = ValidationObserver;\nVeeValidate$1.withValidation = withValidation;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (VeeValidate$1);\n\n\n\n//# sourceURL=webpack:///./node_modules/vee-validate/dist/vee-validate.esm.js?");

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/js/components/LoginForm.vue?vue&type=template&id=b397ab9e&":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/js/components/LoginForm.vue?vue&type=template&id=b397ab9e& ***!
  \******************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"content mod-login\" }, [\n    _c(\"div\", { staticClass: \"login-wrapper\" }, [\n      _c(\"div\", { staticClass: \"login-wrapper__title\" }, [_vm._v(\"Admin\")]),\n      _vm._v(\" \"),\n      _c(\n        \"form\",\n        {\n          attrs: { action: _vm.route, method: _vm.method },\n          on: { submit: _vm.checkForm }\n        },\n        [\n          _c(\"input\", {\n            attrs: { type: \"hidden\", name: \"_token\" },\n            domProps: { value: _vm.token }\n          }),\n          _vm._v(\" \"),\n          _vm._l(_vm.errorsJsonParse, function(error) {\n            return _c(\n              \"div\",\n              { staticClass: \"login-wrapper-from__error-container\" },\n              _vm._l(error, function(message) {\n                return _c(\"div\", { staticClass: \"login-wrapper-from__error\" }, [\n                  _vm._v(\n                    \"\\n                    \" +\n                      _vm._s(message) +\n                      \"\\n                \"\n                  )\n                ])\n              }),\n              0\n            )\n          }),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"login-wrapper__from\" }, [\n            _c(\"div\", { staticClass: \"login-wrapper-from__group\" }, [\n              _c(\"label\", { attrs: { for: \"email\" } }, [_vm._v(\"Почта\")]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.email,\n                    expression: \"email\"\n                  },\n                  {\n                    name: \"validate\",\n                    rawName: \"v-validate\",\n                    value: \"required|email\",\n                    expression: \"'required|email'\"\n                  }\n                ],\n                attrs: {\n                  type: \"text\",\n                  id: \"email\",\n                  name: \"email\",\n                  \"data-vv-as\": \"Почта\"\n                },\n                domProps: { value: _vm.email },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.email = $event.target.value\n                  }\n                }\n              }),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"login-wrapper-from__error\" }, [\n                _vm._v(_vm._s(_vm.errors.first(\"email\")))\n              ])\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"login-wrapper-from__group\" }, [\n              _c(\"label\", { attrs: { for: \"password\" } }, [_vm._v(\"Пароль\")]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.password,\n                    expression: \"password\"\n                  },\n                  {\n                    name: \"validate\",\n                    rawName: \"v-validate\",\n                    value: \"required\",\n                    expression: \"'required'\"\n                  }\n                ],\n                attrs: {\n                  type: \"password\",\n                  id: \"password\",\n                  name: \"password\",\n                  \"data-vv-as\": \"Пароль\"\n                },\n                domProps: { value: _vm.password },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.password = $event.target.value\n                  }\n                }\n              }),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"login-wrapper-from__error\" }, [\n                _vm._v(_vm._s(_vm.errors.first(\"password\")))\n              ])\n            ]),\n            _vm._v(\" \"),\n            _c(\n              \"button\",\n              {\n                staticClass: \"login-wrapper-from__button\",\n                attrs: { type: \"submit\" }\n              },\n              [_vm._v(\"Войти\")]\n            )\n          ])\n        ],\n        2\n      )\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n\n//# sourceURL=webpack:///./src/js/components/LoginForm.vue?./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/File.vue?vue&type=template&id=5191c18b&":
/*!******************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/js/components/form/File.vue?vue&type=template&id=5191c18b& ***!
  \******************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"form-group__field-file__container\" }, [\n    _c(\n      \"button\",\n      {\n        staticClass: \"form-group__field-file\",\n        attrs: { type: \"button\" },\n        on: { click: _vm.openManager }\n      },\n      [_vm._v(\"Выбрать\")]\n    ),\n    _vm._v(\" \"),\n    _c(\"img\", {\n      staticClass: \"form-group__field-file__image\",\n      attrs: { src: _vm.url, alt: _vm.fileName }\n    }),\n    _vm._v(\" \"),\n    _c(\"input\", {\n      directives: [\n        { name: \"model\", rawName: \"v-model\", value: _vm.url, expression: \"url\" }\n      ],\n      attrs: { type: \"hidden\", name: _vm.name },\n      domProps: { value: _vm.url },\n      on: {\n        input: function($event) {\n          if ($event.target.composing) {\n            return\n          }\n          _vm.url = $event.target.value\n        }\n      }\n    })\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n\n//# sourceURL=webpack:///./src/js/components/form/File.vue?./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/ImageIterator.vue?vue&type=template&id=9d90412c&":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/js/components/form/ImageIterator.vue?vue&type=template&id=9d90412c& ***!
  \***************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"form-group__iterator-image\" },\n    [\n      _c(\n        \"div\",\n        {\n          directives: [\n            {\n              name: \"show\",\n              rawName: \"v-show\",\n              value: _vm.images.length === 0,\n              expression: \"images.length === 0\"\n            }\n          ]\n        },\n        [_vm._v(\"Нет элементов\")]\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"draggable\",\n        {\n          model: {\n            value: _vm.images,\n            callback: function($$v) {\n              _vm.images = $$v\n            },\n            expression: \"images\"\n          }\n        },\n        [\n          _c(\n            \"transition-group\",\n            { attrs: { type: \"transition\" } },\n            _vm._l(_vm.images, function(image, index) {\n              return _c(\n                \"div\",\n                {\n                  key: image.id,\n                  staticClass: \"form-group__iterator-image_container\"\n                },\n                [\n                  _c(\"div\", { staticClass: \"form-group__iterator-drag\" }),\n                  _vm._v(\" \"),\n                  _c(\"file\", {\n                    attrs: {\n                      name: \"images[\" + index + \"][image]\",\n                      default: image.image\n                    }\n                  }),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: image.name,\n                        expression: \"image.name\"\n                      }\n                    ],\n                    staticClass: \"form-group__field iterator-image-name\",\n                    attrs: {\n                      name: \"images[\" + index + \"][name]\",\n                      type: \"text\"\n                    },\n                    domProps: { value: image.name },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(image, \"name\", $event.target.value)\n                      }\n                    }\n                  }),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: image.id,\n                        expression: \"image.id\"\n                      }\n                    ],\n                    attrs: {\n                      type: \"hidden\",\n                      name: \"images[\" + index + \"][id]\"\n                    },\n                    domProps: { value: image.id },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(image, \"id\", $event.target.value)\n                      }\n                    }\n                  }),\n                  _vm._v(\" \"),\n                  _c(\n                    \"button\",\n                    {\n                      staticClass: \"form-group__field-file\",\n                      attrs: { type: \"button\" },\n                      on: {\n                        click: function($event) {\n                          return _vm.removeIterate(index)\n                        }\n                      }\n                    },\n                    [_vm._v(\"Удалить\\n                \")]\n                  )\n                ],\n                1\n              )\n            }),\n            0\n          )\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"button\",\n        {\n          staticClass: \"form-group__field-file field-file-iterator\",\n          attrs: { type: \"button\" },\n          on: { click: _vm.addIterate }\n        },\n        [_vm._v(\"Добавить\")]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n\n//# sourceURL=webpack:///./src/js/components/form/ImageIterator.vue?./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/MultiSelect.vue?vue&type=template&id=a401e754&":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/js/components/form/MultiSelect.vue?vue&type=template&id=a401e754& ***!
  \*************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\"multi-list-select\", {\n        attrs: {\n          list: _vm.data,\n          \"selected-items\": _vm.selectedItems,\n          \"option-value\": _vm.value,\n          \"option-text\": _vm.text,\n          placeholder: \"Выберите элементы\"\n        },\n        on: { select: _vm.onSelect }\n      }),\n      _vm._v(\" \"),\n      _vm._l(_vm.selectedItems, function(item) {\n        return _c(\"div\", [\n          _c(\"input\", {\n            directives: [\n              {\n                name: \"model\",\n                rawName: \"v-model\",\n                value: item[_vm.value],\n                expression: \"item[value]\"\n              }\n            ],\n            attrs: { type: \"hidden\", name: _vm.name + \"[]\" },\n            domProps: { value: item[_vm.value] },\n            on: {\n              input: function($event) {\n                if ($event.target.composing) {\n                  return\n                }\n                _vm.$set(item, _vm.value, $event.target.value)\n              }\n            }\n          })\n        ])\n      })\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n\n//# sourceURL=webpack:///./src/js/components/form/MultiSelect.vue?./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/Select.vue?vue&type=template&id=b5f5816a&":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/js/components/form/Select.vue?vue&type=template&id=b5f5816a& ***!
  \********************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\"model-list-select\", {\n        attrs: {\n          list: _vm.data,\n          \"option-value\": _vm.value,\n          \"option-text\": _vm.text,\n          placeholder: \"Выберите элемент\"\n        },\n        model: {\n          value: _vm.objectItem,\n          callback: function($$v) {\n            _vm.objectItem = $$v\n          },\n          expression: \"objectItem\"\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\"input\", {\n        directives: [\n          {\n            name: \"model\",\n            rawName: \"v-model\",\n            value: _vm.objectItem[_vm.value],\n            expression: \"objectItem[value]\"\n          }\n        ],\n        attrs: { type: \"hidden\", name: _vm.name },\n        domProps: { value: _vm.objectItem[_vm.value] },\n        on: {\n          input: function($event) {\n            if ($event.target.composing) {\n              return\n            }\n            _vm.$set(_vm.objectItem, _vm.value, $event.target.value)\n          }\n        }\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n\n//# sourceURL=webpack:///./src/js/components/form/Select.vue?./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options");

/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n//# sourceURL=webpack:///./node_modules/vue-loader/lib/runtime/componentNormalizer.js?");

/***/ }),

/***/ "./node_modules/vue-search-select/publish/vue-search-select.js":
/*!*********************************************************************!*\
  !*** ./node_modules/vue-search-select/publish/vue-search-select.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"./\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ModelListSelect = exports.ModelSelect = exports.MultiListSelect = exports.ListSelect = exports.MultiSelect = exports.BasicSelect = undefined;\n\t\n\tvar _BasicSelect = __webpack_require__(44);\n\t\n\tvar _BasicSelect2 = _interopRequireDefault(_BasicSelect);\n\t\n\tvar _ListSelect = __webpack_require__(97);\n\t\n\tvar _ListSelect2 = _interopRequireDefault(_ListSelect);\n\t\n\tvar _MultiListSelect = __webpack_require__(99);\n\t\n\tvar _MultiListSelect2 = _interopRequireDefault(_MultiListSelect);\n\t\n\tvar _MultiSelect = __webpack_require__(46);\n\t\n\tvar _MultiSelect2 = _interopRequireDefault(_MultiSelect);\n\t\n\tvar _ModelSelect = __webpack_require__(45);\n\t\n\tvar _ModelSelect2 = _interopRequireDefault(_ModelSelect);\n\t\n\tvar _ModelListSelect = __webpack_require__(98);\n\t\n\tvar _ModelListSelect2 = _interopRequireDefault(_ModelListSelect);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.BasicSelect = _BasicSelect2.default;\n\texports.MultiSelect = _MultiSelect2.default;\n\texports.ListSelect = _ListSelect2.default;\n\texports.MultiListSelect = _MultiListSelect2.default;\n\texports.ModelSelect = _ModelSelect2.default;\n\texports.ModelListSelect = _ModelListSelect2.default;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n\tvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n\t  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\n\tif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tvar hasOwnProperty = {}.hasOwnProperty;\n\tmodule.exports = function(it, key){\n\t  return hasOwnProperty.call(it, key);\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// to indexed object, toObject with fallback for non-array-like ES3 strings\n\tvar IObject = __webpack_require__(68)\n\t  , defined = __webpack_require__(20);\n\tmodule.exports = function(it){\n\t  return IObject(defined(it));\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\n\t\tAuthor Tobias Koppers @sokra\n\t*/\n\tvar stylesInDom = {},\n\t\tmemoize = function(fn) {\n\t\t\tvar memo;\n\t\t\treturn function () {\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\t\t\treturn memo;\n\t\t\t};\n\t\t},\n\t\tisOldIE = memoize(function() {\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\n\t\t}),\n\t\tgetHeadElement = memoize(function () {\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\n\t\t}),\n\t\tsingletonElement = null,\n\t\tsingletonCounter = 0,\n\t\tstyleElementsInsertedAtTop = [];\n\t\n\tmodule.exports = function(list, options) {\n\t\tif(false) {}\n\t\n\t\toptions = options || {};\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t\t// tags it will allow on a page\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\n\t\n\t\t// By default, add <style> tags to the bottom of <head>.\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\n\t\n\t\tvar styles = listToStyles(list);\n\t\taddStylesToDom(styles, options);\n\t\n\t\treturn function update(newList) {\n\t\t\tvar mayRemove = [];\n\t\t\tfor(var i = 0; i < styles.length; i++) {\n\t\t\t\tvar item = styles[i];\n\t\t\t\tvar domStyle = stylesInDom[item.id];\n\t\t\t\tdomStyle.refs--;\n\t\t\t\tmayRemove.push(domStyle);\n\t\t\t}\n\t\t\tif(newList) {\n\t\t\t\tvar newStyles = listToStyles(newList);\n\t\t\t\taddStylesToDom(newStyles, options);\n\t\t\t}\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\n\t\t\t\tvar domStyle = mayRemove[i];\n\t\t\t\tif(domStyle.refs === 0) {\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\n\t\t\t\t\t\tdomStyle.parts[j]();\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\t\n\tfunction addStylesToDom(styles, options) {\n\t\tfor(var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\t\t\tif(domStyle) {\n\t\t\t\tdomStyle.refs++;\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t\t}\n\t\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar parts = [];\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t\t}\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction listToStyles(list) {\n\t\tvar styles = [];\n\t\tvar newStyles = {};\n\t\tfor(var i = 0; i < list.length; i++) {\n\t\t\tvar item = list[i];\n\t\t\tvar id = item[0];\n\t\t\tvar css = item[1];\n\t\t\tvar media = item[2];\n\t\t\tvar sourceMap = item[3];\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\t\t\tif(!newStyles[id])\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\n\t\t\telse\n\t\t\t\tnewStyles[id].parts.push(part);\n\t\t}\n\t\treturn styles;\n\t}\n\t\n\tfunction insertStyleElement(options, styleElement) {\n\t\tvar head = getHeadElement();\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\n\t\tif (options.insertAt === \"top\") {\n\t\t\tif(!lastStyleElementInsertedAtTop) {\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\n\t\t\t} else {\n\t\t\t\thead.appendChild(styleElement);\n\t\t\t}\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\n\t\t} else if (options.insertAt === \"bottom\") {\n\t\t\thead.appendChild(styleElement);\n\t\t} else {\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\n\t\t}\n\t}\n\t\n\tfunction removeStyleElement(styleElement) {\n\t\tstyleElement.parentNode.removeChild(styleElement);\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\n\t\tif(idx >= 0) {\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\n\t\t}\n\t}\n\t\n\tfunction createStyleElement(options) {\n\t\tvar styleElement = document.createElement(\"style\");\n\t\tstyleElement.type = \"text/css\";\n\t\tinsertStyleElement(options, styleElement);\n\t\treturn styleElement;\n\t}\n\t\n\tfunction addStyle(obj, options) {\n\t\tvar styleElement, update, remove;\n\t\n\t\tif (options.singleton) {\n\t\t\tvar styleIndex = singletonCounter++;\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\n\t\t} else {\n\t\t\tstyleElement = createStyleElement(options);\n\t\t\tupdate = applyToTag.bind(null, styleElement);\n\t\t\tremove = function() {\n\t\t\t\tremoveStyleElement(styleElement);\n\t\t\t};\n\t\t}\n\t\n\t\tupdate(obj);\n\t\n\t\treturn function updateStyle(newObj) {\n\t\t\tif(newObj) {\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\n\t\t\t\t\treturn;\n\t\t\t\tupdate(obj = newObj);\n\t\t\t} else {\n\t\t\t\tremove();\n\t\t\t}\n\t\t};\n\t}\n\t\n\tvar replaceText = (function () {\n\t\tvar textStore = [];\n\t\n\t\treturn function (index, replacement) {\n\t\t\ttextStore[index] = replacement;\n\t\t\treturn textStore.filter(Boolean).join('\\n');\n\t\t};\n\t})();\n\t\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\n\t\tvar css = remove ? \"\" : obj.css;\n\t\n\t\tif (styleElement.styleSheet) {\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\n\t\t} else {\n\t\t\tvar cssNode = document.createTextNode(css);\n\t\t\tvar childNodes = styleElement.childNodes;\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\n\t\t\tif (childNodes.length) {\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\n\t\t\t} else {\n\t\t\t\tstyleElement.appendChild(cssNode);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction applyToTag(styleElement, obj) {\n\t\tvar css = obj.css;\n\t\tvar media = obj.media;\n\t\tvar sourceMap = obj.sourceMap;\n\t\n\t\tif (media) {\n\t\t\tstyleElement.setAttribute(\"media\", media);\n\t\t}\n\t\n\t\tif (sourceMap) {\n\t\t\t// https://developer.chrome.com/devtools/docs/javascript-debugging\n\t\t\t// this makes source maps inside style tags work properly in Chrome\n\t\t\tcss += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */';\n\t\t\t// http://stackoverflow.com/a/26603875\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t\t}\n\t\n\t\tif (styleElement.styleSheet) {\n\t\t\tstyleElement.styleSheet.cssText = css;\n\t\t} else {\n\t\t\twhile(styleElement.firstChild) {\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\n\t\t\t}\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\n\t\t}\n\t}\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.optionAwareMixin = exports.commonMixin = exports.baseMixin = undefined;\n\t\n\tvar _commonMixin = __webpack_require__(54);\n\t\n\tvar _commonMixin2 = _interopRequireDefault(_commonMixin);\n\t\n\tvar _baseMixin = __webpack_require__(53);\n\t\n\tvar _baseMixin2 = _interopRequireDefault(_baseMixin);\n\t\n\tvar _optionAwareMixin = __webpack_require__(55);\n\t\n\tvar _optionAwareMixin2 = _interopRequireDefault(_optionAwareMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.baseMixin = _baseMixin2.default;\n\texports.commonMixin = _commonMixin2.default;\n\texports.optionAwareMixin = _optionAwareMixin2.default;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Thank's IE8 for his funny defineProperty\n\tmodule.exports = !__webpack_require__(12)(function(){\n\t  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n\t});\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar dP         = __webpack_require__(9)\n\t  , createDesc = __webpack_require__(16);\n\tmodule.exports = __webpack_require__(7) ? function(object, key, value){\n\t  return dP.f(object, key, createDesc(1, value));\n\t} : function(object, key, value){\n\t  object[key] = value;\n\t  return object;\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar anObject       = __webpack_require__(14)\n\t  , IE8_DOM_DEFINE = __webpack_require__(36)\n\t  , toPrimitive    = __webpack_require__(30)\n\t  , dP             = Object.defineProperty;\n\t\n\texports.f = __webpack_require__(7) ? Object.defineProperty : function defineProperty(O, P, Attributes){\n\t  anObject(O);\n\t  P = toPrimitive(P, true);\n\t  anObject(Attributes);\n\t  if(IE8_DOM_DEFINE)try {\n\t    return dP(O, P, Attributes);\n\t  } catch(e){ /* empty */ }\n\t  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');\n\t  if('value' in Attributes)O[P] = Attributes.value;\n\t  return O;\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar store      = __webpack_require__(28)('wks')\n\t  , uid        = __webpack_require__(17)\n\t  , Symbol     = __webpack_require__(1).Symbol\n\t  , USE_SYMBOL = typeof Symbol == 'function';\n\t\n\tvar $exports = module.exports = function(name){\n\t  return store[name] || (store[name] =\n\t    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n\t};\n\t\n\t$exports.store = store;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tvar core = module.exports = {version: '2.4.0'};\n\tif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(exec){\n\t  try {\n\t    return !!exec();\n\t  } catch(e){\n\t    return true;\n\t  }\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\tvar $keys       = __webpack_require__(41)\n\t  , enumBugKeys = __webpack_require__(21);\n\t\n\tmodule.exports = Object.keys || function keys(O){\n\t  return $keys(O, enumBugKeys);\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar isObject = __webpack_require__(15);\n\tmodule.exports = function(it){\n\t  if(!isObject(it))throw TypeError(it + ' is not an object!');\n\t  return it;\n\t};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(it){\n\t  return typeof it === 'object' ? it !== null : typeof it === 'function';\n\t};\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(bitmap, value){\n\t  return {\n\t    enumerable  : !(bitmap & 1),\n\t    configurable: !(bitmap & 2),\n\t    writable    : !(bitmap & 4),\n\t    value       : value\n\t  };\n\t};\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\tvar id = 0\n\t  , px = Math.random();\n\tmodule.exports = function(key){\n\t  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n\t};\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  openOptions: function openOptions(self) {\n\t    self.$refs.input.focus();\n\t    self.showMenu = true;\n\t    self.mousedownState = false;\n\t  },\n\t  blurInput: function blurInput(self) {\n\t    if (!self.mousedownState) {\n\t      self.searchText = '';\n\t      self.closeOptions();\n\t    }\n\t  },\n\t  closeOptions: function closeOptions(self) {\n\t    self.showMenu = false;\n\t  },\n\t  prevItem: function prevItem(self) {\n\t    var prevIndex = self.pointer - 1;\n\t    var prevIndexScrollTop = self.$el.offsetHeight * prevIndex;\n\t    if (prevIndex >= 0) {\n\t      self.pointer = prevIndex;\n\t    }\n\t\n\t    self.$refs.menu.scrollTop = prevIndexScrollTop;\n\t  },\n\t  nextItem: function nextItem(self) {\n\t    var nextIndex = self.pointer + 1;\n\t    var nextIndexScrollTop = self.$el.offsetHeight * nextIndex;\n\t    if (nextIndex <= self.filteredOptions.length - 1) {\n\t      self.pointer = nextIndex;\n\t    }\n\t\n\t    var currentMenuHeight = self.$refs.menu.offsetHeight;\n\t    var currentPage = Math.ceil((self.$refs.menu.scrollTop + self.$el.offsetHeight) / currentMenuHeight);\n\t    var itemPage = Math.ceil(nextIndexScrollTop / currentMenuHeight);\n\t\n\t    if (currentPage !== itemPage) {\n\t      self.$refs.menu.scrollTop = (itemPage - 1) * self.$refs.menu.offsetHeight;\n\t    }\n\t  },\n\t  enterItem: function enterItem(self) {\n\t    var currentItem = self.filteredOptions[self.pointer];\n\t    if (currentItem) {\n\t      self.selectItem(currentItem);\n\t    }\n\t  },\n\t  pointerSet: function pointerSet(self, index) {\n\t    self.pointer = index;\n\t  },\n\t  pointerAdjust: function pointerAdjust(self) {\n\t    if (self.pointer >= self.filteredOptions.length - 1) {\n\t      self.pointer = self.filteredOptions.length ? self.filteredOptions.length - 1 : 0;\n\t    }\n\t  },\n\t  mousedownItem: function mousedownItem(self) {\n\t    self.mousedownState = true;\n\t  }\n\t};\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(59), __esModule: true };\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t// 7.2.1 RequireObjectCoercible(argument)\n\tmodule.exports = function(it){\n\t  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n\t  return it;\n\t};\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\t// IE 8- don't enum bug keys\n\tmodule.exports = (\n\t  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n\t).split(',');\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar global    = __webpack_require__(1)\n\t  , core      = __webpack_require__(11)\n\t  , ctx       = __webpack_require__(65)\n\t  , hide      = __webpack_require__(8)\n\t  , PROTOTYPE = 'prototype';\n\t\n\tvar $export = function(type, name, source){\n\t  var IS_FORCED = type & $export.F\n\t    , IS_GLOBAL = type & $export.G\n\t    , IS_STATIC = type & $export.S\n\t    , IS_PROTO  = type & $export.P\n\t    , IS_BIND   = type & $export.B\n\t    , IS_WRAP   = type & $export.W\n\t    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n\t    , expProto  = exports[PROTOTYPE]\n\t    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n\t    , key, own, out;\n\t  if(IS_GLOBAL)source = name;\n\t  for(key in source){\n\t    // contains in native\n\t    own = !IS_FORCED && target && target[key] !== undefined;\n\t    if(own && key in exports)continue;\n\t    // export native or passed\n\t    out = own ? target[key] : source[key];\n\t    // prevent global pollution for namespaces\n\t    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n\t    // bind timers to global for call from export context\n\t    : IS_BIND && own ? ctx(out, global)\n\t    // wrap global constructors for prevent change them in library\n\t    : IS_WRAP && target[key] == out ? (function(C){\n\t      var F = function(a, b, c){\n\t        if(this instanceof C){\n\t          switch(arguments.length){\n\t            case 0: return new C;\n\t            case 1: return new C(a);\n\t            case 2: return new C(a, b);\n\t          } return new C(a, b, c);\n\t        } return C.apply(this, arguments);\n\t      };\n\t      F[PROTOTYPE] = C[PROTOTYPE];\n\t      return F;\n\t    // make static versions for prototype methods\n\t    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n\t    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n\t    if(IS_PROTO){\n\t      (exports.virtual || (exports.virtual = {}))[key] = out;\n\t      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n\t      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);\n\t    }\n\t  }\n\t};\n\t// type bitmap\n\t$export.F = 1;   // forced\n\t$export.G = 2;   // global\n\t$export.S = 4;   // static\n\t$export.P = 8;   // proto\n\t$export.B = 16;  // bind\n\t$export.W = 32;  // wrap\n\t$export.U = 64;  // safe\n\t$export.R = 128; // real proto method for `library` \n\tmodule.exports = $export;\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {};\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\tmodule.exports = true;\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\texports.f = {}.propertyIsEnumerable;\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar def = __webpack_require__(9).f\n\t  , has = __webpack_require__(2)\n\t  , TAG = __webpack_require__(10)('toStringTag');\n\t\n\tmodule.exports = function(it, tag, stat){\n\t  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n\t};\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar shared = __webpack_require__(28)('keys')\n\t  , uid    = __webpack_require__(17);\n\tmodule.exports = function(key){\n\t  return shared[key] || (shared[key] = uid(key));\n\t};\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar global = __webpack_require__(1)\n\t  , SHARED = '__core-js_shared__'\n\t  , store  = global[SHARED] || (global[SHARED] = {});\n\tmodule.exports = function(key){\n\t  return store[key] || (store[key] = {});\n\t};\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\t// 7.1.4 ToInteger\n\tvar ceil  = Math.ceil\n\t  , floor = Math.floor;\n\tmodule.exports = function(it){\n\t  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n\t};\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 7.1.1 ToPrimitive(input [, PreferredType])\n\tvar isObject = __webpack_require__(15);\n\t// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n\t// and the second argument - flag - preferred type is a string\n\tmodule.exports = function(it, S){\n\t  if(!isObject(it))return it;\n\t  var fn, val;\n\t  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n\t  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;\n\t  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;\n\t  throw TypeError(\"Can't convert object to primitive value\");\n\t};\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar global         = __webpack_require__(1)\n\t  , core           = __webpack_require__(11)\n\t  , LIBRARY        = __webpack_require__(24)\n\t  , wksExt         = __webpack_require__(32)\n\t  , defineProperty = __webpack_require__(9).f;\n\tmodule.exports = function(name){\n\t  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n\t  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});\n\t};\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports.f = __webpack_require__(10);\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\t\n\tvar _iterator = __webpack_require__(58);\n\t\n\tvar _iterator2 = _interopRequireDefault(_iterator);\n\t\n\tvar _symbol = __webpack_require__(57);\n\t\n\tvar _symbol2 = _interopRequireDefault(_symbol);\n\t\n\tvar _typeof = typeof _symbol2.default === \"function\" && typeof _iterator2.default === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default ? \"symbol\" : typeof obj; };\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = typeof _symbol2.default === \"function\" && _typeof(_iterator2.default) === \"symbol\" ? function (obj) {\n\t  return typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n\t} : function (obj) {\n\t  return obj && typeof _symbol2.default === \"function\" && obj.constructor === _symbol2.default ? \"symbol\" : typeof obj === \"undefined\" ? \"undefined\" : _typeof(obj);\n\t};\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n\tvar toString = {}.toString;\n\t\n\tmodule.exports = function(it){\n\t  return toString.call(it).slice(8, -1);\n\t};\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar isObject = __webpack_require__(15)\n\t  , document = __webpack_require__(1).document\n\t  // in old IE typeof document.createElement is 'object'\n\t  , is = isObject(document) && isObject(document.createElement);\n\tmodule.exports = function(it){\n\t  return is ? document.createElement(it) : {};\n\t};\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = !__webpack_require__(7) && !__webpack_require__(12)(function(){\n\t  return Object.defineProperty(__webpack_require__(35)('div'), 'a', {get: function(){ return 7; }}).a != 7;\n\t});\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar LIBRARY        = __webpack_require__(24)\n\t  , $export        = __webpack_require__(22)\n\t  , redefine       = __webpack_require__(42)\n\t  , hide           = __webpack_require__(8)\n\t  , has            = __webpack_require__(2)\n\t  , Iterators      = __webpack_require__(23)\n\t  , $iterCreate    = __webpack_require__(70)\n\t  , setToStringTag = __webpack_require__(26)\n\t  , getPrototypeOf = __webpack_require__(77)\n\t  , ITERATOR       = __webpack_require__(10)('iterator')\n\t  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n\t  , FF_ITERATOR    = '@@iterator'\n\t  , KEYS           = 'keys'\n\t  , VALUES         = 'values';\n\t\n\tvar returnThis = function(){ return this; };\n\t\n\tmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n\t  $iterCreate(Constructor, NAME, next);\n\t  var getMethod = function(kind){\n\t    if(!BUGGY && kind in proto)return proto[kind];\n\t    switch(kind){\n\t      case KEYS: return function keys(){ return new Constructor(this, kind); };\n\t      case VALUES: return function values(){ return new Constructor(this, kind); };\n\t    } return function entries(){ return new Constructor(this, kind); };\n\t  };\n\t  var TAG        = NAME + ' Iterator'\n\t    , DEF_VALUES = DEFAULT == VALUES\n\t    , VALUES_BUG = false\n\t    , proto      = Base.prototype\n\t    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n\t    , $default   = $native || getMethod(DEFAULT)\n\t    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined\n\t    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native\n\t    , methods, key, IteratorPrototype;\n\t  // Fix native\n\t  if($anyNative){\n\t    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));\n\t    if(IteratorPrototype !== Object.prototype){\n\t      // Set @@toStringTag to native iterators\n\t      setToStringTag(IteratorPrototype, TAG, true);\n\t      // fix for some old engines\n\t      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n\t    }\n\t  }\n\t  // fix Array#{values, @@iterator}.name in V8 / FF\n\t  if(DEF_VALUES && $native && $native.name !== VALUES){\n\t    VALUES_BUG = true;\n\t    $default = function values(){ return $native.call(this); };\n\t  }\n\t  // Define iterator\n\t  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n\t    hide(proto, ITERATOR, $default);\n\t  }\n\t  // Plug for library\n\t  Iterators[NAME] = $default;\n\t  Iterators[TAG]  = returnThis;\n\t  if(DEFAULT){\n\t    methods = {\n\t      values:  DEF_VALUES ? $default : getMethod(VALUES),\n\t      keys:    IS_SET     ? $default : getMethod(KEYS),\n\t      entries: $entries\n\t    };\n\t    if(FORCED)for(key in methods){\n\t      if(!(key in proto))redefine(proto, key, methods[key]);\n\t    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n\t  }\n\t  return methods;\n\t};\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n\tvar anObject    = __webpack_require__(14)\n\t  , dPs         = __webpack_require__(74)\n\t  , enumBugKeys = __webpack_require__(21)\n\t  , IE_PROTO    = __webpack_require__(27)('IE_PROTO')\n\t  , Empty       = function(){ /* empty */ }\n\t  , PROTOTYPE   = 'prototype';\n\t\n\t// Create object with fake `null` prototype: use iframe Object with cleared prototype\n\tvar createDict = function(){\n\t  // Thrash, waste and sodomy: IE GC bug\n\t  var iframe = __webpack_require__(35)('iframe')\n\t    , i      = enumBugKeys.length\n\t    , lt     = '<'\n\t    , gt     = '>'\n\t    , iframeDocument;\n\t  iframe.style.display = 'none';\n\t  __webpack_require__(67).appendChild(iframe);\n\t  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n\t  // createDict = iframe.contentWindow.Object;\n\t  // html.removeChild(iframe);\n\t  iframeDocument = iframe.contentWindow.document;\n\t  iframeDocument.open();\n\t  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n\t  iframeDocument.close();\n\t  createDict = iframeDocument.F;\n\t  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];\n\t  return createDict();\n\t};\n\t\n\tmodule.exports = Object.create || function create(O, Properties){\n\t  var result;\n\t  if(O !== null){\n\t    Empty[PROTOTYPE] = anObject(O);\n\t    result = new Empty;\n\t    Empty[PROTOTYPE] = null;\n\t    // add \"__proto__\" for Object.getPrototypeOf polyfill\n\t    result[IE_PROTO] = O;\n\t  } else result = createDict();\n\t  return Properties === undefined ? result : dPs(result, Properties);\n\t};\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\n\tvar $keys      = __webpack_require__(41)\n\t  , hiddenKeys = __webpack_require__(21).concat('length', 'prototype');\n\t\n\texports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){\n\t  return $keys(O, hiddenKeys);\n\t};\n\n/***/ },\n/* 40 */\n/***/ function(module, exports) {\n\n\texports.f = Object.getOwnPropertySymbols;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar has          = __webpack_require__(2)\n\t  , toIObject    = __webpack_require__(3)\n\t  , arrayIndexOf = __webpack_require__(64)(false)\n\t  , IE_PROTO     = __webpack_require__(27)('IE_PROTO');\n\t\n\tmodule.exports = function(object, names){\n\t  var O      = toIObject(object)\n\t    , i      = 0\n\t    , result = []\n\t    , key;\n\t  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);\n\t  // Don't enum bug & hidden keys\n\t  while(names.length > i)if(has(O, key = names[i++])){\n\t    ~arrayIndexOf(result, key) || result.push(key);\n\t  }\n\t  return result;\n\t};\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(8);\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 7.1.13 ToObject(argument)\n\tvar defined = __webpack_require__(20);\n\tmodule.exports = function(it){\n\t  return Object(defined(it));\n\t};\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_exports__, __vue_options__\n\tvar __vue_styles__ = {}\n\t\n\t/* styles */\n\t__webpack_require__(106)\n\t__webpack_require__(105)\n\t\n\t/* script */\n\t__vue_exports__ = __webpack_require__(47)\n\t\n\t/* template */\n\tvar __vue_template__ = __webpack_require__(101)\n\t__vue_options__ = __vue_exports__ = __vue_exports__ || {}\n\tif (\n\t  typeof __vue_exports__.default === \"object\" ||\n\t  typeof __vue_exports__.default === \"function\"\n\t) {\n\t__vue_options__ = __vue_exports__ = __vue_exports__.default\n\t}\n\tif (typeof __vue_options__ === \"function\") {\n\t  __vue_options__ = __vue_options__.options\n\t}\n\t\n\t__vue_options__.render = __vue_template__.render\n\t__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\t__vue_options__._scopeId = \"data-v-4030daa2\"\n\t\n\tmodule.exports = __vue_exports__\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_exports__, __vue_options__\n\tvar __vue_styles__ = {}\n\t\n\t/* styles */\n\t__webpack_require__(104)\n\t__webpack_require__(103)\n\t\n\t/* script */\n\t__vue_exports__ = __webpack_require__(50)\n\t\n\t/* template */\n\tvar __vue_template__ = __webpack_require__(100)\n\t__vue_options__ = __vue_exports__ = __vue_exports__ || {}\n\tif (\n\t  typeof __vue_exports__.default === \"object\" ||\n\t  typeof __vue_exports__.default === \"function\"\n\t) {\n\t__vue_options__ = __vue_exports__ = __vue_exports__.default\n\t}\n\tif (typeof __vue_options__ === \"function\") {\n\t  __vue_options__ = __vue_options__.options\n\t}\n\t\n\t__vue_options__.render = __vue_template__.render\n\t__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\t__vue_options__._scopeId = \"data-v-3a0c7bea\"\n\t\n\tmodule.exports = __vue_exports__\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_exports__, __vue_options__\n\tvar __vue_styles__ = {}\n\t\n\t/* styles */\n\t__webpack_require__(109)\n\t__webpack_require__(108)\n\t__webpack_require__(107)\n\t\n\t/* script */\n\t__vue_exports__ = __webpack_require__(52)\n\t\n\t/* template */\n\tvar __vue_template__ = __webpack_require__(102)\n\t__vue_options__ = __vue_exports__ = __vue_exports__ || {}\n\tif (\n\t  typeof __vue_exports__.default === \"object\" ||\n\t  typeof __vue_exports__.default === \"function\"\n\t) {\n\t__vue_options__ = __vue_exports__ = __vue_exports__.default\n\t}\n\tif (typeof __vue_options__ === \"function\") {\n\t  __vue_options__ = __vue_options__.options\n\t}\n\t\n\t__vue_options__.render = __vue_template__.render\n\t__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n\t__vue_options__._scopeId = \"data-v-a3dbfc0c\"\n\t\n\tmodule.exports = __vue_exports__\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _common = __webpack_require__(18);\n\t\n\tvar _common2 = _interopRequireDefault(_common);\n\t\n\tvar _mixins = __webpack_require__(6);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  mixins: [_mixins.baseMixin, _mixins.commonMixin, _mixins.optionAwareMixin],\n\t  props: {\n\t    selectedOption: {\n\t      type: Object,\n\t      default: function _default() {\n\t        return { value: '', text: '' };\n\t      }\n\t    }\n\t  },\n\t  data: function data() {\n\t    return {\n\t      showMenu: false,\n\t      searchText: '',\n\t      mousedownState: false,\n\t      pointer: -1\n\t    };\n\t  },\n\t\n\t  watch: {\n\t    selectedOption: function selectedOption(newValue) {\n\t      if (newValue && newValue.value) {\n\t        this.pointer = this.filteredOptions.findIndex(function (option) {\n\t          return option.value === newValue.value;\n\t        });\n\t      } else {\n\t        this.pointer = -1;\n\t      }\n\t    }\n\t  },\n\t  computed: {\n\t    searchTextCustomAttr: function searchTextCustomAttr() {\n\t      if (this.selectedOption && this.selectedOption.value) {\n\t        return this.customAttr(this.selectedOption);\n\t      }\n\t      return '';\n\t    },\n\t    inputText: function inputText() {\n\t      if (this.searchText) {\n\t        return '';\n\t      } else {\n\t        var text = this.placeholder;\n\t        if (this.selectedOption.text) {\n\t          text = this.selectedOption.text;\n\t        }\n\t        return text;\n\t      }\n\t    },\n\t    customAttrs: function customAttrs() {\n\t      var _this = this;\n\t\n\t      try {\n\t        if (Array.isArray(this.options)) {\n\t          return this.options.map(function (o) {\n\t            return _this.customAttr(o);\n\t          });\n\t        }\n\t      } catch (e) {}\n\t      return [];\n\t    },\n\t    textClass: function textClass() {\n\t      if (!this.selectedOption.text && this.placeholder) {\n\t        return 'default';\n\t      } else {\n\t        return '';\n\t      }\n\t    },\n\t    menuClass: function menuClass() {\n\t      return {\n\t        visible: this.showMenu,\n\t        hidden: !this.showMenu\n\t      };\n\t    },\n\t    menuStyle: function menuStyle() {\n\t      return {\n\t        display: this.showMenu ? 'block' : 'none'\n\t      };\n\t    },\n\t    filteredOptions: function filteredOptions() {\n\t      var _this2 = this;\n\t\n\t      if (this.searchText) {\n\t        return this.options.filter(function (option) {\n\t          try {\n\t            return _this2.filterPredicate(option.text, _this2.searchText);\n\t          } catch (e) {\n\t            return true;\n\t          }\n\t        });\n\t      } else {\n\t        return this.options;\n\t      }\n\t    }\n\t  },\n\t  methods: {\n\t    deleteTextOrItem: function deleteTextOrItem() {\n\t      if (!this.searchText && this.selectedOption) {\n\t        this.selectItem({});\n\t        this.openOptions();\n\t      }\n\t    },\n\t    openOptions: function openOptions() {\n\t      _common2.default.openOptions(this);\n\t    },\n\t    blurInput: function blurInput() {\n\t      _common2.default.blurInput(this);\n\t    },\n\t    closeOptions: function closeOptions() {\n\t      _common2.default.closeOptions(this);\n\t    },\n\t    prevItem: function prevItem() {\n\t      _common2.default.prevItem(this);\n\t    },\n\t    nextItem: function nextItem() {\n\t      _common2.default.nextItem(this);\n\t    },\n\t    enterItem: function enterItem() {\n\t      _common2.default.enterItem(this);\n\t    },\n\t    pointerSet: function pointerSet(index) {\n\t      _common2.default.pointerSet(this, index);\n\t    },\n\t    pointerAdjust: function pointerAdjust() {\n\t      _common2.default.pointerAdjust(this);\n\t    },\n\t    mousedownItem: function mousedownItem() {\n\t      _common2.default.mousedownItem(this);\n\t    },\n\t    selectItem: function selectItem(option) {\n\t      this.searchText = '';\n\t      this.closeOptions();\n\t      this.$emit('select', option);\n\t      if (option.value === option.text) {\n\t        this.searchText = option.value;\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _keys = __webpack_require__(19);\n\t\n\tvar _keys2 = _interopRequireDefault(_keys);\n\t\n\tvar _BasicSelect = __webpack_require__(44);\n\t\n\tvar _BasicSelect2 = _interopRequireDefault(_BasicSelect);\n\t\n\tvar _mixins = __webpack_require__(6);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  mixins: [_mixins.commonMixin],\n\t  render: function render(createElement) {\n\t    var _this = this;\n\t\n\t    return createElement(_BasicSelect2.default, {\n\t      props: {\n\t        id: this.id,\n\t        name: this.name,\n\t        options: this.options,\n\t        selectedOption: this.item,\n\t        isError: this.isError,\n\t        isDisabled: this.isDisabled,\n\t        placeholder: this.placeholder,\n\t        filterPredicate: this.filterPredicate\n\t      },\n\t      on: {\n\t        select: this.onSelect,\n\t        searchchange: function searchchange(searchText) {\n\t          return _this.$emit('searchchange', searchText);\n\t        }\n\t      }\n\t    });\n\t  },\n\t  props: {\n\t    list: {\n\t      type: Array\n\t    },\n\t    optionValue: {\n\t      type: String\n\t    },\n\t    optionText: {\n\t      type: String\n\t    },\n\t    customText: {\n\t      type: Function\n\t    },\n\t    selectedItem: {\n\t      type: Object\n\t    }\n\t  },\n\t  computed: {\n\t    options: function options() {\n\t      var _this2 = this;\n\t\n\t      return this.list.map(function (e, i) {\n\t        return { value: e[_this2.optionValue], text: _this2.buildText(e) };\n\t      });\n\t    },\n\t    item: function item() {\n\t      if (this.selectedItem) {\n\t        return { value: this.selectedItem[this.optionValue], text: this.buildText(this.selectedItem) };\n\t      } else {\n\t        return { value: '', text: '' };\n\t      }\n\t    }\n\t  },\n\t  methods: {\n\t    buildText: function buildText(e) {\n\t      if (e[this.optionValue] !== undefined) {\n\t        if (this.customText) {\n\t          return this.customText(e);\n\t        } else {\n\t          return e[this.optionText];\n\t        }\n\t      } else {\n\t        return '';\n\t      }\n\t    },\n\t    onSelect: function onSelect(option) {\n\t      var _this3 = this;\n\t\n\t      if ((0, _keys2.default)(option).length === 0 && option.constructor === Object) {\n\t        this.$emit('select', option);\n\t      } else {\n\t        var item = this.list.find(function (e, i) {\n\t          return e[_this3.optionValue] === option.value;\n\t        });\n\t        this.$emit('select', item);\n\t      }\n\t    }\n\t  },\n\t  components: {\n\t    BasicSelect: _BasicSelect2.default\n\t  }\n\t};\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _keys = __webpack_require__(19);\n\t\n\tvar _keys2 = _interopRequireDefault(_keys);\n\t\n\tvar _typeof2 = __webpack_require__(33);\n\t\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\t\n\tvar _ModelSelect = __webpack_require__(45);\n\t\n\tvar _ModelSelect2 = _interopRequireDefault(_ModelSelect);\n\t\n\tvar _mixins = __webpack_require__(6);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  mixins: [_mixins.commonMixin],\n\t  render: function render(createElement) {\n\t    var _this = this;\n\t\n\t    return createElement(_ModelSelect2.default, {\n\t      props: {\n\t        id: this.id,\n\t        name: this.name,\n\t        options: this.options,\n\t        value: this.innerValue,\n\t        isError: this.isError,\n\t        isDisabled: this.isDisabled,\n\t        placeholder: this.placeholder,\n\t        filterPredicate: this.filterPredicate\n\t      },\n\t      on: {\n\t        input: this.onInput,\n\t        searchchange: function searchchange(searchText) {\n\t          return _this.$emit('searchchange', searchText);\n\t        }\n\t      }\n\t    });\n\t  },\n\t  props: {\n\t    list: {\n\t      type: Array\n\t    },\n\t    optionValue: {\n\t      type: String\n\t    },\n\t    optionText: {\n\t      type: String\n\t    },\n\t    customText: {\n\t      type: Function\n\t    },\n\t\n\t    value: {\n\t      type: [String, Number, Object, Boolean]\n\t    }\n\t  },\n\t  computed: {\n\t    options: function options() {\n\t      var _this2 = this;\n\t\n\t      return this.list.map(function (e) {\n\t        return { value: e[_this2.optionValue], text: _this2.buildText(e) };\n\t      });\n\t    },\n\t    innerValue: function innerValue() {\n\t      if (!this.value) {\n\t        return this.value;\n\t      } else if ((0, _typeof3.default)(this.value) === 'object') {\n\t        if (this.value) {\n\t          return { value: this.value[this.optionValue], text: this.buildText(this.value) };\n\t        } else {\n\t          return { value: '', text: '' };\n\t        }\n\t      } else {\n\t        return this.value;\n\t      }\n\t    }\n\t  },\n\t  methods: {\n\t    buildText: function buildText(e) {\n\t      if (e[this.optionValue] !== undefined) {\n\t        if (this.customText) {\n\t          return this.customText(e);\n\t        } else {\n\t          return e[this.optionText];\n\t        }\n\t      } else {\n\t        return '';\n\t      }\n\t    },\n\t    onInput: function onInput(option) {\n\t      var _this3 = this;\n\t\n\t      if (option === undefined) {\n\t        return this.$emit('input', '');\n\t      }\n\t      if ((0, _keys2.default)(option).length === 0 && option.constructor === Object) {\n\t        this.$emit('input', option);\n\t      } else if ((typeof option === 'undefined' ? 'undefined' : (0, _typeof3.default)(option)) === 'object') {\n\t        var item = this.list.find(function (e) {\n\t          return e[_this3.optionValue] === option.value;\n\t        });\n\t        this.$emit('input', item);\n\t      } else {\n\t        this.$emit('input', option);\n\t      }\n\t    }\n\t  },\n\t  components: {\n\t    ModelSelect: _ModelSelect2.default\n\t  }\n\t};\n\n/***/ },\n/* 50 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof2 = __webpack_require__(33);\n\t\n\tvar _typeof3 = _interopRequireDefault(_typeof2);\n\t\n\tvar _common = __webpack_require__(18);\n\t\n\tvar _common2 = _interopRequireDefault(_common);\n\t\n\tvar _mixins = __webpack_require__(6);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  mixins: [_mixins.baseMixin, _mixins.commonMixin, _mixins.optionAwareMixin],\n\t  props: {\n\t    value: {\n\t      type: [String, Number, Object, Boolean]\n\t    }\n\t  },\n\t  data: function data() {\n\t    return {\n\t      showMenu: false,\n\t      searchText: '',\n\t      mousedownState: false,\n\t      pointer: -1\n\t    };\n\t  },\n\t\n\t  watch: {\n\t    value: function value(newValue) {\n\t      var _this = this;\n\t\n\t      this.pointer = this.filteredOptions.findIndex(function (option) {\n\t        return option.value === _this.optionValue(newValue);\n\t      });\n\t    }\n\t  },\n\t  computed: {\n\t    searchTextCustomAttr: function searchTextCustomAttr() {\n\t      if (this.selectedOption && this.selectedOption.value) {\n\t        return this.customAttr(this.selectedOption);\n\t      }\n\t      return '';\n\t    },\n\t    inputText: function inputText() {\n\t      if (this.searchText) {\n\t        return '';\n\t      } else {\n\t        var text = this.placeholder;\n\t        if (this.selectedOption) {\n\t          text = this.selectedOption.text;\n\t        }\n\t        return text;\n\t      }\n\t    },\n\t    customAttrs: function customAttrs() {\n\t      var _this2 = this;\n\t\n\t      try {\n\t        if (Array.isArray(this.options)) {\n\t          return this.options.map(function (o) {\n\t            return _this2.customAttr(o);\n\t          });\n\t        }\n\t      } catch (e) {}\n\t      return [];\n\t    },\n\t    textClass: function textClass() {\n\t      if (!this.selectedOption && this.placeholder) {\n\t        return 'default';\n\t      } else {\n\t        return '';\n\t      }\n\t    },\n\t    menuClass: function menuClass() {\n\t      return {\n\t        visible: this.showMenu,\n\t        hidden: !this.showMenu\n\t      };\n\t    },\n\t    menuStyle: function menuStyle() {\n\t      return {\n\t        display: this.showMenu ? 'block' : 'none'\n\t      };\n\t    },\n\t    filteredOptions: function filteredOptions() {\n\t      var _this3 = this;\n\t\n\t      if (this.searchText) {\n\t        return this.options.filter(function (option) {\n\t          try {\n\t            return _this3.filterPredicate(option.text, _this3.searchText);\n\t          } catch (e) {\n\t            return true;\n\t          }\n\t        });\n\t      } else {\n\t        return this.options;\n\t      }\n\t    },\n\t    selectedOption: function selectedOption() {\n\t      var _this4 = this;\n\t\n\t      return this.options.find(function (option) {\n\t        return option.value === _this4.optionValue(_this4.value);\n\t      });\n\t    }\n\t  },\n\t  methods: {\n\t    deleteTextOrItem: function deleteTextOrItem() {\n\t      if (!this.searchText && this.value) {\n\t        this.selectItem({});\n\t        this.openOptions();\n\t      }\n\t    },\n\t    openOptions: function openOptions() {\n\t      _common2.default.openOptions(this);\n\t    },\n\t    blurInput: function blurInput() {\n\t      _common2.default.blurInput(this);\n\t    },\n\t    closeOptions: function closeOptions() {\n\t      _common2.default.closeOptions(this);\n\t    },\n\t    prevItem: function prevItem() {\n\t      _common2.default.prevItem(this);\n\t    },\n\t    nextItem: function nextItem() {\n\t      _common2.default.nextItem(this);\n\t    },\n\t    enterItem: function enterItem() {\n\t      _common2.default.enterItem(this);\n\t    },\n\t    pointerSet: function pointerSet(index) {\n\t      _common2.default.pointerSet(this, index);\n\t    },\n\t    pointerAdjust: function pointerAdjust() {\n\t      _common2.default.pointerAdjust(this);\n\t    },\n\t    mousedownItem: function mousedownItem() {\n\t      _common2.default.mousedownItem(this);\n\t    },\n\t    selectItem: function selectItem(option) {\n\t      this.searchText = '';\n\t      this.closeOptions();\n\t      if ((0, _typeof3.default)(this.value) === 'object' && this.value) {\n\t        this.$emit('input', option);\n\t      } else {\n\t        this.$emit('input', option.value);\n\t        if (option.value === option.text) {\n\t          this.searchText = option.value;\n\t        }\n\t      }\n\t    },\n\t    optionValue: function optionValue(value) {\n\t      if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object' && value !== null) {\n\t        return value.value;\n\t      } else {\n\t        return value;\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _keys = __webpack_require__(19);\n\t\n\tvar _keys2 = _interopRequireDefault(_keys);\n\t\n\tvar _MultiSelect = __webpack_require__(46);\n\t\n\tvar _MultiSelect2 = _interopRequireDefault(_MultiSelect);\n\t\n\tvar _mixins = __webpack_require__(6);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  mixins: [_mixins.commonMixin],\n\t  render: function render(createElement) {\n\t    var _this = this;\n\t\n\t    return createElement(_MultiSelect2.default, {\n\t      props: {\n\t        id: this.id,\n\t        name: this.name,\n\t        options: this.options,\n\t        selectedOptions: this.items,\n\t        isError: this.isError,\n\t        isDisabled: this.isDisabled,\n\t        placeholder: this.placeholder,\n\t        filterPredicate: this.filterPredicate\n\t      },\n\t      on: {\n\t        select: this.onSelect,\n\t        searchchange: function searchchange(searchText) {\n\t          return _this.$emit('searchchange', searchText);\n\t        }\n\t      }\n\t    });\n\t  },\n\t  props: {\n\t    list: {\n\t      type: Array\n\t    },\n\t    optionValue: {\n\t      type: String\n\t    },\n\t    optionText: {\n\t      type: String\n\t    },\n\t    customText: {\n\t      type: Function\n\t    },\n\t    selectedItems: {\n\t      type: Array\n\t    }\n\t  },\n\t  computed: {\n\t    options: function options() {\n\t      var _this2 = this;\n\t\n\t      return this.list.map(function (e) {\n\t        return { value: e[_this2.optionValue], text: _this2.buildText(e) };\n\t      });\n\t    },\n\t    items: function items() {\n\t      var _this3 = this;\n\t\n\t      return this.selectedItems.map(function (e) {\n\t        return { value: e[_this3.optionValue], text: _this3.buildText(e) };\n\t      });\n\t    }\n\t  },\n\t  methods: {\n\t    buildText: function buildText(e) {\n\t      if (e[this.optionValue] !== undefined) {\n\t        if (this.customText) {\n\t          return this.customText(e);\n\t        } else {\n\t          return e[this.optionText];\n\t        }\n\t      } else {\n\t        return '';\n\t      }\n\t    },\n\t    onSelect: function onSelect(options, option) {\n\t      var _this4 = this;\n\t\n\t      if ((0, _keys2.default)(option).length === 0 && option.constructor === Object) {\n\t        this.$emit('select', options, option);\n\t      } else {\n\t        var items = this.list.filter(function (e, i) {\n\t          return options.find(function (o, i) {\n\t            return e[_this4.optionValue] === o.value;\n\t          });\n\t        });\n\t        var item = this.list.find(function (e) {\n\t          return e[_this4.optionValue] === option.value;\n\t        });\n\t        this.$emit('select', items, item);\n\t      }\n\t    }\n\t  },\n\t  components: {\n\t    MultiSelect: _MultiSelect2.default\n\t  }\n\t};\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _common = __webpack_require__(18);\n\t\n\tvar _common2 = _interopRequireDefault(_common);\n\t\n\tvar _mixins = __webpack_require__(6);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  mixins: [_mixins.baseMixin, _mixins.commonMixin, _mixins.optionAwareMixin],\n\t  props: {\n\t    selectedOptions: {\n\t      type: Array\n\t    },\n\t    cleanSearch: {\n\t      type: Boolean,\n\t      default: true\n\t    },\n\t    hideSelectedOptions: {\n\t      type: Boolean,\n\t      default: false\n\t    }\n\t  },\n\t  data: function data() {\n\t    return {\n\t      showMenu: false,\n\t      searchText: '',\n\t      mousedownState: false,\n\t      pointer: -1\n\t    };\n\t  },\n\t\n\t  watch: {\n\t    selectedOptions: function selectedOptions() {\n\t      this.pointer = -1;\n\t    }\n\t  },\n\t  computed: {\n\t    inputText: function inputText() {\n\t      if (this.searchText) {\n\t        return '';\n\t      } else {\n\t        return this.placeholder;\n\t      }\n\t    },\n\t    textClass: function textClass() {\n\t      if (this.placeholder) {\n\t        return 'default';\n\t      } else {\n\t        return '';\n\t      }\n\t    },\n\t    inputWidth: function inputWidth() {\n\t      return {\n\t        width: (this.searchText.length + 1) * 8 + 20 + 'px'\n\t      };\n\t    },\n\t    menuClass: function menuClass() {\n\t      return {\n\t        visible: this.showMenu,\n\t        hidden: !this.showMenu\n\t      };\n\t    },\n\t    menuStyle: function menuStyle() {\n\t      return {\n\t        display: this.showMenu ? 'block' : 'none'\n\t      };\n\t    },\n\t    nonSelectOptions: function nonSelectOptions() {\n\t      var _this = this;\n\t\n\t      return this.options.filter(function (el) {\n\t        return _this.selectedOptions.findIndex(function (o) {\n\t          return o.value === el.value;\n\t        }) === -1;\n\t      });\n\t    },\n\t    filteredOptions: function filteredOptions() {\n\t      var _this2 = this;\n\t\n\t      if (this.searchText) {\n\t        return this.nonSelectOptions.filter(function (option) {\n\t          try {\n\t            if (_this2.cleanSearch) {\n\t              return _this2.filterPredicate(_this2.accentsTidy(option.text), _this2.searchText);\n\t            } else {\n\t              return _this2.filterPredicate(option.text, _this2.searchText);\n\t            }\n\t          } catch (e) {\n\t            return true;\n\t          }\n\t        });\n\t      } else {\n\t        return this.nonSelectOptions;\n\t      }\n\t    }\n\t  },\n\t  methods: {\n\t    deleteTextOrLastItem: function deleteTextOrLastItem() {\n\t      if (!this.searchText && this.selectedOptions.length > 0) {\n\t        this.deleteItem(this.selectedOptions[this.selectedOptions.length - 1]);\n\t      }\n\t    },\n\t    openOptions: function openOptions() {\n\t      _common2.default.openOptions(this);\n\t    },\n\t    blurInput: function blurInput() {\n\t      _common2.default.blurInput(this);\n\t    },\n\t    closeOptions: function closeOptions() {\n\t      _common2.default.closeOptions(this);\n\t    },\n\t    prevItem: function prevItem() {\n\t      _common2.default.prevItem(this);\n\t      this.closeOptions();\n\t      this.openOptions();\n\t    },\n\t    nextItem: function nextItem() {\n\t      _common2.default.nextItem(this);\n\t      this.closeOptions();\n\t      this.openOptions();\n\t    },\n\t    enterItem: function enterItem() {\n\t      _common2.default.enterItem(this);\n\t    },\n\t    pointerSet: function pointerSet(index) {\n\t      _common2.default.pointerSet(this, index);\n\t    },\n\t    pointerAdjust: function pointerAdjust() {\n\t      _common2.default.pointerAdjust(this);\n\t    },\n\t    mousedownItem: function mousedownItem() {\n\t      _common2.default.mousedownItem(this);\n\t    },\n\t    selectItem: function selectItem(option) {\n\t      var tempSelectedOptions = this.selectedOptions.concat(option);\n\t      var selectedOptions = tempSelectedOptions.filter(function (el, idx) {\n\t        return tempSelectedOptions.indexOf(el) === idx;\n\t      });\n\t      this.closeOptions();\n\t      this.searchText = '';\n\t      this.$emit('select', selectedOptions, option, 'insert');\n\t    },\n\t    deleteItem: function deleteItem(option) {\n\t      var selectedOptions = this.selectedOptions.filter(function (o) {\n\t        return o.value !== option.value;\n\t      });\n\t      this.$emit('select', selectedOptions, option, 'delete');\n\t    },\n\t    accentsTidy: function accentsTidy(s) {\n\t      var r = s.toString().toLowerCase();\n\t      r = r.replace(new RegExp('[àáâãäå]', 'g'), 'a');\n\t      r = r.replace(new RegExp('æ', 'g'), 'ae');\n\t      r = r.replace(new RegExp('ç', 'g'), 'c');\n\t      r = r.replace(new RegExp('[èéêë]', 'g'), 'e');\n\t      r = r.replace(new RegExp('[ìíîï]', 'g'), 'i');\n\t      r = r.replace(new RegExp('ñ', 'g'), 'n');\n\t      r = r.replace(new RegExp('[òóôõö]', 'g'), 'o');\n\t      r = r.replace(new RegExp('œ', 'g'), 'oe');\n\t      r = r.replace(new RegExp('[ùúûü]', 'g'), 'u');\n\t      r = r.replace(new RegExp('[ýÿ]', 'g'), 'y');\n\t      return r;\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 53 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  watch: {\n\t    filteredOptions: function filteredOptions() {\n\t      this.pointerAdjust();\n\t    },\n\t    searchText: function searchText() {\n\t      this.$emit('searchchange', this.searchText);\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _utils = __webpack_require__(56);\n\t\n\texports.default = {\n\t  props: {\n\t    id: {\n\t      default: null\n\t    },\n\t    name: {\n\t      type: String,\n\t      default: ''\n\t    },\n\t    isError: {\n\t      type: Boolean,\n\t      default: false\n\t    },\n\t    customAttr: {\n\t      type: Function,\n\t      default: function _default() {\n\t        return '';\n\t      }\n\t    },\n\t    isDisabled: {\n\t      type: Boolean,\n\t      default: false\n\t    },\n\t    placeholder: {\n\t      type: String,\n\t      default: ''\n\t    },\n\t    filterPredicate: {\n\t      type: Function,\n\t      default: function _default(text, inputText) {\n\t        return text.match((0, _utils.escapedRegExp)(inputText));\n\t      }\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 55 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  props: {\n\t    customAttr: {\n\t      type: Function,\n\t      default: function _default() {\n\t        return '';\n\t      }\n\t    },\n\t    options: {\n\t      type: Array\n\t    }\n\t  }\n\t};\n\n/***/ },\n/* 56 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.escapedRegExp = escapedRegExp;\n\tfunction escapedRegExp(str) {\n\t  return new RegExp(str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i');\n\t}\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(60), __esModule: true };\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = { \"default\": __webpack_require__(61), __esModule: true };\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(83);\n\tmodule.exports = __webpack_require__(11).Object.keys;\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(86);\n\t__webpack_require__(84);\n\t__webpack_require__(87);\n\t__webpack_require__(88);\n\tmodule.exports = __webpack_require__(11).Symbol;\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(85);\n\t__webpack_require__(89);\n\tmodule.exports = __webpack_require__(32).f('iterator');\n\n/***/ },\n/* 62 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(it){\n\t  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n\t  return it;\n\t};\n\n/***/ },\n/* 63 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(){ /* empty */ };\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// false -> Array#indexOf\n\t// true  -> Array#includes\n\tvar toIObject = __webpack_require__(3)\n\t  , toLength  = __webpack_require__(81)\n\t  , toIndex   = __webpack_require__(80);\n\tmodule.exports = function(IS_INCLUDES){\n\t  return function($this, el, fromIndex){\n\t    var O      = toIObject($this)\n\t      , length = toLength(O.length)\n\t      , index  = toIndex(fromIndex, length)\n\t      , value;\n\t    // Array#includes uses SameValueZero equality algorithm\n\t    if(IS_INCLUDES && el != el)while(length > index){\n\t      value = O[index++];\n\t      if(value != value)return true;\n\t    // Array#toIndex ignores holes, Array#includes - not\n\t    } else for(;length > index; index++)if(IS_INCLUDES || index in O){\n\t      if(O[index] === el)return IS_INCLUDES || index || 0;\n\t    } return !IS_INCLUDES && -1;\n\t  };\n\t};\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// optional / simple context binding\n\tvar aFunction = __webpack_require__(62);\n\tmodule.exports = function(fn, that, length){\n\t  aFunction(fn);\n\t  if(that === undefined)return fn;\n\t  switch(length){\n\t    case 1: return function(a){\n\t      return fn.call(that, a);\n\t    };\n\t    case 2: return function(a, b){\n\t      return fn.call(that, a, b);\n\t    };\n\t    case 3: return function(a, b, c){\n\t      return fn.call(that, a, b, c);\n\t    };\n\t  }\n\t  return function(/* ...args */){\n\t    return fn.apply(that, arguments);\n\t  };\n\t};\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// all enumerable object keys, includes symbols\n\tvar getKeys = __webpack_require__(13)\n\t  , gOPS    = __webpack_require__(40)\n\t  , pIE     = __webpack_require__(25);\n\tmodule.exports = function(it){\n\t  var result     = getKeys(it)\n\t    , getSymbols = gOPS.f;\n\t  if(getSymbols){\n\t    var symbols = getSymbols(it)\n\t      , isEnum  = pIE.f\n\t      , i       = 0\n\t      , key;\n\t    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);\n\t  } return result;\n\t};\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1).document && document.documentElement;\n\n/***/ },\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// fallback for non-array-like ES3 and non-enumerable old V8 strings\n\tvar cof = __webpack_require__(34);\n\tmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n\t  return cof(it) == 'String' ? it.split('') : Object(it);\n\t};\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 7.2.2 IsArray(argument)\n\tvar cof = __webpack_require__(34);\n\tmodule.exports = Array.isArray || function isArray(arg){\n\t  return cof(arg) == 'Array';\n\t};\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar create         = __webpack_require__(38)\n\t  , descriptor     = __webpack_require__(16)\n\t  , setToStringTag = __webpack_require__(26)\n\t  , IteratorPrototype = {};\n\t\n\t// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n\t__webpack_require__(8)(IteratorPrototype, __webpack_require__(10)('iterator'), function(){ return this; });\n\t\n\tmodule.exports = function(Constructor, NAME, next){\n\t  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});\n\t  setToStringTag(Constructor, NAME + ' Iterator');\n\t};\n\n/***/ },\n/* 71 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(done, value){\n\t  return {value: value, done: !!done};\n\t};\n\n/***/ },\n/* 72 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar getKeys   = __webpack_require__(13)\n\t  , toIObject = __webpack_require__(3);\n\tmodule.exports = function(object, el){\n\t  var O      = toIObject(object)\n\t    , keys   = getKeys(O)\n\t    , length = keys.length\n\t    , index  = 0\n\t    , key;\n\t  while(length > index)if(O[key = keys[index++]] === el)return key;\n\t};\n\n/***/ },\n/* 73 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar META     = __webpack_require__(17)('meta')\n\t  , isObject = __webpack_require__(15)\n\t  , has      = __webpack_require__(2)\n\t  , setDesc  = __webpack_require__(9).f\n\t  , id       = 0;\n\tvar isExtensible = Object.isExtensible || function(){\n\t  return true;\n\t};\n\tvar FREEZE = !__webpack_require__(12)(function(){\n\t  return isExtensible(Object.preventExtensions({}));\n\t});\n\tvar setMeta = function(it){\n\t  setDesc(it, META, {value: {\n\t    i: 'O' + ++id, // object ID\n\t    w: {}          // weak collections IDs\n\t  }});\n\t};\n\tvar fastKey = function(it, create){\n\t  // return primitive with prefix\n\t  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n\t  if(!has(it, META)){\n\t    // can't set metadata to uncaught frozen object\n\t    if(!isExtensible(it))return 'F';\n\t    // not necessary to add metadata\n\t    if(!create)return 'E';\n\t    // add missing metadata\n\t    setMeta(it);\n\t  // return object ID\n\t  } return it[META].i;\n\t};\n\tvar getWeak = function(it, create){\n\t  if(!has(it, META)){\n\t    // can't set metadata to uncaught frozen object\n\t    if(!isExtensible(it))return true;\n\t    // not necessary to add metadata\n\t    if(!create)return false;\n\t    // add missing metadata\n\t    setMeta(it);\n\t  // return hash weak collections IDs\n\t  } return it[META].w;\n\t};\n\t// add metadata on freeze-family methods calling\n\tvar onFreeze = function(it){\n\t  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);\n\t  return it;\n\t};\n\tvar meta = module.exports = {\n\t  KEY:      META,\n\t  NEED:     false,\n\t  fastKey:  fastKey,\n\t  getWeak:  getWeak,\n\t  onFreeze: onFreeze\n\t};\n\n/***/ },\n/* 74 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar dP       = __webpack_require__(9)\n\t  , anObject = __webpack_require__(14)\n\t  , getKeys  = __webpack_require__(13);\n\t\n\tmodule.exports = __webpack_require__(7) ? Object.defineProperties : function defineProperties(O, Properties){\n\t  anObject(O);\n\t  var keys   = getKeys(Properties)\n\t    , length = keys.length\n\t    , i = 0\n\t    , P;\n\t  while(length > i)dP.f(O, P = keys[i++], Properties[P]);\n\t  return O;\n\t};\n\n/***/ },\n/* 75 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar pIE            = __webpack_require__(25)\n\t  , createDesc     = __webpack_require__(16)\n\t  , toIObject      = __webpack_require__(3)\n\t  , toPrimitive    = __webpack_require__(30)\n\t  , has            = __webpack_require__(2)\n\t  , IE8_DOM_DEFINE = __webpack_require__(36)\n\t  , gOPD           = Object.getOwnPropertyDescriptor;\n\t\n\texports.f = __webpack_require__(7) ? gOPD : function getOwnPropertyDescriptor(O, P){\n\t  O = toIObject(O);\n\t  P = toPrimitive(P, true);\n\t  if(IE8_DOM_DEFINE)try {\n\t    return gOPD(O, P);\n\t  } catch(e){ /* empty */ }\n\t  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);\n\t};\n\n/***/ },\n/* 76 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\n\tvar toIObject = __webpack_require__(3)\n\t  , gOPN      = __webpack_require__(39).f\n\t  , toString  = {}.toString;\n\t\n\tvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n\t  ? Object.getOwnPropertyNames(window) : [];\n\t\n\tvar getWindowNames = function(it){\n\t  try {\n\t    return gOPN(it);\n\t  } catch(e){\n\t    return windowNames.slice();\n\t  }\n\t};\n\t\n\tmodule.exports.f = function getOwnPropertyNames(it){\n\t  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n\t};\n\n\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\n\tvar has         = __webpack_require__(2)\n\t  , toObject    = __webpack_require__(43)\n\t  , IE_PROTO    = __webpack_require__(27)('IE_PROTO')\n\t  , ObjectProto = Object.prototype;\n\t\n\tmodule.exports = Object.getPrototypeOf || function(O){\n\t  O = toObject(O);\n\t  if(has(O, IE_PROTO))return O[IE_PROTO];\n\t  if(typeof O.constructor == 'function' && O instanceof O.constructor){\n\t    return O.constructor.prototype;\n\t  } return O instanceof Object ? ObjectProto : null;\n\t};\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// most Object methods by ES6 should accept primitives\n\tvar $export = __webpack_require__(22)\n\t  , core    = __webpack_require__(11)\n\t  , fails   = __webpack_require__(12);\n\tmodule.exports = function(KEY, exec){\n\t  var fn  = (core.Object || {})[KEY] || Object[KEY]\n\t    , exp = {};\n\t  exp[KEY] = exec(fn);\n\t  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\n\t};\n\n/***/ },\n/* 79 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar toInteger = __webpack_require__(29)\n\t  , defined   = __webpack_require__(20);\n\t// true  -> String#at\n\t// false -> String#codePointAt\n\tmodule.exports = function(TO_STRING){\n\t  return function(that, pos){\n\t    var s = String(defined(that))\n\t      , i = toInteger(pos)\n\t      , l = s.length\n\t      , a, b;\n\t    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n\t    a = s.charCodeAt(i);\n\t    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n\t      ? TO_STRING ? s.charAt(i) : a\n\t      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n\t  };\n\t};\n\n/***/ },\n/* 80 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar toInteger = __webpack_require__(29)\n\t  , max       = Math.max\n\t  , min       = Math.min;\n\tmodule.exports = function(index, length){\n\t  index = toInteger(index);\n\t  return index < 0 ? max(index + length, 0) : min(index, length);\n\t};\n\n/***/ },\n/* 81 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 7.1.15 ToLength\n\tvar toInteger = __webpack_require__(29)\n\t  , min       = Math.min;\n\tmodule.exports = function(it){\n\t  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n\t};\n\n/***/ },\n/* 82 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar addToUnscopables = __webpack_require__(63)\n\t  , step             = __webpack_require__(71)\n\t  , Iterators        = __webpack_require__(23)\n\t  , toIObject        = __webpack_require__(3);\n\t\n\t// 22.1.3.4 Array.prototype.entries()\n\t// 22.1.3.13 Array.prototype.keys()\n\t// 22.1.3.29 Array.prototype.values()\n\t// 22.1.3.30 Array.prototype[@@iterator]()\n\tmodule.exports = __webpack_require__(37)(Array, 'Array', function(iterated, kind){\n\t  this._t = toIObject(iterated); // target\n\t  this._i = 0;                   // next index\n\t  this._k = kind;                // kind\n\t// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n\t}, function(){\n\t  var O     = this._t\n\t    , kind  = this._k\n\t    , index = this._i++;\n\t  if(!O || index >= O.length){\n\t    this._t = undefined;\n\t    return step(1);\n\t  }\n\t  if(kind == 'keys'  )return step(0, index);\n\t  if(kind == 'values')return step(0, O[index]);\n\t  return step(0, [index, O[index]]);\n\t}, 'values');\n\t\n\t// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\n\tIterators.Arguments = Iterators.Array;\n\t\n\taddToUnscopables('keys');\n\taddToUnscopables('values');\n\taddToUnscopables('entries');\n\n/***/ },\n/* 83 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// 19.1.2.14 Object.keys(O)\n\tvar toObject = __webpack_require__(43)\n\t  , $keys    = __webpack_require__(13);\n\t\n\t__webpack_require__(78)('keys', function(){\n\t  return function keys(it){\n\t    return $keys(toObject(it));\n\t  };\n\t});\n\n/***/ },\n/* 84 */\n/***/ function(module, exports) {\n\n\n\n/***/ },\n/* 85 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar $at  = __webpack_require__(79)(true);\n\t\n\t// 21.1.3.27 String.prototype[@@iterator]()\n\t__webpack_require__(37)(String, 'String', function(iterated){\n\t  this._t = String(iterated); // target\n\t  this._i = 0;                // next index\n\t// 21.1.5.2.1 %StringIteratorPrototype%.next()\n\t}, function(){\n\t  var O     = this._t\n\t    , index = this._i\n\t    , point;\n\t  if(index >= O.length)return {value: undefined, done: true};\n\t  point = $at(O, index);\n\t  this._i += point.length;\n\t  return {value: point, done: false};\n\t});\n\n/***/ },\n/* 86 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t// ECMAScript 6 symbols shim\n\tvar global         = __webpack_require__(1)\n\t  , has            = __webpack_require__(2)\n\t  , DESCRIPTORS    = __webpack_require__(7)\n\t  , $export        = __webpack_require__(22)\n\t  , redefine       = __webpack_require__(42)\n\t  , META           = __webpack_require__(73).KEY\n\t  , $fails         = __webpack_require__(12)\n\t  , shared         = __webpack_require__(28)\n\t  , setToStringTag = __webpack_require__(26)\n\t  , uid            = __webpack_require__(17)\n\t  , wks            = __webpack_require__(10)\n\t  , wksExt         = __webpack_require__(32)\n\t  , wksDefine      = __webpack_require__(31)\n\t  , keyOf          = __webpack_require__(72)\n\t  , enumKeys       = __webpack_require__(66)\n\t  , isArray        = __webpack_require__(69)\n\t  , anObject       = __webpack_require__(14)\n\t  , toIObject      = __webpack_require__(3)\n\t  , toPrimitive    = __webpack_require__(30)\n\t  , createDesc     = __webpack_require__(16)\n\t  , _create        = __webpack_require__(38)\n\t  , gOPNExt        = __webpack_require__(76)\n\t  , $GOPD          = __webpack_require__(75)\n\t  , $DP            = __webpack_require__(9)\n\t  , $keys          = __webpack_require__(13)\n\t  , gOPD           = $GOPD.f\n\t  , dP             = $DP.f\n\t  , gOPN           = gOPNExt.f\n\t  , $Symbol        = global.Symbol\n\t  , $JSON          = global.JSON\n\t  , _stringify     = $JSON && $JSON.stringify\n\t  , PROTOTYPE      = 'prototype'\n\t  , HIDDEN         = wks('_hidden')\n\t  , TO_PRIMITIVE   = wks('toPrimitive')\n\t  , isEnum         = {}.propertyIsEnumerable\n\t  , SymbolRegistry = shared('symbol-registry')\n\t  , AllSymbols     = shared('symbols')\n\t  , OPSymbols      = shared('op-symbols')\n\t  , ObjectProto    = Object[PROTOTYPE]\n\t  , USE_NATIVE     = typeof $Symbol == 'function'\n\t  , QObject        = global.QObject;\n\t// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\n\tvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\t\n\t// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\n\tvar setSymbolDesc = DESCRIPTORS && $fails(function(){\n\t  return _create(dP({}, 'a', {\n\t    get: function(){ return dP(this, 'a', {value: 7}).a; }\n\t  })).a != 7;\n\t}) ? function(it, key, D){\n\t  var protoDesc = gOPD(ObjectProto, key);\n\t  if(protoDesc)delete ObjectProto[key];\n\t  dP(it, key, D);\n\t  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);\n\t} : dP;\n\t\n\tvar wrap = function(tag){\n\t  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n\t  sym._k = tag;\n\t  return sym;\n\t};\n\t\n\tvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){\n\t  return typeof it == 'symbol';\n\t} : function(it){\n\t  return it instanceof $Symbol;\n\t};\n\t\n\tvar $defineProperty = function defineProperty(it, key, D){\n\t  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);\n\t  anObject(it);\n\t  key = toPrimitive(key, true);\n\t  anObject(D);\n\t  if(has(AllSymbols, key)){\n\t    if(!D.enumerable){\n\t      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));\n\t      it[HIDDEN][key] = true;\n\t    } else {\n\t      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;\n\t      D = _create(D, {enumerable: createDesc(0, false)});\n\t    } return setSymbolDesc(it, key, D);\n\t  } return dP(it, key, D);\n\t};\n\tvar $defineProperties = function defineProperties(it, P){\n\t  anObject(it);\n\t  var keys = enumKeys(P = toIObject(P))\n\t    , i    = 0\n\t    , l = keys.length\n\t    , key;\n\t  while(l > i)$defineProperty(it, key = keys[i++], P[key]);\n\t  return it;\n\t};\n\tvar $create = function create(it, P){\n\t  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n\t};\n\tvar $propertyIsEnumerable = function propertyIsEnumerable(key){\n\t  var E = isEnum.call(this, key = toPrimitive(key, true));\n\t  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;\n\t  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n\t};\n\tvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){\n\t  it  = toIObject(it);\n\t  key = toPrimitive(key, true);\n\t  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;\n\t  var D = gOPD(it, key);\n\t  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;\n\t  return D;\n\t};\n\tvar $getOwnPropertyNames = function getOwnPropertyNames(it){\n\t  var names  = gOPN(toIObject(it))\n\t    , result = []\n\t    , i      = 0\n\t    , key;\n\t  while(names.length > i){\n\t    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);\n\t  } return result;\n\t};\n\tvar $getOwnPropertySymbols = function getOwnPropertySymbols(it){\n\t  var IS_OP  = it === ObjectProto\n\t    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))\n\t    , result = []\n\t    , i      = 0\n\t    , key;\n\t  while(names.length > i){\n\t    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);\n\t  } return result;\n\t};\n\t\n\t// 19.4.1.1 Symbol([description])\n\tif(!USE_NATIVE){\n\t  $Symbol = function Symbol(){\n\t    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');\n\t    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n\t    var $set = function(value){\n\t      if(this === ObjectProto)$set.call(OPSymbols, value);\n\t      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;\n\t      setSymbolDesc(this, tag, createDesc(1, value));\n\t    };\n\t    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});\n\t    return wrap(tag);\n\t  };\n\t  redefine($Symbol[PROTOTYPE], 'toString', function toString(){\n\t    return this._k;\n\t  });\n\t\n\t  $GOPD.f = $getOwnPropertyDescriptor;\n\t  $DP.f   = $defineProperty;\n\t  __webpack_require__(39).f = gOPNExt.f = $getOwnPropertyNames;\n\t  __webpack_require__(25).f  = $propertyIsEnumerable;\n\t  __webpack_require__(40).f = $getOwnPropertySymbols;\n\t\n\t  if(DESCRIPTORS && !__webpack_require__(24)){\n\t    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n\t  }\n\t\n\t  wksExt.f = function(name){\n\t    return wrap(wks(name));\n\t  }\n\t}\n\t\n\t$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});\n\t\n\tfor(var symbols = (\n\t  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n\t  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n\t).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);\n\t\n\tfor(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);\n\t\n\t$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n\t  // 19.4.2.1 Symbol.for(key)\n\t  'for': function(key){\n\t    return has(SymbolRegistry, key += '')\n\t      ? SymbolRegistry[key]\n\t      : SymbolRegistry[key] = $Symbol(key);\n\t  },\n\t  // 19.4.2.5 Symbol.keyFor(sym)\n\t  keyFor: function keyFor(key){\n\t    if(isSymbol(key))return keyOf(SymbolRegistry, key);\n\t    throw TypeError(key + ' is not a symbol!');\n\t  },\n\t  useSetter: function(){ setter = true; },\n\t  useSimple: function(){ setter = false; }\n\t});\n\t\n\t$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n\t  // 19.1.2.2 Object.create(O [, Properties])\n\t  create: $create,\n\t  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n\t  defineProperty: $defineProperty,\n\t  // 19.1.2.3 Object.defineProperties(O, Properties)\n\t  defineProperties: $defineProperties,\n\t  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n\t  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n\t  // 19.1.2.7 Object.getOwnPropertyNames(O)\n\t  getOwnPropertyNames: $getOwnPropertyNames,\n\t  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n\t  getOwnPropertySymbols: $getOwnPropertySymbols\n\t});\n\t\n\t// 24.3.2 JSON.stringify(value [, replacer [, space]])\n\t$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){\n\t  var S = $Symbol();\n\t  // MS Edge converts symbol values to JSON as {}\n\t  // WebKit converts symbol values to JSON as null\n\t  // V8 throws on boxed symbols\n\t  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';\n\t})), 'JSON', {\n\t  stringify: function stringify(it){\n\t    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined\n\t    var args = [it]\n\t      , i    = 1\n\t      , replacer, $replacer;\n\t    while(arguments.length > i)args.push(arguments[i++]);\n\t    replacer = args[1];\n\t    if(typeof replacer == 'function')$replacer = replacer;\n\t    if($replacer || !isArray(replacer))replacer = function(key, value){\n\t      if($replacer)value = $replacer.call(this, key, value);\n\t      if(!isSymbol(value))return value;\n\t    };\n\t    args[1] = replacer;\n\t    return _stringify.apply($JSON, args);\n\t  }\n\t});\n\t\n\t// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n\t$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(8)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n\t// 19.4.3.5 Symbol.prototype[@@toStringTag]\n\tsetToStringTag($Symbol, 'Symbol');\n\t// 20.2.1.9 Math[@@toStringTag]\n\tsetToStringTag(Math, 'Math', true);\n\t// 24.3.3 JSON[@@toStringTag]\n\tsetToStringTag(global.JSON, 'JSON', true);\n\n/***/ },\n/* 87 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(31)('asyncIterator');\n\n/***/ },\n/* 88 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(31)('observable');\n\n/***/ },\n/* 89 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(82);\n\tvar global        = __webpack_require__(1)\n\t  , hide          = __webpack_require__(8)\n\t  , Iterators     = __webpack_require__(23)\n\t  , TO_STRING_TAG = __webpack_require__(10)('toStringTag');\n\t\n\tfor(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){\n\t  var NAME       = collections[i]\n\t    , Collection = global[NAME]\n\t    , proto      = Collection && Collection.prototype;\n\t  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);\n\t  Iterators[NAME] = Iterators.Array;\n\t}\n\n/***/ },\n/* 90 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(4)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/* Menu Item Hover */\\n.ui.dropdown .menu > .item:hover {\\n  background: none transparent !important;\\n}\\n\\n/* Menu Item Hover for Key event */\\n.ui.dropdown .menu > .item.current {\\n  background: rgba(0, 0, 0, 0.05) !important;\\n}\\n\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 91 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(4)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"/*!\\n * # Semantic UI 2.2.3 - Dropdown\\n * http://github.com/semantic-org/semantic-ui/\\n *\\n *\\n * Released under the MIT license\\n * http://opensource.org/licenses/MIT\\n *\\n */\\n\\n\\n/*******************************\\n            Dropdown\\n*******************************/\\n.ui.dropdown[data-v-3a0c7bea] {\\n  cursor: pointer;\\n  position: relative;\\n  display: inline-block;\\n  outline: none;\\n  text-align: left;\\n  -webkit-transition: box-shadow 0.1s ease, width 0.1s ease;\\n  transition: box-shadow 0.1s ease, width 0.1s ease;\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\n}\\n\\n\\n/*******************************\\n            Content\\n*******************************/\\n\\n\\n/*--------------\\n      Menu\\n---------------*/\\n.ui.dropdown .menu[data-v-3a0c7bea] {\\n  cursor: auto;\\n  position: absolute;\\n  display: none;\\n  outline: none;\\n  top: 100%;\\n  min-width: -webkit-max-content;\\n  min-width: -moz-max-content;\\n  min-width: max-content;\\n  margin: 0em;\\n  padding: 0em 0em;\\n  background: #FFFFFF;\\n  font-size: 1em;\\n  text-shadow: none;\\n  text-align: left;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n  border: 1px solid rgba(34, 36, 38, 0.15);\\n  border-radius: 0.28571429rem;\\n  -webkit-transition: opacity 0.1s ease;\\n  transition: opacity 0.1s ease;\\n  z-index: 11;\\n  will-change: transform, opacity;\\n}\\n.ui.dropdown .menu > *[data-v-3a0c7bea] {\\n  white-space: nowrap;\\n}\\n\\n/*--------------\\n  Hidden Input\\n---------------*/\\n.ui.dropdown > input[data-v-3a0c7bea]:not(.search):first-child,\\n.ui.dropdown > select[data-v-3a0c7bea] {\\n  display: none !important;\\n}\\n\\n/*--------------\\n Dropdown Icon\\n---------------*/\\n.ui.dropdown > .dropdown.icon[data-v-3a0c7bea] {\\n  position: relative;\\n  width: auto;\\n  font-size: 0.85714286em;\\n  margin: 0em 0em 0em 1em;\\n}\\n.ui.dropdown .menu > .item .dropdown.icon[data-v-3a0c7bea] {\\n  width: auto;\\n  float: right;\\n  margin: 0em 0em 0em 1em;\\n}\\n.ui.dropdown .menu > .item .dropdown.icon + .text[data-v-3a0c7bea] {\\n  margin-right: 1em;\\n}\\n\\n/*--------------\\n      Text\\n---------------*/\\n.ui.dropdown > .text[data-v-3a0c7bea] {\\n  display: inline-block;\\n  -webkit-transition: none;\\n  transition: none;\\n}\\n\\n/*--------------\\n    Menu Item\\n---------------*/\\n.ui.dropdown .menu > .item[data-v-3a0c7bea] {\\n  position: relative;\\n  cursor: pointer;\\n  display: block;\\n  border: none;\\n  height: auto;\\n  text-align: left;\\n  border-top: none;\\n  line-height: 1em;\\n  color: rgba(0, 0, 0, 0.87);\\n  padding: 0.78571429rem 1.14285714rem !important;\\n  font-size: 1rem;\\n  text-transform: none;\\n  font-weight: normal;\\n  box-shadow: none;\\n  -webkit-touch-callout: none;\\n}\\n.ui.dropdown .menu > .item[data-v-3a0c7bea]:first-child {\\n  border-top-width: 0px;\\n}\\n\\n/*--------------\\n  Floated Content\\n---------------*/\\n.ui.dropdown > .text > [class*=\\\"right floated\\\"][data-v-3a0c7bea],\\n.ui.dropdown .menu .item > [class*=\\\"right floated\\\"][data-v-3a0c7bea] {\\n  float: right !important;\\n  margin-right: 0em !important;\\n  margin-left: 1em !important;\\n}\\n.ui.dropdown > .text > [class*=\\\"left floated\\\"][data-v-3a0c7bea],\\n.ui.dropdown .menu .item > [class*=\\\"left floated\\\"][data-v-3a0c7bea] {\\n  float: left !important;\\n  margin-left: 0em !important;\\n  margin-right: 1em !important;\\n}\\n.ui.dropdown .menu .item > .icon.floated[data-v-3a0c7bea],\\n.ui.dropdown .menu .item > .flag.floated[data-v-3a0c7bea],\\n.ui.dropdown .menu .item > .image.floated[data-v-3a0c7bea],\\n.ui.dropdown .menu .item > img.floated[data-v-3a0c7bea] {\\n  margin-top: 0em;\\n}\\n\\n/*--------------\\n  Menu Divider\\n---------------*/\\n.ui.dropdown .menu > .header[data-v-3a0c7bea] {\\n  margin: 1rem 0rem 0.75rem;\\n  padding: 0em 1.14285714rem;\\n  color: rgba(0, 0, 0, 0.85);\\n  font-size: 0.78571429em;\\n  font-weight: bold;\\n  text-transform: uppercase;\\n}\\n.ui.dropdown .menu > .divider[data-v-3a0c7bea] {\\n  border-top: 1px solid rgba(34, 36, 38, 0.1);\\n  height: 0em;\\n  margin: 0.5em 0em;\\n}\\n.ui.dropdown .menu > .input[data-v-3a0c7bea] {\\n  width: auto;\\n  display: -webkit-box;\\n  display: -webkit-flex;\\n  display: -ms-flexbox;\\n  display: flex;\\n  margin: 1.14285714rem 0.78571429rem;\\n  min-width: 10rem;\\n}\\n.ui.dropdown .menu > .header + .input[data-v-3a0c7bea] {\\n  margin-top: 0em;\\n}\\n.ui.dropdown .menu > .input:not(.transparent) input[data-v-3a0c7bea] {\\n  padding: 0.5em 1em;\\n}\\n.ui.dropdown .menu > .input:not(.transparent) .button[data-v-3a0c7bea],\\n.ui.dropdown .menu > .input:not(.transparent) .icon[data-v-3a0c7bea],\\n.ui.dropdown .menu > .input:not(.transparent) .label[data-v-3a0c7bea] {\\n  padding-top: 0.5em;\\n  padding-bottom: 0.5em;\\n}\\n\\n/*-----------------\\n  Item Description\\n-------------------*/\\n.ui.dropdown > .text > .description[data-v-3a0c7bea],\\n.ui.dropdown .menu > .item > .description[data-v-3a0c7bea] {\\n  float: right;\\n  margin: 0em 0em 0em 1em;\\n  color: rgba(0, 0, 0, 0.4);\\n}\\n\\n/*-----------------\\n       Message\\n-------------------*/\\n.ui.dropdown .menu > .message[data-v-3a0c7bea] {\\n  padding: 0.78571429rem 1.14285714rem;\\n  font-weight: normal;\\n}\\n.ui.dropdown .menu > .message[data-v-3a0c7bea]:not(.ui) {\\n  color: rgba(0, 0, 0, 0.4);\\n}\\n\\n/*--------------\\n    Sub Menu\\n---------------*/\\n.ui.dropdown .menu .menu[data-v-3a0c7bea] {\\n  top: 0% !important;\\n  left: 100% !important;\\n  right: auto !important;\\n  margin: 0em 0em 0em -0.5em !important;\\n  border-radius: 0.28571429rem !important;\\n  z-index: 21 !important;\\n}\\n\\n/* Hide Arrow */\\n.ui.dropdown .menu .menu[data-v-3a0c7bea]:after {\\n  display: none;\\n}\\n\\n/*--------------\\n   Sub Elements\\n---------------*/\\n\\n\\n/* Icons / Flags / Labels / Image */\\n.ui.dropdown > .text > .icon[data-v-3a0c7bea],\\n.ui.dropdown > .text > .label[data-v-3a0c7bea],\\n.ui.dropdown > .text > .flag[data-v-3a0c7bea],\\n.ui.dropdown > .text > img[data-v-3a0c7bea],\\n.ui.dropdown > .text > .image[data-v-3a0c7bea] {\\n  margin-top: 0em;\\n}\\n.ui.dropdown .menu > .item > .icon[data-v-3a0c7bea],\\n.ui.dropdown .menu > .item > .label[data-v-3a0c7bea],\\n.ui.dropdown .menu > .item > .flag[data-v-3a0c7bea],\\n.ui.dropdown .menu > .item > .image[data-v-3a0c7bea],\\n.ui.dropdown .menu > .item > img[data-v-3a0c7bea] {\\n  margin-top: 0em;\\n}\\n.ui.dropdown > .text > .icon[data-v-3a0c7bea],\\n.ui.dropdown > .text > .label[data-v-3a0c7bea],\\n.ui.dropdown > .text > .flag[data-v-3a0c7bea],\\n.ui.dropdown > .text > img[data-v-3a0c7bea],\\n.ui.dropdown > .text > .image[data-v-3a0c7bea],\\n.ui.dropdown .menu > .item > .icon[data-v-3a0c7bea],\\n.ui.dropdown .menu > .item > .label[data-v-3a0c7bea],\\n.ui.dropdown .menu > .item > .flag[data-v-3a0c7bea],\\n.ui.dropdown .menu > .item > .image[data-v-3a0c7bea],\\n.ui.dropdown .menu > .item > img[data-v-3a0c7bea] {\\n  margin-left: 0em;\\n  float: none;\\n  margin-right: 0.78571429rem;\\n}\\n\\n/*--------------\\n     Image\\n---------------*/\\n.ui.dropdown > .text > img[data-v-3a0c7bea],\\n.ui.dropdown > .text > .image[data-v-3a0c7bea],\\n.ui.dropdown .menu > .item > .image[data-v-3a0c7bea],\\n.ui.dropdown .menu > .item > img[data-v-3a0c7bea] {\\n  display: inline-block;\\n  vertical-align: middle;\\n  width: auto;\\n  max-height: 2em;\\n}\\n\\n\\n/*******************************\\n            Coupling\\n*******************************/\\n\\n\\n/*--------------\\n      Menu\\n---------------*/\\n\\n\\n/* Remove Menu Item Divider */\\n.ui.dropdown .ui.menu > .item[data-v-3a0c7bea]:before,\\n.ui.menu .ui.dropdown .menu > .item[data-v-3a0c7bea]:before {\\n  display: none;\\n}\\n\\n/* Prevent Menu Item Border */\\n.ui.menu .ui.dropdown .menu .active.item[data-v-3a0c7bea] {\\n  border-left: none;\\n}\\n\\n/* Automatically float dropdown menu right on last menu item */\\n.ui.menu .right.menu .dropdown:last-child .menu[data-v-3a0c7bea],\\n.ui.menu .right.dropdown.item .menu[data-v-3a0c7bea],\\n.ui.buttons > .ui.dropdown:last-child .menu[data-v-3a0c7bea] {\\n  left: auto;\\n  right: 0em;\\n}\\n\\n/*--------------\\n      Label\\n---------------*/\\n\\n\\n/* Dropdown Menu */\\n.ui.label.dropdown .menu[data-v-3a0c7bea] {\\n  min-width: 100%;\\n}\\n\\n/*--------------\\n     Button\\n---------------*/\\n\\n\\n/* No Margin On Icon Button */\\n.ui.dropdown.icon.button > .dropdown.icon[data-v-3a0c7bea] {\\n  margin: 0em;\\n}\\n.ui.button.dropdown .menu[data-v-3a0c7bea] {\\n  min-width: 100%;\\n}\\n\\n\\n/*******************************\\n              Types\\n*******************************/\\n\\n\\n/*--------------\\n    Selection\\n---------------*/\\n\\n\\n/* Displays like a select box */\\n.ui.selection.dropdown[data-v-3a0c7bea] {\\n  cursor: pointer;\\n  word-wrap: break-word;\\n  line-height: 1em;\\n  white-space: normal;\\n  outline: 0;\\n  -webkit-transform: rotateZ(0deg);\\n      -ms-transform: rotate(0deg);\\n          transform: rotateZ(0deg);\\n  min-width: 14em;\\n  min-height: 2.7142em;\\n  background: #FFFFFF;\\n  display: inline-block;\\n  padding: 0.78571429em 2.1em 0.78571429em 1em;\\n  color: rgba(0, 0, 0, 0.87);\\n  box-shadow: none;\\n  border: 1px solid rgba(34, 36, 38, 0.15);\\n  border-radius: 0.28571429rem;\\n  -webkit-transition: box-shadow 0.1s ease, width 0.1s ease;\\n  transition: box-shadow 0.1s ease, width 0.1s ease;\\n}\\n.ui.selection.dropdown.visible[data-v-3a0c7bea],\\n.ui.selection.dropdown.active[data-v-3a0c7bea] {\\n  z-index: 10;\\n}\\nselect.ui.dropdown[data-v-3a0c7bea] {\\n  height: 38px;\\n  padding: 0.5em;\\n  border: 1px solid rgba(34, 36, 38, 0.15);\\n  visibility: visible;\\n}\\n.ui.selection.dropdown > .search.icon[data-v-3a0c7bea],\\n.ui.selection.dropdown > .delete.icon[data-v-3a0c7bea],\\n.ui.selection.dropdown > .dropdown.icon[data-v-3a0c7bea] {\\n  cursor: pointer;\\n  position: absolute;\\n  width: auto;\\n  height: auto;\\n  line-height: 1.2142em;\\n  top: 0.78571429em;\\n  right: 1em;\\n  z-index: 3;\\n  margin: -0.78571429em;\\n  padding: 0.78571429em;\\n  opacity: 0.8;\\n  -webkit-transition: opacity 0.1s ease;\\n  transition: opacity 0.1s ease;\\n}\\n\\n/* Compact */\\n.ui.compact.selection.dropdown[data-v-3a0c7bea] {\\n  min-width: 0px;\\n}\\n\\n/*  Selection Menu */\\n.ui.selection.dropdown .menu[data-v-3a0c7bea] {\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n  -webkit-backface-visibility: hidden;\\n          backface-visibility: hidden;\\n  -webkit-overflow-scrolling: touch;\\n  border-top-width: 0px !important;\\n  width: auto;\\n  outline: none;\\n  margin: 0px -1px;\\n  min-width: calc(100% +  2px );\\n  width: calc(100% +  2px );\\n  border-radius: 0em 0em 0.28571429rem 0.28571429rem;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n  -webkit-transition: opacity 0.1s ease;\\n  transition: opacity 0.1s ease;\\n}\\n.ui.selection.dropdown .menu[data-v-3a0c7bea]:after,\\n.ui.selection.dropdown .menu[data-v-3a0c7bea]:before {\\n  display: none;\\n}\\n\\n/*--------------\\n    Message\\n---------------*/\\n.ui.selection.dropdown .menu > .message[data-v-3a0c7bea] {\\n  padding: 0.78571429rem 1.14285714rem;\\n}\\n@media only screen and (max-width: 767px) {\\n.ui.selection.dropdown .menu[data-v-3a0c7bea] {\\n    max-height: 8.01428571rem;\\n}\\n}\\n@media only screen and (min-width: 768px) {\\n.ui.selection.dropdown .menu[data-v-3a0c7bea] {\\n    max-height: 10.68571429rem;\\n}\\n}\\n@media only screen and (min-width: 992px) {\\n.ui.selection.dropdown .menu[data-v-3a0c7bea] {\\n    max-height: 16.02857143rem;\\n}\\n}\\n@media only screen and (min-width: 1920px) {\\n.ui.selection.dropdown .menu[data-v-3a0c7bea] {\\n    max-height: 21.37142857rem;\\n}\\n}\\n\\n/* Menu Item */\\n.ui.selection.dropdown .menu > .item[data-v-3a0c7bea] {\\n  border-top: 1px solid #FAFAFA;\\n  padding: 0.78571429rem 1.14285714rem !important;\\n  white-space: normal;\\n  word-wrap: normal;\\n}\\n\\n/* User Item */\\n.ui.selection.dropdown .menu > .hidden.addition.item[data-v-3a0c7bea] {\\n  display: none;\\n}\\n\\n/* Hover */\\n.ui.selection.dropdown[data-v-3a0c7bea]:hover {\\n  border-color: rgba(34, 36, 38, 0.35);\\n  box-shadow: none;\\n}\\n\\n/* Active */\\n.ui.selection.active.dropdown[data-v-3a0c7bea] {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n.ui.selection.active.dropdown .menu[data-v-3a0c7bea] {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n\\n/* Focus */\\n.ui.selection.dropdown[data-v-3a0c7bea]:focus {\\n  border-color: #96C8DA;\\n  box-shadow: none;\\n}\\n.ui.selection.dropdown:focus .menu[data-v-3a0c7bea] {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n\\n/* Visible */\\n.ui.selection.visible.dropdown > .text[data-v-3a0c7bea]:not(.default) {\\n  font-weight: normal;\\n  color: rgba(0, 0, 0, 0.8);\\n}\\n\\n/* Visible Hover */\\n.ui.selection.active.dropdown[data-v-3a0c7bea]:hover {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n.ui.selection.active.dropdown:hover .menu[data-v-3a0c7bea] {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n\\n/* Dropdown Icon */\\n.ui.active.selection.dropdown > .dropdown.icon[data-v-3a0c7bea],\\n.ui.visible.selection.dropdown > .dropdown.icon[data-v-3a0c7bea] {\\n  opacity: 1;\\n  z-index: 3;\\n}\\n\\n/* Connecting Border */\\n.ui.active.selection.dropdown[data-v-3a0c7bea] {\\n  border-bottom-left-radius: 0em !important;\\n  border-bottom-right-radius: 0em !important;\\n}\\n\\n/* Empty Connecting Border */\\n.ui.active.empty.selection.dropdown[data-v-3a0c7bea] {\\n  border-radius: 0.28571429rem !important;\\n  box-shadow: none !important;\\n}\\n.ui.active.empty.selection.dropdown .menu[data-v-3a0c7bea] {\\n  border: none !important;\\n  box-shadow: none !important;\\n}\\n\\n/*--------------\\n   Searchable\\n---------------*/\\n\\n\\n/* Search Selection */\\n.ui.search.dropdown[data-v-3a0c7bea] {\\n  min-width: '';\\n}\\n\\n/* Search Dropdown */\\n.ui.search.dropdown > input.search[data-v-3a0c7bea] {\\n  background: none transparent !important;\\n  border: none !important;\\n  box-shadow: none !important;\\n  cursor: text;\\n  top: 0em;\\n  left: 1px;\\n  width: 100%;\\n  outline: none;\\n  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);\\n  padding: inherit;\\n}\\n\\n/* Text Layering */\\n.ui.search.dropdown > input.search[data-v-3a0c7bea] {\\n  position: absolute;\\n  z-index: 2;\\n}\\n.ui.search.dropdown > .text[data-v-3a0c7bea] {\\n  cursor: text;\\n  position: relative;\\n  left: 1px;\\n  z-index: 3;\\n}\\n\\n/* Search Selection */\\n.ui.search.selection.dropdown > input.search[data-v-3a0c7bea] {\\n  line-height: 1.2142em;\\n  padding: 0.67861429em 2.1em 0.67861429em 1em;\\n}\\n\\n/* Used to size multi select input to character width */\\n.ui.search.selection.dropdown > span.sizer[data-v-3a0c7bea] {\\n  line-height: 1.2142em;\\n  padding: 0.67861429em 2.1em 0.67861429em 1em;\\n  display: none;\\n  white-space: pre;\\n}\\n\\n/* Active/Visible Search */\\n.ui.search.dropdown.active > input.search[data-v-3a0c7bea],\\n.ui.search.dropdown.visible > input.search[data-v-3a0c7bea] {\\n  cursor: auto;\\n}\\n.ui.search.dropdown.active > .text[data-v-3a0c7bea],\\n.ui.search.dropdown.visible > .text[data-v-3a0c7bea] {\\n  pointer-events: none;\\n}\\n\\n/* Filtered Text */\\n.ui.active.search.dropdown input.search:focus + .text .icon[data-v-3a0c7bea],\\n.ui.active.search.dropdown input.search:focus + .text .flag[data-v-3a0c7bea] {\\n  opacity: 0.45;\\n}\\n.ui.active.search.dropdown input.search:focus + .text[data-v-3a0c7bea] {\\n  color: rgba(115, 115, 115, 0.87) !important;\\n}\\n\\n/* Search Menu */\\n.ui.search.dropdown .menu[data-v-3a0c7bea] {\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n  -webkit-backface-visibility: hidden;\\n          backface-visibility: hidden;\\n  -webkit-overflow-scrolling: touch;\\n}\\n@media only screen and (max-width: 767px) {\\n.ui.search.dropdown .menu[data-v-3a0c7bea] {\\n    max-height: 8.01428571rem;\\n}\\n}\\n@media only screen and (min-width: 768px) {\\n.ui.search.dropdown .menu[data-v-3a0c7bea] {\\n    max-height: 10.68571429rem;\\n}\\n}\\n@media only screen and (min-width: 992px) {\\n.ui.search.dropdown .menu[data-v-3a0c7bea] {\\n    max-height: 16.02857143rem;\\n}\\n}\\n@media only screen and (min-width: 1920px) {\\n.ui.search.dropdown .menu[data-v-3a0c7bea] {\\n    max-height: 21.37142857rem;\\n}\\n}\\n\\n/*--------------\\n    Multiple\\n---------------*/\\n\\n\\n/* Multiple Selection */\\n.ui.multiple.dropdown[data-v-3a0c7bea] {\\n  padding: 0.22620476em 2.1em 0.22620476em 0.35714286em;\\n}\\n.ui.multiple.dropdown .menu[data-v-3a0c7bea] {\\n  cursor: auto;\\n}\\n\\n/* Multiple Search Selection */\\n.ui.multiple.search.dropdown[data-v-3a0c7bea],\\n.ui.multiple.search.dropdown > input.search[data-v-3a0c7bea] {\\n  cursor: text;\\n}\\n\\n/* Selection Label */\\n.ui.multiple.dropdown > .label[data-v-3a0c7bea] {\\n  -webkit-user-select: none;\\n     -moz-user-select: none;\\n      -ms-user-select: none;\\n          user-select: none;\\n  display: inline-block;\\n  vertical-align: top;\\n  white-space: normal;\\n  font-size: 1em;\\n  padding: 0.35714286em 0.78571429em;\\n  margin: 0.14285714rem 0.28571429rem 0.14285714rem 0em;\\n  box-shadow: 0px 0px 0px 1px rgba(34, 36, 38, 0.15) inset;\\n}\\n\\n/* Dropdown Icon */\\n.ui.multiple.dropdown .dropdown.icon[data-v-3a0c7bea] {\\n  margin: '';\\n  padding: '';\\n}\\n\\n/* Text */\\n.ui.multiple.dropdown > .text[data-v-3a0c7bea] {\\n  position: static;\\n  padding: 0;\\n  max-width: 100%;\\n  margin: 0.45240952em 0em 0.45240952em 0.64285714em;\\n  line-height: 1.21428571em;\\n}\\n.ui.multiple.dropdown > .label ~ input.search[data-v-3a0c7bea] {\\n  margin-left: 0.14285714em !important;\\n}\\n.ui.multiple.dropdown > .label ~ .text[data-v-3a0c7bea] {\\n  display: none;\\n}\\n\\n/*-----------------\\n  Multiple Search\\n-----------------*/\\n\\n\\n/* Prompt Text */\\n.ui.multiple.search.dropdown > .text[data-v-3a0c7bea] {\\n  display: inline-block;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  padding: inherit;\\n  margin: 0.45240952em 0em 0.45240952em 0.64285714em;\\n  line-height: 1.21428571em;\\n}\\n.ui.multiple.search.dropdown > .label ~ .text[data-v-3a0c7bea] {\\n  display: none;\\n}\\n\\n/* Search */\\n.ui.multiple.search.dropdown > input.search[data-v-3a0c7bea] {\\n  position: static;\\n  padding: 0;\\n  max-width: 100%;\\n  margin: 0.45240952em 0em 0.45240952em 0.64285714em;\\n  width: 2.2em;\\n  line-height: 1.21428571em;\\n}\\n\\n/*--------------\\n     Inline\\n---------------*/\\n.ui.inline.dropdown[data-v-3a0c7bea] {\\n  cursor: pointer;\\n  display: inline-block;\\n  color: inherit;\\n}\\n.ui.inline.dropdown .dropdown.icon[data-v-3a0c7bea] {\\n  margin: 0em 0.5em 0em 0.21428571em;\\n  vertical-align: baseline;\\n}\\n.ui.inline.dropdown > .text[data-v-3a0c7bea] {\\n  font-weight: bold;\\n}\\n.ui.inline.dropdown .menu[data-v-3a0c7bea] {\\n  cursor: auto;\\n  margin-top: 0.21428571em;\\n  border-radius: 0.28571429rem;\\n}\\n\\n\\n/*******************************\\n            States\\n*******************************/\\n\\n\\n/*--------------------\\n        Active\\n----------------------*/\\n\\n\\n/* Menu Item Active */\\n.ui.dropdown .menu .active.item[data-v-3a0c7bea] {\\n  background: transparent;\\n  font-weight: bold;\\n  color: rgba(0, 0, 0, 0.95);\\n  box-shadow: none;\\n  z-index: 12;\\n}\\n\\n/*--------------------\\n        Hover\\n----------------------*/\\n\\n\\n/* Menu Item Hover */\\n.ui.dropdown .menu > .item[data-v-3a0c7bea]:hover {\\n  background: rgba(0, 0, 0, 0.05);\\n  color: rgba(0, 0, 0, 0.95);\\n  z-index: 13;\\n}\\n\\n/*--------------------\\n       Loading\\n---------------------*/\\n.ui.loading.dropdown > i.icon[data-v-3a0c7bea] {\\n  height: 1em !important;\\n  padding: 1.14285714em 1.07142857em !important;\\n}\\n.ui.loading.dropdown > i.icon[data-v-3a0c7bea]:before {\\n  position: absolute;\\n  content: '';\\n  top: 50%;\\n  left: 50%;\\n  margin: -0.64285714em 0em 0em -0.64285714em;\\n  width: 1.28571429em;\\n  height: 1.28571429em;\\n  border-radius: 500rem;\\n  border: 0.2em solid rgba(0, 0, 0, 0.1);\\n}\\n.ui.loading.dropdown > i.icon[data-v-3a0c7bea]:after {\\n  position: absolute;\\n  content: '';\\n  top: 50%;\\n  left: 50%;\\n  box-shadow: 0px 0px 0px 1px transparent;\\n  margin: -0.64285714em 0em 0em -0.64285714em;\\n  width: 1.28571429em;\\n  height: 1.28571429em;\\n  -webkit-animation: dropdown-spin 0.6s linear;\\n          animation: dropdown-spin 0.6s linear;\\n  -webkit-animation-iteration-count: infinite;\\n          animation-iteration-count: infinite;\\n  border-radius: 500rem;\\n  border-color: #767676 transparent transparent;\\n  border-style: solid;\\n  border-width: 0.2em;\\n}\\n\\n/* Coupling */\\n.ui.loading.dropdown.button > i.icon[data-v-3a0c7bea]:before,\\n.ui.loading.dropdown.button > i.icon[data-v-3a0c7bea]:after {\\n  display: none;\\n}\\n@-webkit-keyframes dropdown-spin {\\nfrom {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n}\\nto {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n}\\n}\\n@keyframes dropdown-spin {\\nfrom {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n}\\nto {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n}\\n}\\n\\n/*--------------------\\n     Default Text\\n----------------------*/\\n.ui.dropdown:not(.button) > .default.text[data-v-3a0c7bea],\\n.ui.default.dropdown:not(.button) > .text[data-v-3a0c7bea] {\\n  color: rgba(191, 191, 191, 0.87);\\n}\\n.ui.dropdown:not(.button) > input:focus + .default.text[data-v-3a0c7bea],\\n.ui.default.dropdown:not(.button) > input:focus + .text[data-v-3a0c7bea] {\\n  color: rgba(115, 115, 115, 0.87);\\n}\\n\\n/*--------------------\\n        Loading\\n----------------------*/\\n.ui.loading.dropdown > .text[data-v-3a0c7bea] {\\n  -webkit-transition: none;\\n  transition: none;\\n}\\n\\n/* Used To Check Position */\\n.ui.dropdown .loading.menu[data-v-3a0c7bea] {\\n  display: block;\\n  visibility: hidden;\\n  z-index: -1;\\n}\\n\\n/*--------------------\\n    Keyboard Select\\n----------------------*/\\n\\n\\n/* Selected Item */\\n.ui.dropdown.selected[data-v-3a0c7bea],\\n.ui.dropdown .menu .selected.item[data-v-3a0c7bea] {\\n  background: rgba(0, 0, 0, 0.03);\\n  color: rgba(0, 0, 0, 0.95);\\n}\\n\\n/*--------------------\\n    Search Filtered\\n----------------------*/\\n\\n\\n/* Filtered Item */\\n.ui.dropdown > .filtered.text[data-v-3a0c7bea] {\\n  visibility: hidden;\\n}\\n.ui.dropdown .filtered.item[data-v-3a0c7bea] {\\n  display: none !important;\\n}\\n\\n/*--------------------\\n        Error\\n----------------------*/\\n.ui.dropdown.error[data-v-3a0c7bea],\\n.ui.dropdown.error > .text[data-v-3a0c7bea],\\n.ui.dropdown.error > .default.text[data-v-3a0c7bea] {\\n  color: #9F3A38;\\n}\\n.ui.selection.dropdown.error[data-v-3a0c7bea] {\\n  background: #FFF6F6;\\n  border-color: #E0B4B4;\\n}\\n.ui.selection.dropdown.error[data-v-3a0c7bea]:hover {\\n  border-color: #E0B4B4;\\n}\\n.ui.dropdown.error > .menu[data-v-3a0c7bea],\\n.ui.dropdown.error > .menu .menu[data-v-3a0c7bea] {\\n  border-color: #E0B4B4;\\n}\\n.ui.dropdown.error > .menu > .item[data-v-3a0c7bea] {\\n  color: #9F3A38;\\n}\\n.ui.multiple.selection.error.dropdown > .label[data-v-3a0c7bea] {\\n  border-color: #E0B4B4;\\n}\\n\\n/* Item Hover */\\n.ui.dropdown.error > .menu > .item[data-v-3a0c7bea]:hover {\\n  background-color: #FFF2F2;\\n}\\n\\n/* Item Active */\\n.ui.dropdown.error > .menu .active.item[data-v-3a0c7bea] {\\n  background-color: #FDCFCF;\\n}\\n\\n/*--------------------\\n        Disabled\\n----------------------*/\\n\\n\\n/* Disabled */\\n.ui.disabled.dropdown[data-v-3a0c7bea],\\n.ui.dropdown .menu > .disabled.item[data-v-3a0c7bea] {\\n  cursor: default;\\n  pointer-events: none;\\n  opacity: 0.45;\\n}\\n\\n\\n/*******************************\\n           Variations\\n*******************************/\\n\\n\\n/*--------------\\n    Direction\\n---------------*/\\n\\n\\n/* Flyout Direction */\\n.ui.dropdown .menu[data-v-3a0c7bea] {\\n  left: 0px;\\n}\\n\\n/* Default Side (Right) */\\n.ui.dropdown .right.menu > .menu[data-v-3a0c7bea],\\n.ui.dropdown .menu .right.menu[data-v-3a0c7bea] {\\n  left: 100% !important;\\n  right: auto !important;\\n  border-radius: 0.28571429rem !important;\\n}\\n\\n/* Left Flyout Menu */\\n.ui.dropdown > .left.menu .menu[data-v-3a0c7bea],\\n.ui.dropdown .menu .left.menu[data-v-3a0c7bea] {\\n  left: auto !important;\\n  right: 100% !important;\\n  border-radius: 0.28571429rem !important;\\n}\\n.ui.dropdown .item .left.dropdown.icon[data-v-3a0c7bea],\\n.ui.dropdown .left.menu .item .dropdown.icon[data-v-3a0c7bea] {\\n  width: auto;\\n  float: left;\\n  margin: 0em 0.78571429rem 0em 0em;\\n}\\n.ui.dropdown .item .left.dropdown.icon[data-v-3a0c7bea],\\n.ui.dropdown .left.menu .item .dropdown.icon[data-v-3a0c7bea] {\\n  width: auto;\\n  float: left;\\n  margin: 0em 0.78571429rem 0em 0em;\\n}\\n.ui.dropdown .item .left.dropdown.icon + .text[data-v-3a0c7bea],\\n.ui.dropdown .left.menu .item .dropdown.icon + .text[data-v-3a0c7bea] {\\n  margin-left: 1em;\\n}\\n\\n/*--------------\\n     Upward\\n---------------*/\\n\\n\\n/* Upward Main Menu */\\n.ui.upward.dropdown > .menu[data-v-3a0c7bea] {\\n  top: auto;\\n  bottom: 100%;\\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.08);\\n  border-radius: 0.28571429rem 0.28571429rem 0em 0em;\\n}\\n\\n/* Upward Sub Menu */\\n.ui.dropdown .upward.menu[data-v-3a0c7bea] {\\n  top: auto !important;\\n  bottom: 0 !important;\\n}\\n\\n/* Active Upward */\\n.ui.simple.upward.active.dropdown[data-v-3a0c7bea],\\n.ui.simple.upward.dropdown[data-v-3a0c7bea]:hover {\\n  border-radius: 0.28571429rem 0.28571429rem 0em 0em !important;\\n}\\n.ui.upward.dropdown.button:not(.pointing):not(.floating).active[data-v-3a0c7bea] {\\n  border-radius: 0.28571429rem 0.28571429rem 0em 0em;\\n}\\n\\n/* Selection */\\n.ui.upward.selection.dropdown .menu[data-v-3a0c7bea] {\\n  border-top-width: 1px !important;\\n  border-bottom-width: 0px !important;\\n  box-shadow: 0px -2px 3px 0px rgba(0, 0, 0, 0.08);\\n}\\n.ui.upward.selection.dropdown[data-v-3a0c7bea]:hover {\\n  box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.05);\\n}\\n\\n/* Active Upward */\\n.ui.active.upward.selection.dropdown[data-v-3a0c7bea] {\\n  border-radius: 0em 0em 0.28571429rem 0.28571429rem !important;\\n}\\n\\n/* Visible Upward */\\n.ui.upward.selection.dropdown.visible[data-v-3a0c7bea] {\\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.08);\\n  border-radius: 0em 0em 0.28571429rem 0.28571429rem !important;\\n}\\n\\n/* Visible Hover Upward */\\n.ui.upward.active.selection.dropdown[data-v-3a0c7bea]:hover {\\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.05);\\n}\\n.ui.upward.active.selection.dropdown:hover .menu[data-v-3a0c7bea] {\\n  box-shadow: 0px -2px 3px 0px rgba(0, 0, 0, 0.08);\\n}\\n\\n/*--------------\\n     Simple\\n---------------*/\\n\\n\\n/*  Selection Menu */\\n.ui.scrolling.dropdown .menu[data-v-3a0c7bea],\\n.ui.dropdown .scrolling.menu[data-v-3a0c7bea] {\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n}\\n.ui.scrolling.dropdown .menu[data-v-3a0c7bea] {\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n  -webkit-backface-visibility: hidden;\\n          backface-visibility: hidden;\\n  -webkit-overflow-scrolling: touch;\\n  min-width: 100% !important;\\n  width: auto !important;\\n}\\n.ui.dropdown .scrolling.menu[data-v-3a0c7bea] {\\n  position: static;\\n  overflow-y: auto;\\n  border: none;\\n  box-shadow: none !important;\\n  border-radius: 0 !important;\\n  margin: 0 !important;\\n  min-width: 100% !important;\\n  width: auto !important;\\n  border-top: 1px solid rgba(34, 36, 38, 0.15);\\n}\\n.ui.scrolling.dropdown .menu .item.item.item[data-v-3a0c7bea],\\n.ui.dropdown .scrolling.menu > .item.item.item[data-v-3a0c7bea] {\\n  border-top: none;\\n  padding-right: calc( 1.14285714rem  +  17px ) !important;\\n}\\n.ui.scrolling.dropdown .menu .item[data-v-3a0c7bea]:first-child,\\n.ui.dropdown .scrolling.menu .item[data-v-3a0c7bea]:first-child {\\n  border-top: none;\\n}\\n.ui.dropdown > .animating.menu .scrolling.menu[data-v-3a0c7bea],\\n.ui.dropdown > .visible.menu .scrolling.menu[data-v-3a0c7bea] {\\n  display: block;\\n}\\n\\n/* Scrollbar in IE */\\n@media all and (-ms-high-contrast: none) {\\n.ui.scrolling.dropdown .menu[data-v-3a0c7bea],\\n  .ui.dropdown .scrolling.menu[data-v-3a0c7bea] {\\n    min-width: calc(100% -  17px );\\n}\\n}\\n@media only screen and (max-width: 767px) {\\n.ui.scrolling.dropdown .menu[data-v-3a0c7bea],\\n  .ui.dropdown .scrolling.menu[data-v-3a0c7bea] {\\n    max-height: 10.28571429rem;\\n}\\n}\\n@media only screen and (min-width: 768px) {\\n.ui.scrolling.dropdown .menu[data-v-3a0c7bea],\\n  .ui.dropdown .scrolling.menu[data-v-3a0c7bea] {\\n    max-height: 15.42857143rem;\\n}\\n}\\n@media only screen and (min-width: 992px) {\\n.ui.scrolling.dropdown .menu[data-v-3a0c7bea],\\n  .ui.dropdown .scrolling.menu[data-v-3a0c7bea] {\\n    max-height: 20.57142857rem;\\n}\\n}\\n@media only screen and (min-width: 1920px) {\\n.ui.scrolling.dropdown .menu[data-v-3a0c7bea],\\n  .ui.dropdown .scrolling.menu[data-v-3a0c7bea] {\\n    max-height: 20.57142857rem;\\n}\\n}\\n\\n/*--------------\\n     Simple\\n---------------*/\\n\\n\\n/* Displays without javascript */\\n.ui.simple.dropdown .menu[data-v-3a0c7bea]:before,\\n.ui.simple.dropdown .menu[data-v-3a0c7bea]:after {\\n  display: none;\\n}\\n.ui.simple.dropdown .menu[data-v-3a0c7bea] {\\n  position: absolute;\\n  display: block;\\n  overflow: hidden;\\n  top: -9999px !important;\\n  opacity: 0;\\n  width: 0;\\n  height: 0;\\n  -webkit-transition: opacity 0.1s ease;\\n  transition: opacity 0.1s ease;\\n}\\n.ui.simple.active.dropdown[data-v-3a0c7bea],\\n.ui.simple.dropdown[data-v-3a0c7bea]:hover {\\n  border-bottom-left-radius: 0em !important;\\n  border-bottom-right-radius: 0em !important;\\n}\\n.ui.simple.active.dropdown > .menu[data-v-3a0c7bea],\\n.ui.simple.dropdown:hover > .menu[data-v-3a0c7bea] {\\n  overflow: visible;\\n  width: auto;\\n  height: auto;\\n  top: 100% !important;\\n  opacity: 1;\\n}\\n.ui.simple.dropdown > .menu > .item:active > .menu[data-v-3a0c7bea],\\n.ui.simple.dropdown:hover > .menu > .item:hover > .menu[data-v-3a0c7bea] {\\n  overflow: visible;\\n  width: auto;\\n  height: auto;\\n  top: 0% !important;\\n  left: 100% !important;\\n  opacity: 1;\\n}\\n.ui.simple.disabled.dropdown:hover .menu[data-v-3a0c7bea] {\\n  display: none;\\n  height: 0px;\\n  width: 0px;\\n  overflow: hidden;\\n}\\n\\n/* Visible */\\n.ui.simple.visible.dropdown > .menu[data-v-3a0c7bea] {\\n  display: block;\\n}\\n\\n/*--------------\\n      Fluid\\n---------------*/\\n.ui.fluid.dropdown[data-v-3a0c7bea] {\\n  display: block;\\n  width: 100%;\\n  min-width: 0em;\\n}\\n.ui.fluid.dropdown > .dropdown.icon[data-v-3a0c7bea] {\\n  float: right;\\n}\\n\\n/*--------------\\n    Floating\\n---------------*/\\n.ui.floating.dropdown .menu[data-v-3a0c7bea] {\\n  left: 0;\\n  right: auto;\\n  box-shadow: 0px 2px 4px 0px rgba(34, 36, 38, 0.12), 0px 2px 10px 0px rgba(34, 36, 38, 0.15) !important;\\n  border-radius: 0.28571429rem !important;\\n}\\n.ui.floating.dropdown > .menu[data-v-3a0c7bea] {\\n  margin-top: 0.5em !important;\\n  border-radius: 0.28571429rem !important;\\n}\\n\\n/*--------------\\n     Pointing\\n---------------*/\\n.ui.pointing.dropdown > .menu[data-v-3a0c7bea] {\\n  top: 100%;\\n  margin-top: 0.78571429rem;\\n  border-radius: 0.28571429rem;\\n}\\n.ui.pointing.dropdown > .menu[data-v-3a0c7bea]:after {\\n  display: block;\\n  position: absolute;\\n  pointer-events: none;\\n  content: '';\\n  visibility: visible;\\n  -webkit-transform: rotate(45deg);\\n      -ms-transform: rotate(45deg);\\n          transform: rotate(45deg);\\n  width: 0.5em;\\n  height: 0.5em;\\n  box-shadow: -1px -1px 0px 1px rgba(34, 36, 38, 0.15);\\n  background: #FFFFFF;\\n  z-index: 2;\\n}\\n.ui.pointing.dropdown > .menu[data-v-3a0c7bea]:after {\\n  top: -0.25em;\\n  left: 50%;\\n  margin: 0em 0em 0em -0.25em;\\n}\\n\\n/* Top Left Pointing */\\n.ui.top.left.pointing.dropdown > .menu[data-v-3a0c7bea] {\\n  top: 100%;\\n  bottom: auto;\\n  left: 0%;\\n  right: auto;\\n  margin: 1em 0em 0em;\\n}\\n.ui.top.left.pointing.dropdown > .menu[data-v-3a0c7bea] {\\n  top: 100%;\\n  bottom: auto;\\n  left: 0%;\\n  right: auto;\\n  margin: 1em 0em 0em;\\n}\\n.ui.top.left.pointing.dropdown > .menu[data-v-3a0c7bea]:after {\\n  top: -0.25em;\\n  left: 1em;\\n  right: auto;\\n  margin: 0em;\\n  -webkit-transform: rotate(45deg);\\n      -ms-transform: rotate(45deg);\\n          transform: rotate(45deg);\\n}\\n\\n/* Top Right  Pointing */\\n.ui.top.right.pointing.dropdown > .menu[data-v-3a0c7bea] {\\n  top: 100%;\\n  bottom: auto;\\n  right: 0%;\\n  left: auto;\\n  margin: 1em 0em 0em;\\n}\\n.ui.top.right.pointing.dropdown > .menu[data-v-3a0c7bea]:after {\\n  top: -0.25em;\\n  left: auto;\\n  right: 1em;\\n  margin: 0em;\\n  -webkit-transform: rotate(45deg);\\n      -ms-transform: rotate(45deg);\\n          transform: rotate(45deg);\\n}\\n\\n/* Left Pointing */\\n.ui.left.pointing.dropdown > .menu[data-v-3a0c7bea] {\\n  top: 0%;\\n  left: 100%;\\n  right: auto;\\n  margin: 0em 0em 0em 1em;\\n}\\n.ui.left.pointing.dropdown > .menu[data-v-3a0c7bea]:after {\\n  top: 1em;\\n  left: -0.25em;\\n  margin: 0em 0em 0em 0em;\\n  -webkit-transform: rotate(-45deg);\\n      -ms-transform: rotate(-45deg);\\n          transform: rotate(-45deg);\\n}\\n\\n/* Right Pointing */\\n.ui.right.pointing.dropdown > .menu[data-v-3a0c7bea] {\\n  top: 0%;\\n  left: auto;\\n  right: 100%;\\n  margin: 0em 1em 0em 0em;\\n}\\n.ui.right.pointing.dropdown > .menu[data-v-3a0c7bea]:after {\\n  top: 1em;\\n  left: auto;\\n  right: -0.25em;\\n  margin: 0em 0em 0em 0em;\\n  -webkit-transform: rotate(135deg);\\n      -ms-transform: rotate(135deg);\\n          transform: rotate(135deg);\\n}\\n\\n/* Bottom Pointing */\\n.ui.bottom.pointing.dropdown > .menu[data-v-3a0c7bea] {\\n  top: auto;\\n  bottom: 100%;\\n  left: 0%;\\n  right: auto;\\n  margin: 0em 0em 1em;\\n}\\n.ui.bottom.pointing.dropdown > .menu[data-v-3a0c7bea]:after {\\n  top: auto;\\n  bottom: -0.25em;\\n  right: auto;\\n  margin: 0em;\\n  -webkit-transform: rotate(-135deg);\\n      -ms-transform: rotate(-135deg);\\n          transform: rotate(-135deg);\\n}\\n\\n/* Reverse Sub-Menu Direction */\\n.ui.bottom.pointing.dropdown > .menu .menu[data-v-3a0c7bea] {\\n  top: auto !important;\\n  bottom: 0px !important;\\n}\\n\\n/* Bottom Left */\\n.ui.bottom.left.pointing.dropdown > .menu[data-v-3a0c7bea] {\\n  left: 0%;\\n  right: auto;\\n}\\n.ui.bottom.left.pointing.dropdown > .menu[data-v-3a0c7bea]:after {\\n  left: 1em;\\n  right: auto;\\n}\\n\\n/* Bottom Right */\\n.ui.bottom.right.pointing.dropdown > .menu[data-v-3a0c7bea] {\\n  right: 0%;\\n  left: auto;\\n}\\n.ui.bottom.right.pointing.dropdown > .menu[data-v-3a0c7bea]:after {\\n  left: auto;\\n  right: 1em;\\n}\\n\\n/* Upward pointing */\\n.ui.upward.pointing.dropdown > .menu[data-v-3a0c7bea],\\n.ui.upward.top.pointing.dropdown > .menu[data-v-3a0c7bea] {\\n  top: auto;\\n  bottom: 100%;\\n  margin: 0em 0em 0.78571429rem;\\n  border-radius: 0.28571429rem;\\n}\\n.ui.upward.pointing.dropdown > .menu[data-v-3a0c7bea]:after,\\n.ui.upward.top.pointing.dropdown > .menu[data-v-3a0c7bea]:after {\\n  top: 100%;\\n  bottom: auto;\\n  box-shadow: 1px 1px 0px 1px rgba(34, 36, 38, 0.15);\\n  margin: -0.25em 0em 0em;\\n}\\n\\n\\n/*******************************\\n         Theme Overrides\\n*******************************/\\n\\n\\n/* Dropdown Carets */\\n@font-face {\\n  font-family: 'Dropdown';\\n  src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMggjB5AAAAC8AAAAYGNtYXAPfuIIAAABHAAAAExnYXNwAAAAEAAAAWgAAAAIZ2x5Zjo82LgAAAFwAAABVGhlYWQAQ88bAAACxAAAADZoaGVhAwcB6QAAAvwAAAAkaG10eAS4ABIAAAMgAAAAIGxvY2EBNgDeAAADQAAAABJtYXhwAAoAFgAAA1QAAAAgbmFtZVcZpu4AAAN0AAABRXBvc3QAAwAAAAAEvAAAACAAAwIAAZAABQAAAUwBZgAAAEcBTAFmAAAA9QAZAIQAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADw2gHg/+D/4AHgACAAAAABAAAAAAAAAAAAAAAgAAAAAAACAAAAAwAAABQAAwABAAAAFAAEADgAAAAKAAgAAgACAAEAIPDa//3//wAAAAAAIPDX//3//wAB/+MPLQADAAEAAAAAAAAAAAAAAAEAAf//AA8AAQAAAAAAAAAAAAIAADc5AQAAAAABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAIABJQElABMAABM0NzY3BTYXFhUUDwEGJwYvASY1AAUGBwEACAUGBoAFCAcGgAUBEgcGBQEBAQcECQYHfwYBAQZ/BwYAAQAAAG4BJQESABMAADc0PwE2MzIfARYVFAcGIyEiJyY1AAWABgcIBYAGBgUI/wAHBgWABwaABQWABgcHBgUFBgcAAAABABIASQC3AW4AEwAANzQ/ATYXNhcWHQEUBwYnBi8BJjUSBoAFCAcFBgYFBwgFgAbbBwZ/BwEBBwQJ/wgEBwEBB38GBgAAAAABAAAASQClAW4AEwAANxE0NzYzMh8BFhUUDwEGIyInJjUABQYHCAWABgaABQgHBgVbAQAIBQYGgAUIBwWABgYFBwAAAAEAAAABAADZuaKOXw889QALAgAAAAAA0ABHWAAAAADQAEdYAAAAAAElAW4AAAAIAAIAAAAAAAAAAQAAAeD/4AAAAgAAAAAAASUAAQAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAABAAAAASUAAAElAAAAtwASALcAAAAAAAAACgAUAB4AQgBkAIgAqgAAAAEAAAAIABQAAQAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAOAK4AAQAAAAAAAQAOAAAAAQAAAAAAAgAOAEcAAQAAAAAAAwAOACQAAQAAAAAABAAOAFUAAQAAAAAABQAWAA4AAQAAAAAABgAHADIAAQAAAAAACgA0AGMAAwABBAkAAQAOAAAAAwABBAkAAgAOAEcAAwABBAkAAwAOACQAAwABBAkABAAOAFUAAwABBAkABQAWAA4AAwABBAkABgAOADkAAwABBAkACgA0AGMAaQBjAG8AbQBvAG8AbgBWAGUAcgBzAGkAbwBuACAAMQAuADAAaQBjAG8AbQBvAG8Abmljb21vb24AaQBjAG8AbQBvAG8AbgBSAGUAZwB1AGwAYQByAGkAYwBvAG0AbwBvAG4ARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAYgB5ACAASQBjAG8ATQBvAG8AbgAuAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=) format('truetype'), url(data:application/font-woff;charset=utf-8;base64,d09GRk9UVE8AAAVwAAoAAAAABSgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABDRkYgAAAA9AAAAdkAAAHZLDXE/09TLzIAAALQAAAAYAAAAGAIIweQY21hcAAAAzAAAABMAAAATA9+4ghnYXNwAAADfAAAAAgAAAAIAAAAEGhlYWQAAAOEAAAANgAAADYAQ88baGhlYQAAA7wAAAAkAAAAJAMHAelobXR4AAAD4AAAACAAAAAgBLgAEm1heHAAAAQAAAAABgAAAAYACFAAbmFtZQAABAgAAAFFAAABRVcZpu5wb3N0AAAFUAAAACAAAAAgAAMAAAEABAQAAQEBCGljb21vb24AAQIAAQA6+BwC+BsD+BgEHgoAGVP/i4seCgAZU/+LiwwHi2v4lPh0BR0AAACIDx0AAACNER0AAAAJHQAAAdASAAkBAQgPERMWGyAlKmljb21vb25pY29tb29udTB1MXUyMHVGMEQ3dUYwRDh1RjBEOXVGMERBAAACAYkABgAIAgABAAQABwAKAA0AVgCfAOgBL/yUDvyUDvyUDvuUDvtvi/emFYuQjZCOjo+Pj42Qiwj3lIsFkIuQiY6Hj4iNhouGi4aJh4eHCPsU+xQFiIiGiYaLhouHjYeOCPsU9xQFiI+Jj4uQCA77b4v3FBWLkI2Pjo8I9xT3FAWPjo+NkIuQi5CJjogI9xT7FAWPh42Hi4aLhomHh4eIiIaJhosI+5SLBYaLh42HjoiPiY+LkAgO+92d928Vi5CNkI+OCPcU9xQFjo+QjZCLkIuPiY6Hj4iNhouGCIv7lAWLhomHh4iIh4eJhouGi4aNiI8I+xT3FAWHjomPi5AIDvvdi+YVi/eUBYuQjZCOjo+Pj42Qi5CLkImOhwj3FPsUBY+IjYaLhouGiYeHiAj7FPsUBYiHhomGi4aLh42Hj4iOiY+LkAgO+JQU+JQViwwKAAAAAAMCAAGQAAUAAAFMAWYAAABHAUwBZgAAAPUAGQCEAAAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAQAAA8NoB4P/g/+AB4AAgAAAAAQAAAAAAAAAAAAAAIAAAAAAAAgAAAAMAAAAUAAMAAQAAABQABAA4AAAACgAIAAIAAgABACDw2v/9//8AAAAAACDw1//9//8AAf/jDy0AAwABAAAAAAAAAAAAAAABAAH//wAPAAEAAAABAAA5emozXw889QALAgAAAAAA0ABHWAAAAADQAEdYAAAAAAElAW4AAAAIAAIAAAAAAAAAAQAAAeD/4AAAAgAAAAAAASUAAQAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAABAAAAASUAAAElAAAAtwASALcAAAAAUAAACAAAAAAADgCuAAEAAAAAAAEADgAAAAEAAAAAAAIADgBHAAEAAAAAAAMADgAkAAEAAAAAAAQADgBVAAEAAAAAAAUAFgAOAAEAAAAAAAYABwAyAAEAAAAAAAoANABjAAMAAQQJAAEADgAAAAMAAQQJAAIADgBHAAMAAQQJAAMADgAkAAMAAQQJAAQADgBVAAMAAQQJAAUAFgAOAAMAAQQJAAYADgA5AAMAAQQJAAoANABjAGkAYwBvAG0AbwBvAG4AVgBlAHIAcwBpAG8AbgAgADEALgAwAGkAYwBvAG0AbwBvAG5pY29tb29uAGkAYwBvAG0AbwBvAG4AUgBlAGcAdQBsAGEAcgBpAGMAbwBtAG8AbwBuAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAEkAYwBvAE0AbwBvAG4ALgAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) format('woff');\\n  font-weight: normal;\\n  font-style: normal;\\n}\\n.ui.dropdown > .dropdown.icon[data-v-3a0c7bea] {\\n  font-family: 'Dropdown';\\n  line-height: 1;\\n  height: 1em;\\n  width: 1.23em;\\n  -webkit-backface-visibility: hidden;\\n          backface-visibility: hidden;\\n  font-weight: normal;\\n  font-style: normal;\\n  text-align: center;\\n}\\n.ui.dropdown > .dropdown.icon[data-v-3a0c7bea] {\\n  width: auto;\\n}\\n.ui.dropdown > .dropdown.icon[data-v-3a0c7bea]:before {\\n  content: '\\\\F0D7';\\n}\\n\\n/* Sub Menu */\\n.ui.dropdown .menu .item .dropdown.icon[data-v-3a0c7bea]:before {\\n  content: '\\\\F0DA' ;\\n}\\n.ui.dropdown .item .left.dropdown.icon[data-v-3a0c7bea]:before,\\n.ui.dropdown .left.menu .item .dropdown.icon[data-v-3a0c7bea]:before {\\n  content: \\\"\\\\F0D9\\\" ;\\n}\\n\\n/* Vertical Menu Dropdown */\\n.ui.vertical.menu .dropdown.item > .dropdown.icon[data-v-3a0c7bea]:before {\\n  content: \\\"\\\\F0DA\\\" ;\\n}\\n/* Icons for Reference\\n.dropdown.down.icon {\\n  content: \\\"\\\\f0d7\\\";\\n}\\n.dropdown.up.icon {\\n  content: \\\"\\\\f0d8\\\";\\n}\\n.dropdown.left.icon {\\n  content: \\\"\\\\f0d9\\\";\\n}\\n.dropdown.icon.icon {\\n  content: \\\"\\\\f0da\\\";\\n}\\n*/\\n\\n\\n/*******************************\\n        User Overrides\\n*******************************/\\n\\n\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 92 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(4)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/* Menu Item Hover */\\n.ui.dropdown .menu > .item:hover {\\n  background: none transparent !important;\\n}\\n\\n/* Menu Item Hover for Key event */\\n.ui.dropdown .menu > .item.current {\\n  background: rgba(0, 0, 0, 0.05) !important;\\n}\\n\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 93 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(4)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"/*!\\n * # Semantic UI 2.2.3 - Dropdown\\n * http://github.com/semantic-org/semantic-ui/\\n *\\n *\\n * Released under the MIT license\\n * http://opensource.org/licenses/MIT\\n *\\n */\\n\\n\\n/*******************************\\n            Dropdown\\n*******************************/\\n.ui.dropdown[data-v-4030daa2] {\\n  cursor: pointer;\\n  position: relative;\\n  display: inline-block;\\n  outline: none;\\n  text-align: left;\\n  -webkit-transition: box-shadow 0.1s ease, width 0.1s ease;\\n  transition: box-shadow 0.1s ease, width 0.1s ease;\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\n}\\n\\n\\n/*******************************\\n            Content\\n*******************************/\\n\\n\\n/*--------------\\n      Menu\\n---------------*/\\n.ui.dropdown .menu[data-v-4030daa2] {\\n  cursor: auto;\\n  position: absolute;\\n  display: none;\\n  outline: none;\\n  top: 100%;\\n  min-width: -webkit-max-content;\\n  min-width: -moz-max-content;\\n  min-width: max-content;\\n  margin: 0em;\\n  padding: 0em 0em;\\n  background: #FFFFFF;\\n  font-size: 1em;\\n  text-shadow: none;\\n  text-align: left;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n  border: 1px solid rgba(34, 36, 38, 0.15);\\n  border-radius: 0.28571429rem;\\n  -webkit-transition: opacity 0.1s ease;\\n  transition: opacity 0.1s ease;\\n  z-index: 11;\\n  will-change: transform, opacity;\\n}\\n.ui.dropdown .menu > *[data-v-4030daa2] {\\n  white-space: nowrap;\\n}\\n\\n/*--------------\\n  Hidden Input\\n---------------*/\\n.ui.dropdown > input[data-v-4030daa2]:not(.search):first-child,\\n.ui.dropdown > select[data-v-4030daa2] {\\n  display: none !important;\\n}\\n\\n/*--------------\\n Dropdown Icon\\n---------------*/\\n.ui.dropdown > .dropdown.icon[data-v-4030daa2] {\\n  position: relative;\\n  width: auto;\\n  font-size: 0.85714286em;\\n  margin: 0em 0em 0em 1em;\\n}\\n.ui.dropdown .menu > .item .dropdown.icon[data-v-4030daa2] {\\n  width: auto;\\n  float: right;\\n  margin: 0em 0em 0em 1em;\\n}\\n.ui.dropdown .menu > .item .dropdown.icon + .text[data-v-4030daa2] {\\n  margin-right: 1em;\\n}\\n\\n/*--------------\\n      Text\\n---------------*/\\n.ui.dropdown > .text[data-v-4030daa2] {\\n  display: inline-block;\\n  -webkit-transition: none;\\n  transition: none;\\n}\\n\\n/*--------------\\n    Menu Item\\n---------------*/\\n.ui.dropdown .menu > .item[data-v-4030daa2] {\\n  position: relative;\\n  cursor: pointer;\\n  display: block;\\n  border: none;\\n  height: auto;\\n  text-align: left;\\n  border-top: none;\\n  line-height: 1em;\\n  color: rgba(0, 0, 0, 0.87);\\n  padding: 0.78571429rem 1.14285714rem !important;\\n  font-size: 1rem;\\n  text-transform: none;\\n  font-weight: normal;\\n  box-shadow: none;\\n  -webkit-touch-callout: none;\\n}\\n.ui.dropdown .menu > .item[data-v-4030daa2]:first-child {\\n  border-top-width: 0px;\\n}\\n\\n/*--------------\\n  Floated Content\\n---------------*/\\n.ui.dropdown > .text > [class*=\\\"right floated\\\"][data-v-4030daa2],\\n.ui.dropdown .menu .item > [class*=\\\"right floated\\\"][data-v-4030daa2] {\\n  float: right !important;\\n  margin-right: 0em !important;\\n  margin-left: 1em !important;\\n}\\n.ui.dropdown > .text > [class*=\\\"left floated\\\"][data-v-4030daa2],\\n.ui.dropdown .menu .item > [class*=\\\"left floated\\\"][data-v-4030daa2] {\\n  float: left !important;\\n  margin-left: 0em !important;\\n  margin-right: 1em !important;\\n}\\n.ui.dropdown .menu .item > .icon.floated[data-v-4030daa2],\\n.ui.dropdown .menu .item > .flag.floated[data-v-4030daa2],\\n.ui.dropdown .menu .item > .image.floated[data-v-4030daa2],\\n.ui.dropdown .menu .item > img.floated[data-v-4030daa2] {\\n  margin-top: 0em;\\n}\\n\\n/*--------------\\n  Menu Divider\\n---------------*/\\n.ui.dropdown .menu > .header[data-v-4030daa2] {\\n  margin: 1rem 0rem 0.75rem;\\n  padding: 0em 1.14285714rem;\\n  color: rgba(0, 0, 0, 0.85);\\n  font-size: 0.78571429em;\\n  font-weight: bold;\\n  text-transform: uppercase;\\n}\\n.ui.dropdown .menu > .divider[data-v-4030daa2] {\\n  border-top: 1px solid rgba(34, 36, 38, 0.1);\\n  height: 0em;\\n  margin: 0.5em 0em;\\n}\\n.ui.dropdown .menu > .input[data-v-4030daa2] {\\n  width: auto;\\n  display: -webkit-box;\\n  display: -webkit-flex;\\n  display: -ms-flexbox;\\n  display: flex;\\n  margin: 1.14285714rem 0.78571429rem;\\n  min-width: 10rem;\\n}\\n.ui.dropdown .menu > .header + .input[data-v-4030daa2] {\\n  margin-top: 0em;\\n}\\n.ui.dropdown .menu > .input:not(.transparent) input[data-v-4030daa2] {\\n  padding: 0.5em 1em;\\n}\\n.ui.dropdown .menu > .input:not(.transparent) .button[data-v-4030daa2],\\n.ui.dropdown .menu > .input:not(.transparent) .icon[data-v-4030daa2],\\n.ui.dropdown .menu > .input:not(.transparent) .label[data-v-4030daa2] {\\n  padding-top: 0.5em;\\n  padding-bottom: 0.5em;\\n}\\n\\n/*-----------------\\n  Item Description\\n-------------------*/\\n.ui.dropdown > .text > .description[data-v-4030daa2],\\n.ui.dropdown .menu > .item > .description[data-v-4030daa2] {\\n  float: right;\\n  margin: 0em 0em 0em 1em;\\n  color: rgba(0, 0, 0, 0.4);\\n}\\n\\n/*-----------------\\n       Message\\n-------------------*/\\n.ui.dropdown .menu > .message[data-v-4030daa2] {\\n  padding: 0.78571429rem 1.14285714rem;\\n  font-weight: normal;\\n}\\n.ui.dropdown .menu > .message[data-v-4030daa2]:not(.ui) {\\n  color: rgba(0, 0, 0, 0.4);\\n}\\n\\n/*--------------\\n    Sub Menu\\n---------------*/\\n.ui.dropdown .menu .menu[data-v-4030daa2] {\\n  top: 0% !important;\\n  left: 100% !important;\\n  right: auto !important;\\n  margin: 0em 0em 0em -0.5em !important;\\n  border-radius: 0.28571429rem !important;\\n  z-index: 21 !important;\\n}\\n\\n/* Hide Arrow */\\n.ui.dropdown .menu .menu[data-v-4030daa2]:after {\\n  display: none;\\n}\\n\\n/*--------------\\n   Sub Elements\\n---------------*/\\n\\n\\n/* Icons / Flags / Labels / Image */\\n.ui.dropdown > .text > .icon[data-v-4030daa2],\\n.ui.dropdown > .text > .label[data-v-4030daa2],\\n.ui.dropdown > .text > .flag[data-v-4030daa2],\\n.ui.dropdown > .text > img[data-v-4030daa2],\\n.ui.dropdown > .text > .image[data-v-4030daa2] {\\n  margin-top: 0em;\\n}\\n.ui.dropdown .menu > .item > .icon[data-v-4030daa2],\\n.ui.dropdown .menu > .item > .label[data-v-4030daa2],\\n.ui.dropdown .menu > .item > .flag[data-v-4030daa2],\\n.ui.dropdown .menu > .item > .image[data-v-4030daa2],\\n.ui.dropdown .menu > .item > img[data-v-4030daa2] {\\n  margin-top: 0em;\\n}\\n.ui.dropdown > .text > .icon[data-v-4030daa2],\\n.ui.dropdown > .text > .label[data-v-4030daa2],\\n.ui.dropdown > .text > .flag[data-v-4030daa2],\\n.ui.dropdown > .text > img[data-v-4030daa2],\\n.ui.dropdown > .text > .image[data-v-4030daa2],\\n.ui.dropdown .menu > .item > .icon[data-v-4030daa2],\\n.ui.dropdown .menu > .item > .label[data-v-4030daa2],\\n.ui.dropdown .menu > .item > .flag[data-v-4030daa2],\\n.ui.dropdown .menu > .item > .image[data-v-4030daa2],\\n.ui.dropdown .menu > .item > img[data-v-4030daa2] {\\n  margin-left: 0em;\\n  float: none;\\n  margin-right: 0.78571429rem;\\n}\\n\\n/*--------------\\n     Image\\n---------------*/\\n.ui.dropdown > .text > img[data-v-4030daa2],\\n.ui.dropdown > .text > .image[data-v-4030daa2],\\n.ui.dropdown .menu > .item > .image[data-v-4030daa2],\\n.ui.dropdown .menu > .item > img[data-v-4030daa2] {\\n  display: inline-block;\\n  vertical-align: middle;\\n  width: auto;\\n  max-height: 2em;\\n}\\n\\n\\n/*******************************\\n            Coupling\\n*******************************/\\n\\n\\n/*--------------\\n      Menu\\n---------------*/\\n\\n\\n/* Remove Menu Item Divider */\\n.ui.dropdown .ui.menu > .item[data-v-4030daa2]:before,\\n.ui.menu .ui.dropdown .menu > .item[data-v-4030daa2]:before {\\n  display: none;\\n}\\n\\n/* Prevent Menu Item Border */\\n.ui.menu .ui.dropdown .menu .active.item[data-v-4030daa2] {\\n  border-left: none;\\n}\\n\\n/* Automatically float dropdown menu right on last menu item */\\n.ui.menu .right.menu .dropdown:last-child .menu[data-v-4030daa2],\\n.ui.menu .right.dropdown.item .menu[data-v-4030daa2],\\n.ui.buttons > .ui.dropdown:last-child .menu[data-v-4030daa2] {\\n  left: auto;\\n  right: 0em;\\n}\\n\\n/*--------------\\n      Label\\n---------------*/\\n\\n\\n/* Dropdown Menu */\\n.ui.label.dropdown .menu[data-v-4030daa2] {\\n  min-width: 100%;\\n}\\n\\n/*--------------\\n     Button\\n---------------*/\\n\\n\\n/* No Margin On Icon Button */\\n.ui.dropdown.icon.button > .dropdown.icon[data-v-4030daa2] {\\n  margin: 0em;\\n}\\n.ui.button.dropdown .menu[data-v-4030daa2] {\\n  min-width: 100%;\\n}\\n\\n\\n/*******************************\\n              Types\\n*******************************/\\n\\n\\n/*--------------\\n    Selection\\n---------------*/\\n\\n\\n/* Displays like a select box */\\n.ui.selection.dropdown[data-v-4030daa2] {\\n  cursor: pointer;\\n  word-wrap: break-word;\\n  line-height: 1em;\\n  white-space: normal;\\n  outline: 0;\\n  -webkit-transform: rotateZ(0deg);\\n      -ms-transform: rotate(0deg);\\n          transform: rotateZ(0deg);\\n  min-width: 14em;\\n  min-height: 2.7142em;\\n  background: #FFFFFF;\\n  display: inline-block;\\n  padding: 0.78571429em 2.1em 0.78571429em 1em;\\n  color: rgba(0, 0, 0, 0.87);\\n  box-shadow: none;\\n  border: 1px solid rgba(34, 36, 38, 0.15);\\n  border-radius: 0.28571429rem;\\n  -webkit-transition: box-shadow 0.1s ease, width 0.1s ease;\\n  transition: box-shadow 0.1s ease, width 0.1s ease;\\n}\\n.ui.selection.dropdown.visible[data-v-4030daa2],\\n.ui.selection.dropdown.active[data-v-4030daa2] {\\n  z-index: 10;\\n}\\nselect.ui.dropdown[data-v-4030daa2] {\\n  height: 38px;\\n  padding: 0.5em;\\n  border: 1px solid rgba(34, 36, 38, 0.15);\\n  visibility: visible;\\n}\\n.ui.selection.dropdown > .search.icon[data-v-4030daa2],\\n.ui.selection.dropdown > .delete.icon[data-v-4030daa2],\\n.ui.selection.dropdown > .dropdown.icon[data-v-4030daa2] {\\n  cursor: pointer;\\n  position: absolute;\\n  width: auto;\\n  height: auto;\\n  line-height: 1.2142em;\\n  top: 0.78571429em;\\n  right: 1em;\\n  z-index: 3;\\n  margin: -0.78571429em;\\n  padding: 0.78571429em;\\n  opacity: 0.8;\\n  -webkit-transition: opacity 0.1s ease;\\n  transition: opacity 0.1s ease;\\n}\\n\\n/* Compact */\\n.ui.compact.selection.dropdown[data-v-4030daa2] {\\n  min-width: 0px;\\n}\\n\\n/*  Selection Menu */\\n.ui.selection.dropdown .menu[data-v-4030daa2] {\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n  -webkit-backface-visibility: hidden;\\n          backface-visibility: hidden;\\n  -webkit-overflow-scrolling: touch;\\n  border-top-width: 0px !important;\\n  width: auto;\\n  outline: none;\\n  margin: 0px -1px;\\n  min-width: calc(100% +  2px );\\n  width: calc(100% +  2px );\\n  border-radius: 0em 0em 0.28571429rem 0.28571429rem;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n  -webkit-transition: opacity 0.1s ease;\\n  transition: opacity 0.1s ease;\\n}\\n.ui.selection.dropdown .menu[data-v-4030daa2]:after,\\n.ui.selection.dropdown .menu[data-v-4030daa2]:before {\\n  display: none;\\n}\\n\\n/*--------------\\n    Message\\n---------------*/\\n.ui.selection.dropdown .menu > .message[data-v-4030daa2] {\\n  padding: 0.78571429rem 1.14285714rem;\\n}\\n@media only screen and (max-width: 767px) {\\n.ui.selection.dropdown .menu[data-v-4030daa2] {\\n    max-height: 8.01428571rem;\\n}\\n}\\n@media only screen and (min-width: 768px) {\\n.ui.selection.dropdown .menu[data-v-4030daa2] {\\n    max-height: 10.68571429rem;\\n}\\n}\\n@media only screen and (min-width: 992px) {\\n.ui.selection.dropdown .menu[data-v-4030daa2] {\\n    max-height: 16.02857143rem;\\n}\\n}\\n@media only screen and (min-width: 1920px) {\\n.ui.selection.dropdown .menu[data-v-4030daa2] {\\n    max-height: 21.37142857rem;\\n}\\n}\\n\\n/* Menu Item */\\n.ui.selection.dropdown .menu > .item[data-v-4030daa2] {\\n  border-top: 1px solid #FAFAFA;\\n  padding: 0.78571429rem 1.14285714rem !important;\\n  white-space: normal;\\n  word-wrap: normal;\\n}\\n\\n/* User Item */\\n.ui.selection.dropdown .menu > .hidden.addition.item[data-v-4030daa2] {\\n  display: none;\\n}\\n\\n/* Hover */\\n.ui.selection.dropdown[data-v-4030daa2]:hover {\\n  border-color: rgba(34, 36, 38, 0.35);\\n  box-shadow: none;\\n}\\n\\n/* Active */\\n.ui.selection.active.dropdown[data-v-4030daa2] {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n.ui.selection.active.dropdown .menu[data-v-4030daa2] {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n\\n/* Focus */\\n.ui.selection.dropdown[data-v-4030daa2]:focus {\\n  border-color: #96C8DA;\\n  box-shadow: none;\\n}\\n.ui.selection.dropdown:focus .menu[data-v-4030daa2] {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n\\n/* Visible */\\n.ui.selection.visible.dropdown > .text[data-v-4030daa2]:not(.default) {\\n  font-weight: normal;\\n  color: rgba(0, 0, 0, 0.8);\\n}\\n\\n/* Visible Hover */\\n.ui.selection.active.dropdown[data-v-4030daa2]:hover {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n.ui.selection.active.dropdown:hover .menu[data-v-4030daa2] {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n\\n/* Dropdown Icon */\\n.ui.active.selection.dropdown > .dropdown.icon[data-v-4030daa2],\\n.ui.visible.selection.dropdown > .dropdown.icon[data-v-4030daa2] {\\n  opacity: 1;\\n  z-index: 3;\\n}\\n\\n/* Connecting Border */\\n.ui.active.selection.dropdown[data-v-4030daa2] {\\n  border-bottom-left-radius: 0em !important;\\n  border-bottom-right-radius: 0em !important;\\n}\\n\\n/* Empty Connecting Border */\\n.ui.active.empty.selection.dropdown[data-v-4030daa2] {\\n  border-radius: 0.28571429rem !important;\\n  box-shadow: none !important;\\n}\\n.ui.active.empty.selection.dropdown .menu[data-v-4030daa2] {\\n  border: none !important;\\n  box-shadow: none !important;\\n}\\n\\n/*--------------\\n   Searchable\\n---------------*/\\n\\n\\n/* Search Selection */\\n.ui.search.dropdown[data-v-4030daa2] {\\n  min-width: '';\\n}\\n\\n/* Search Dropdown */\\n.ui.search.dropdown > input.search[data-v-4030daa2] {\\n  background: none transparent !important;\\n  border: none !important;\\n  box-shadow: none !important;\\n  cursor: text;\\n  top: 0em;\\n  left: 1px;\\n  width: 100%;\\n  outline: none;\\n  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);\\n  padding: inherit;\\n}\\n\\n/* Text Layering */\\n.ui.search.dropdown > input.search[data-v-4030daa2] {\\n  position: absolute;\\n  z-index: 2;\\n}\\n.ui.search.dropdown > .text[data-v-4030daa2] {\\n  cursor: text;\\n  position: relative;\\n  left: 1px;\\n  z-index: 3;\\n}\\n\\n/* Search Selection */\\n.ui.search.selection.dropdown > input.search[data-v-4030daa2] {\\n  line-height: 1.2142em;\\n  padding: 0.67861429em 2.1em 0.67861429em 1em;\\n}\\n\\n/* Used to size multi select input to character width */\\n.ui.search.selection.dropdown > span.sizer[data-v-4030daa2] {\\n  line-height: 1.2142em;\\n  padding: 0.67861429em 2.1em 0.67861429em 1em;\\n  display: none;\\n  white-space: pre;\\n}\\n\\n/* Active/Visible Search */\\n.ui.search.dropdown.active > input.search[data-v-4030daa2],\\n.ui.search.dropdown.visible > input.search[data-v-4030daa2] {\\n  cursor: auto;\\n}\\n.ui.search.dropdown.active > .text[data-v-4030daa2],\\n.ui.search.dropdown.visible > .text[data-v-4030daa2] {\\n  pointer-events: none;\\n}\\n\\n/* Filtered Text */\\n.ui.active.search.dropdown input.search:focus + .text .icon[data-v-4030daa2],\\n.ui.active.search.dropdown input.search:focus + .text .flag[data-v-4030daa2] {\\n  opacity: 0.45;\\n}\\n.ui.active.search.dropdown input.search:focus + .text[data-v-4030daa2] {\\n  color: rgba(115, 115, 115, 0.87) !important;\\n}\\n\\n/* Search Menu */\\n.ui.search.dropdown .menu[data-v-4030daa2] {\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n  -webkit-backface-visibility: hidden;\\n          backface-visibility: hidden;\\n  -webkit-overflow-scrolling: touch;\\n}\\n@media only screen and (max-width: 767px) {\\n.ui.search.dropdown .menu[data-v-4030daa2] {\\n    max-height: 8.01428571rem;\\n}\\n}\\n@media only screen and (min-width: 768px) {\\n.ui.search.dropdown .menu[data-v-4030daa2] {\\n    max-height: 10.68571429rem;\\n}\\n}\\n@media only screen and (min-width: 992px) {\\n.ui.search.dropdown .menu[data-v-4030daa2] {\\n    max-height: 16.02857143rem;\\n}\\n}\\n@media only screen and (min-width: 1920px) {\\n.ui.search.dropdown .menu[data-v-4030daa2] {\\n    max-height: 21.37142857rem;\\n}\\n}\\n\\n/*--------------\\n    Multiple\\n---------------*/\\n\\n\\n/* Multiple Selection */\\n.ui.multiple.dropdown[data-v-4030daa2] {\\n  padding: 0.22620476em 2.1em 0.22620476em 0.35714286em;\\n}\\n.ui.multiple.dropdown .menu[data-v-4030daa2] {\\n  cursor: auto;\\n}\\n\\n/* Multiple Search Selection */\\n.ui.multiple.search.dropdown[data-v-4030daa2],\\n.ui.multiple.search.dropdown > input.search[data-v-4030daa2] {\\n  cursor: text;\\n}\\n\\n/* Selection Label */\\n.ui.multiple.dropdown > .label[data-v-4030daa2] {\\n  -webkit-user-select: none;\\n     -moz-user-select: none;\\n      -ms-user-select: none;\\n          user-select: none;\\n  display: inline-block;\\n  vertical-align: top;\\n  white-space: normal;\\n  font-size: 1em;\\n  padding: 0.35714286em 0.78571429em;\\n  margin: 0.14285714rem 0.28571429rem 0.14285714rem 0em;\\n  box-shadow: 0px 0px 0px 1px rgba(34, 36, 38, 0.15) inset;\\n}\\n\\n/* Dropdown Icon */\\n.ui.multiple.dropdown .dropdown.icon[data-v-4030daa2] {\\n  margin: '';\\n  padding: '';\\n}\\n\\n/* Text */\\n.ui.multiple.dropdown > .text[data-v-4030daa2] {\\n  position: static;\\n  padding: 0;\\n  max-width: 100%;\\n  margin: 0.45240952em 0em 0.45240952em 0.64285714em;\\n  line-height: 1.21428571em;\\n}\\n.ui.multiple.dropdown > .label ~ input.search[data-v-4030daa2] {\\n  margin-left: 0.14285714em !important;\\n}\\n.ui.multiple.dropdown > .label ~ .text[data-v-4030daa2] {\\n  display: none;\\n}\\n\\n/*-----------------\\n  Multiple Search\\n-----------------*/\\n\\n\\n/* Prompt Text */\\n.ui.multiple.search.dropdown > .text[data-v-4030daa2] {\\n  display: inline-block;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  padding: inherit;\\n  margin: 0.45240952em 0em 0.45240952em 0.64285714em;\\n  line-height: 1.21428571em;\\n}\\n.ui.multiple.search.dropdown > .label ~ .text[data-v-4030daa2] {\\n  display: none;\\n}\\n\\n/* Search */\\n.ui.multiple.search.dropdown > input.search[data-v-4030daa2] {\\n  position: static;\\n  padding: 0;\\n  max-width: 100%;\\n  margin: 0.45240952em 0em 0.45240952em 0.64285714em;\\n  width: 2.2em;\\n  line-height: 1.21428571em;\\n}\\n\\n/*--------------\\n     Inline\\n---------------*/\\n.ui.inline.dropdown[data-v-4030daa2] {\\n  cursor: pointer;\\n  display: inline-block;\\n  color: inherit;\\n}\\n.ui.inline.dropdown .dropdown.icon[data-v-4030daa2] {\\n  margin: 0em 0.5em 0em 0.21428571em;\\n  vertical-align: baseline;\\n}\\n.ui.inline.dropdown > .text[data-v-4030daa2] {\\n  font-weight: bold;\\n}\\n.ui.inline.dropdown .menu[data-v-4030daa2] {\\n  cursor: auto;\\n  margin-top: 0.21428571em;\\n  border-radius: 0.28571429rem;\\n}\\n\\n\\n/*******************************\\n            States\\n*******************************/\\n\\n\\n/*--------------------\\n        Active\\n----------------------*/\\n\\n\\n/* Menu Item Active */\\n.ui.dropdown .menu .active.item[data-v-4030daa2] {\\n  background: transparent;\\n  font-weight: bold;\\n  color: rgba(0, 0, 0, 0.95);\\n  box-shadow: none;\\n  z-index: 12;\\n}\\n\\n/*--------------------\\n        Hover\\n----------------------*/\\n\\n\\n/* Menu Item Hover */\\n.ui.dropdown .menu > .item[data-v-4030daa2]:hover {\\n  background: rgba(0, 0, 0, 0.05);\\n  color: rgba(0, 0, 0, 0.95);\\n  z-index: 13;\\n}\\n\\n/*--------------------\\n       Loading\\n---------------------*/\\n.ui.loading.dropdown > i.icon[data-v-4030daa2] {\\n  height: 1em !important;\\n  padding: 1.14285714em 1.07142857em !important;\\n}\\n.ui.loading.dropdown > i.icon[data-v-4030daa2]:before {\\n  position: absolute;\\n  content: '';\\n  top: 50%;\\n  left: 50%;\\n  margin: -0.64285714em 0em 0em -0.64285714em;\\n  width: 1.28571429em;\\n  height: 1.28571429em;\\n  border-radius: 500rem;\\n  border: 0.2em solid rgba(0, 0, 0, 0.1);\\n}\\n.ui.loading.dropdown > i.icon[data-v-4030daa2]:after {\\n  position: absolute;\\n  content: '';\\n  top: 50%;\\n  left: 50%;\\n  box-shadow: 0px 0px 0px 1px transparent;\\n  margin: -0.64285714em 0em 0em -0.64285714em;\\n  width: 1.28571429em;\\n  height: 1.28571429em;\\n  -webkit-animation: dropdown-spin 0.6s linear;\\n          animation: dropdown-spin 0.6s linear;\\n  -webkit-animation-iteration-count: infinite;\\n          animation-iteration-count: infinite;\\n  border-radius: 500rem;\\n  border-color: #767676 transparent transparent;\\n  border-style: solid;\\n  border-width: 0.2em;\\n}\\n\\n/* Coupling */\\n.ui.loading.dropdown.button > i.icon[data-v-4030daa2]:before,\\n.ui.loading.dropdown.button > i.icon[data-v-4030daa2]:after {\\n  display: none;\\n}\\n@-webkit-keyframes dropdown-spin {\\nfrom {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n}\\nto {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n}\\n}\\n@keyframes dropdown-spin {\\nfrom {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n}\\nto {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n}\\n}\\n\\n/*--------------------\\n     Default Text\\n----------------------*/\\n.ui.dropdown:not(.button) > .default.text[data-v-4030daa2],\\n.ui.default.dropdown:not(.button) > .text[data-v-4030daa2] {\\n  color: rgba(191, 191, 191, 0.87);\\n}\\n.ui.dropdown:not(.button) > input:focus + .default.text[data-v-4030daa2],\\n.ui.default.dropdown:not(.button) > input:focus + .text[data-v-4030daa2] {\\n  color: rgba(115, 115, 115, 0.87);\\n}\\n\\n/*--------------------\\n        Loading\\n----------------------*/\\n.ui.loading.dropdown > .text[data-v-4030daa2] {\\n  -webkit-transition: none;\\n  transition: none;\\n}\\n\\n/* Used To Check Position */\\n.ui.dropdown .loading.menu[data-v-4030daa2] {\\n  display: block;\\n  visibility: hidden;\\n  z-index: -1;\\n}\\n\\n/*--------------------\\n    Keyboard Select\\n----------------------*/\\n\\n\\n/* Selected Item */\\n.ui.dropdown.selected[data-v-4030daa2],\\n.ui.dropdown .menu .selected.item[data-v-4030daa2] {\\n  background: rgba(0, 0, 0, 0.03);\\n  color: rgba(0, 0, 0, 0.95);\\n}\\n\\n/*--------------------\\n    Search Filtered\\n----------------------*/\\n\\n\\n/* Filtered Item */\\n.ui.dropdown > .filtered.text[data-v-4030daa2] {\\n  visibility: hidden;\\n}\\n.ui.dropdown .filtered.item[data-v-4030daa2] {\\n  display: none !important;\\n}\\n\\n/*--------------------\\n        Error\\n----------------------*/\\n.ui.dropdown.error[data-v-4030daa2],\\n.ui.dropdown.error > .text[data-v-4030daa2],\\n.ui.dropdown.error > .default.text[data-v-4030daa2] {\\n  color: #9F3A38;\\n}\\n.ui.selection.dropdown.error[data-v-4030daa2] {\\n  background: #FFF6F6;\\n  border-color: #E0B4B4;\\n}\\n.ui.selection.dropdown.error[data-v-4030daa2]:hover {\\n  border-color: #E0B4B4;\\n}\\n.ui.dropdown.error > .menu[data-v-4030daa2],\\n.ui.dropdown.error > .menu .menu[data-v-4030daa2] {\\n  border-color: #E0B4B4;\\n}\\n.ui.dropdown.error > .menu > .item[data-v-4030daa2] {\\n  color: #9F3A38;\\n}\\n.ui.multiple.selection.error.dropdown > .label[data-v-4030daa2] {\\n  border-color: #E0B4B4;\\n}\\n\\n/* Item Hover */\\n.ui.dropdown.error > .menu > .item[data-v-4030daa2]:hover {\\n  background-color: #FFF2F2;\\n}\\n\\n/* Item Active */\\n.ui.dropdown.error > .menu .active.item[data-v-4030daa2] {\\n  background-color: #FDCFCF;\\n}\\n\\n/*--------------------\\n        Disabled\\n----------------------*/\\n\\n\\n/* Disabled */\\n.ui.disabled.dropdown[data-v-4030daa2],\\n.ui.dropdown .menu > .disabled.item[data-v-4030daa2] {\\n  cursor: default;\\n  pointer-events: none;\\n  opacity: 0.45;\\n}\\n\\n\\n/*******************************\\n           Variations\\n*******************************/\\n\\n\\n/*--------------\\n    Direction\\n---------------*/\\n\\n\\n/* Flyout Direction */\\n.ui.dropdown .menu[data-v-4030daa2] {\\n  left: 0px;\\n}\\n\\n/* Default Side (Right) */\\n.ui.dropdown .right.menu > .menu[data-v-4030daa2],\\n.ui.dropdown .menu .right.menu[data-v-4030daa2] {\\n  left: 100% !important;\\n  right: auto !important;\\n  border-radius: 0.28571429rem !important;\\n}\\n\\n/* Left Flyout Menu */\\n.ui.dropdown > .left.menu .menu[data-v-4030daa2],\\n.ui.dropdown .menu .left.menu[data-v-4030daa2] {\\n  left: auto !important;\\n  right: 100% !important;\\n  border-radius: 0.28571429rem !important;\\n}\\n.ui.dropdown .item .left.dropdown.icon[data-v-4030daa2],\\n.ui.dropdown .left.menu .item .dropdown.icon[data-v-4030daa2] {\\n  width: auto;\\n  float: left;\\n  margin: 0em 0.78571429rem 0em 0em;\\n}\\n.ui.dropdown .item .left.dropdown.icon[data-v-4030daa2],\\n.ui.dropdown .left.menu .item .dropdown.icon[data-v-4030daa2] {\\n  width: auto;\\n  float: left;\\n  margin: 0em 0.78571429rem 0em 0em;\\n}\\n.ui.dropdown .item .left.dropdown.icon + .text[data-v-4030daa2],\\n.ui.dropdown .left.menu .item .dropdown.icon + .text[data-v-4030daa2] {\\n  margin-left: 1em;\\n}\\n\\n/*--------------\\n     Upward\\n---------------*/\\n\\n\\n/* Upward Main Menu */\\n.ui.upward.dropdown > .menu[data-v-4030daa2] {\\n  top: auto;\\n  bottom: 100%;\\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.08);\\n  border-radius: 0.28571429rem 0.28571429rem 0em 0em;\\n}\\n\\n/* Upward Sub Menu */\\n.ui.dropdown .upward.menu[data-v-4030daa2] {\\n  top: auto !important;\\n  bottom: 0 !important;\\n}\\n\\n/* Active Upward */\\n.ui.simple.upward.active.dropdown[data-v-4030daa2],\\n.ui.simple.upward.dropdown[data-v-4030daa2]:hover {\\n  border-radius: 0.28571429rem 0.28571429rem 0em 0em !important;\\n}\\n.ui.upward.dropdown.button:not(.pointing):not(.floating).active[data-v-4030daa2] {\\n  border-radius: 0.28571429rem 0.28571429rem 0em 0em;\\n}\\n\\n/* Selection */\\n.ui.upward.selection.dropdown .menu[data-v-4030daa2] {\\n  border-top-width: 1px !important;\\n  border-bottom-width: 0px !important;\\n  box-shadow: 0px -2px 3px 0px rgba(0, 0, 0, 0.08);\\n}\\n.ui.upward.selection.dropdown[data-v-4030daa2]:hover {\\n  box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.05);\\n}\\n\\n/* Active Upward */\\n.ui.active.upward.selection.dropdown[data-v-4030daa2] {\\n  border-radius: 0em 0em 0.28571429rem 0.28571429rem !important;\\n}\\n\\n/* Visible Upward */\\n.ui.upward.selection.dropdown.visible[data-v-4030daa2] {\\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.08);\\n  border-radius: 0em 0em 0.28571429rem 0.28571429rem !important;\\n}\\n\\n/* Visible Hover Upward */\\n.ui.upward.active.selection.dropdown[data-v-4030daa2]:hover {\\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.05);\\n}\\n.ui.upward.active.selection.dropdown:hover .menu[data-v-4030daa2] {\\n  box-shadow: 0px -2px 3px 0px rgba(0, 0, 0, 0.08);\\n}\\n\\n/*--------------\\n     Simple\\n---------------*/\\n\\n\\n/*  Selection Menu */\\n.ui.scrolling.dropdown .menu[data-v-4030daa2],\\n.ui.dropdown .scrolling.menu[data-v-4030daa2] {\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n}\\n.ui.scrolling.dropdown .menu[data-v-4030daa2] {\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n  -webkit-backface-visibility: hidden;\\n          backface-visibility: hidden;\\n  -webkit-overflow-scrolling: touch;\\n  min-width: 100% !important;\\n  width: auto !important;\\n}\\n.ui.dropdown .scrolling.menu[data-v-4030daa2] {\\n  position: static;\\n  overflow-y: auto;\\n  border: none;\\n  box-shadow: none !important;\\n  border-radius: 0 !important;\\n  margin: 0 !important;\\n  min-width: 100% !important;\\n  width: auto !important;\\n  border-top: 1px solid rgba(34, 36, 38, 0.15);\\n}\\n.ui.scrolling.dropdown .menu .item.item.item[data-v-4030daa2],\\n.ui.dropdown .scrolling.menu > .item.item.item[data-v-4030daa2] {\\n  border-top: none;\\n  padding-right: calc( 1.14285714rem  +  17px ) !important;\\n}\\n.ui.scrolling.dropdown .menu .item[data-v-4030daa2]:first-child,\\n.ui.dropdown .scrolling.menu .item[data-v-4030daa2]:first-child {\\n  border-top: none;\\n}\\n.ui.dropdown > .animating.menu .scrolling.menu[data-v-4030daa2],\\n.ui.dropdown > .visible.menu .scrolling.menu[data-v-4030daa2] {\\n  display: block;\\n}\\n\\n/* Scrollbar in IE */\\n@media all and (-ms-high-contrast: none) {\\n.ui.scrolling.dropdown .menu[data-v-4030daa2],\\n  .ui.dropdown .scrolling.menu[data-v-4030daa2] {\\n    min-width: calc(100% -  17px );\\n}\\n}\\n@media only screen and (max-width: 767px) {\\n.ui.scrolling.dropdown .menu[data-v-4030daa2],\\n  .ui.dropdown .scrolling.menu[data-v-4030daa2] {\\n    max-height: 10.28571429rem;\\n}\\n}\\n@media only screen and (min-width: 768px) {\\n.ui.scrolling.dropdown .menu[data-v-4030daa2],\\n  .ui.dropdown .scrolling.menu[data-v-4030daa2] {\\n    max-height: 15.42857143rem;\\n}\\n}\\n@media only screen and (min-width: 992px) {\\n.ui.scrolling.dropdown .menu[data-v-4030daa2],\\n  .ui.dropdown .scrolling.menu[data-v-4030daa2] {\\n    max-height: 20.57142857rem;\\n}\\n}\\n@media only screen and (min-width: 1920px) {\\n.ui.scrolling.dropdown .menu[data-v-4030daa2],\\n  .ui.dropdown .scrolling.menu[data-v-4030daa2] {\\n    max-height: 20.57142857rem;\\n}\\n}\\n\\n/*--------------\\n     Simple\\n---------------*/\\n\\n\\n/* Displays without javascript */\\n.ui.simple.dropdown .menu[data-v-4030daa2]:before,\\n.ui.simple.dropdown .menu[data-v-4030daa2]:after {\\n  display: none;\\n}\\n.ui.simple.dropdown .menu[data-v-4030daa2] {\\n  position: absolute;\\n  display: block;\\n  overflow: hidden;\\n  top: -9999px !important;\\n  opacity: 0;\\n  width: 0;\\n  height: 0;\\n  -webkit-transition: opacity 0.1s ease;\\n  transition: opacity 0.1s ease;\\n}\\n.ui.simple.active.dropdown[data-v-4030daa2],\\n.ui.simple.dropdown[data-v-4030daa2]:hover {\\n  border-bottom-left-radius: 0em !important;\\n  border-bottom-right-radius: 0em !important;\\n}\\n.ui.simple.active.dropdown > .menu[data-v-4030daa2],\\n.ui.simple.dropdown:hover > .menu[data-v-4030daa2] {\\n  overflow: visible;\\n  width: auto;\\n  height: auto;\\n  top: 100% !important;\\n  opacity: 1;\\n}\\n.ui.simple.dropdown > .menu > .item:active > .menu[data-v-4030daa2],\\n.ui.simple.dropdown:hover > .menu > .item:hover > .menu[data-v-4030daa2] {\\n  overflow: visible;\\n  width: auto;\\n  height: auto;\\n  top: 0% !important;\\n  left: 100% !important;\\n  opacity: 1;\\n}\\n.ui.simple.disabled.dropdown:hover .menu[data-v-4030daa2] {\\n  display: none;\\n  height: 0px;\\n  width: 0px;\\n  overflow: hidden;\\n}\\n\\n/* Visible */\\n.ui.simple.visible.dropdown > .menu[data-v-4030daa2] {\\n  display: block;\\n}\\n\\n/*--------------\\n      Fluid\\n---------------*/\\n.ui.fluid.dropdown[data-v-4030daa2] {\\n  display: block;\\n  width: 100%;\\n  min-width: 0em;\\n}\\n.ui.fluid.dropdown > .dropdown.icon[data-v-4030daa2] {\\n  float: right;\\n}\\n\\n/*--------------\\n    Floating\\n---------------*/\\n.ui.floating.dropdown .menu[data-v-4030daa2] {\\n  left: 0;\\n  right: auto;\\n  box-shadow: 0px 2px 4px 0px rgba(34, 36, 38, 0.12), 0px 2px 10px 0px rgba(34, 36, 38, 0.15) !important;\\n  border-radius: 0.28571429rem !important;\\n}\\n.ui.floating.dropdown > .menu[data-v-4030daa2] {\\n  margin-top: 0.5em !important;\\n  border-radius: 0.28571429rem !important;\\n}\\n\\n/*--------------\\n     Pointing\\n---------------*/\\n.ui.pointing.dropdown > .menu[data-v-4030daa2] {\\n  top: 100%;\\n  margin-top: 0.78571429rem;\\n  border-radius: 0.28571429rem;\\n}\\n.ui.pointing.dropdown > .menu[data-v-4030daa2]:after {\\n  display: block;\\n  position: absolute;\\n  pointer-events: none;\\n  content: '';\\n  visibility: visible;\\n  -webkit-transform: rotate(45deg);\\n      -ms-transform: rotate(45deg);\\n          transform: rotate(45deg);\\n  width: 0.5em;\\n  height: 0.5em;\\n  box-shadow: -1px -1px 0px 1px rgba(34, 36, 38, 0.15);\\n  background: #FFFFFF;\\n  z-index: 2;\\n}\\n.ui.pointing.dropdown > .menu[data-v-4030daa2]:after {\\n  top: -0.25em;\\n  left: 50%;\\n  margin: 0em 0em 0em -0.25em;\\n}\\n\\n/* Top Left Pointing */\\n.ui.top.left.pointing.dropdown > .menu[data-v-4030daa2] {\\n  top: 100%;\\n  bottom: auto;\\n  left: 0%;\\n  right: auto;\\n  margin: 1em 0em 0em;\\n}\\n.ui.top.left.pointing.dropdown > .menu[data-v-4030daa2] {\\n  top: 100%;\\n  bottom: auto;\\n  left: 0%;\\n  right: auto;\\n  margin: 1em 0em 0em;\\n}\\n.ui.top.left.pointing.dropdown > .menu[data-v-4030daa2]:after {\\n  top: -0.25em;\\n  left: 1em;\\n  right: auto;\\n  margin: 0em;\\n  -webkit-transform: rotate(45deg);\\n      -ms-transform: rotate(45deg);\\n          transform: rotate(45deg);\\n}\\n\\n/* Top Right  Pointing */\\n.ui.top.right.pointing.dropdown > .menu[data-v-4030daa2] {\\n  top: 100%;\\n  bottom: auto;\\n  right: 0%;\\n  left: auto;\\n  margin: 1em 0em 0em;\\n}\\n.ui.top.right.pointing.dropdown > .menu[data-v-4030daa2]:after {\\n  top: -0.25em;\\n  left: auto;\\n  right: 1em;\\n  margin: 0em;\\n  -webkit-transform: rotate(45deg);\\n      -ms-transform: rotate(45deg);\\n          transform: rotate(45deg);\\n}\\n\\n/* Left Pointing */\\n.ui.left.pointing.dropdown > .menu[data-v-4030daa2] {\\n  top: 0%;\\n  left: 100%;\\n  right: auto;\\n  margin: 0em 0em 0em 1em;\\n}\\n.ui.left.pointing.dropdown > .menu[data-v-4030daa2]:after {\\n  top: 1em;\\n  left: -0.25em;\\n  margin: 0em 0em 0em 0em;\\n  -webkit-transform: rotate(-45deg);\\n      -ms-transform: rotate(-45deg);\\n          transform: rotate(-45deg);\\n}\\n\\n/* Right Pointing */\\n.ui.right.pointing.dropdown > .menu[data-v-4030daa2] {\\n  top: 0%;\\n  left: auto;\\n  right: 100%;\\n  margin: 0em 1em 0em 0em;\\n}\\n.ui.right.pointing.dropdown > .menu[data-v-4030daa2]:after {\\n  top: 1em;\\n  left: auto;\\n  right: -0.25em;\\n  margin: 0em 0em 0em 0em;\\n  -webkit-transform: rotate(135deg);\\n      -ms-transform: rotate(135deg);\\n          transform: rotate(135deg);\\n}\\n\\n/* Bottom Pointing */\\n.ui.bottom.pointing.dropdown > .menu[data-v-4030daa2] {\\n  top: auto;\\n  bottom: 100%;\\n  left: 0%;\\n  right: auto;\\n  margin: 0em 0em 1em;\\n}\\n.ui.bottom.pointing.dropdown > .menu[data-v-4030daa2]:after {\\n  top: auto;\\n  bottom: -0.25em;\\n  right: auto;\\n  margin: 0em;\\n  -webkit-transform: rotate(-135deg);\\n      -ms-transform: rotate(-135deg);\\n          transform: rotate(-135deg);\\n}\\n\\n/* Reverse Sub-Menu Direction */\\n.ui.bottom.pointing.dropdown > .menu .menu[data-v-4030daa2] {\\n  top: auto !important;\\n  bottom: 0px !important;\\n}\\n\\n/* Bottom Left */\\n.ui.bottom.left.pointing.dropdown > .menu[data-v-4030daa2] {\\n  left: 0%;\\n  right: auto;\\n}\\n.ui.bottom.left.pointing.dropdown > .menu[data-v-4030daa2]:after {\\n  left: 1em;\\n  right: auto;\\n}\\n\\n/* Bottom Right */\\n.ui.bottom.right.pointing.dropdown > .menu[data-v-4030daa2] {\\n  right: 0%;\\n  left: auto;\\n}\\n.ui.bottom.right.pointing.dropdown > .menu[data-v-4030daa2]:after {\\n  left: auto;\\n  right: 1em;\\n}\\n\\n/* Upward pointing */\\n.ui.upward.pointing.dropdown > .menu[data-v-4030daa2],\\n.ui.upward.top.pointing.dropdown > .menu[data-v-4030daa2] {\\n  top: auto;\\n  bottom: 100%;\\n  margin: 0em 0em 0.78571429rem;\\n  border-radius: 0.28571429rem;\\n}\\n.ui.upward.pointing.dropdown > .menu[data-v-4030daa2]:after,\\n.ui.upward.top.pointing.dropdown > .menu[data-v-4030daa2]:after {\\n  top: 100%;\\n  bottom: auto;\\n  box-shadow: 1px 1px 0px 1px rgba(34, 36, 38, 0.15);\\n  margin: -0.25em 0em 0em;\\n}\\n\\n\\n/*******************************\\n         Theme Overrides\\n*******************************/\\n\\n\\n/* Dropdown Carets */\\n@font-face {\\n  font-family: 'Dropdown';\\n  src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMggjB5AAAAC8AAAAYGNtYXAPfuIIAAABHAAAAExnYXNwAAAAEAAAAWgAAAAIZ2x5Zjo82LgAAAFwAAABVGhlYWQAQ88bAAACxAAAADZoaGVhAwcB6QAAAvwAAAAkaG10eAS4ABIAAAMgAAAAIGxvY2EBNgDeAAADQAAAABJtYXhwAAoAFgAAA1QAAAAgbmFtZVcZpu4AAAN0AAABRXBvc3QAAwAAAAAEvAAAACAAAwIAAZAABQAAAUwBZgAAAEcBTAFmAAAA9QAZAIQAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADw2gHg/+D/4AHgACAAAAABAAAAAAAAAAAAAAAgAAAAAAACAAAAAwAAABQAAwABAAAAFAAEADgAAAAKAAgAAgACAAEAIPDa//3//wAAAAAAIPDX//3//wAB/+MPLQADAAEAAAAAAAAAAAAAAAEAAf//AA8AAQAAAAAAAAAAAAIAADc5AQAAAAABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAIABJQElABMAABM0NzY3BTYXFhUUDwEGJwYvASY1AAUGBwEACAUGBoAFCAcGgAUBEgcGBQEBAQcECQYHfwYBAQZ/BwYAAQAAAG4BJQESABMAADc0PwE2MzIfARYVFAcGIyEiJyY1AAWABgcIBYAGBgUI/wAHBgWABwaABQWABgcHBgUFBgcAAAABABIASQC3AW4AEwAANzQ/ATYXNhcWHQEUBwYnBi8BJjUSBoAFCAcFBgYFBwgFgAbbBwZ/BwEBBwQJ/wgEBwEBB38GBgAAAAABAAAASQClAW4AEwAANxE0NzYzMh8BFhUUDwEGIyInJjUABQYHCAWABgaABQgHBgVbAQAIBQYGgAUIBwWABgYFBwAAAAEAAAABAADZuaKOXw889QALAgAAAAAA0ABHWAAAAADQAEdYAAAAAAElAW4AAAAIAAIAAAAAAAAAAQAAAeD/4AAAAgAAAAAAASUAAQAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAABAAAAASUAAAElAAAAtwASALcAAAAAAAAACgAUAB4AQgBkAIgAqgAAAAEAAAAIABQAAQAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAOAK4AAQAAAAAAAQAOAAAAAQAAAAAAAgAOAEcAAQAAAAAAAwAOACQAAQAAAAAABAAOAFUAAQAAAAAABQAWAA4AAQAAAAAABgAHADIAAQAAAAAACgA0AGMAAwABBAkAAQAOAAAAAwABBAkAAgAOAEcAAwABBAkAAwAOACQAAwABBAkABAAOAFUAAwABBAkABQAWAA4AAwABBAkABgAOADkAAwABBAkACgA0AGMAaQBjAG8AbQBvAG8AbgBWAGUAcgBzAGkAbwBuACAAMQAuADAAaQBjAG8AbQBvAG8Abmljb21vb24AaQBjAG8AbQBvAG8AbgBSAGUAZwB1AGwAYQByAGkAYwBvAG0AbwBvAG4ARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAYgB5ACAASQBjAG8ATQBvAG8AbgAuAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=) format('truetype'), url(data:application/font-woff;charset=utf-8;base64,d09GRk9UVE8AAAVwAAoAAAAABSgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABDRkYgAAAA9AAAAdkAAAHZLDXE/09TLzIAAALQAAAAYAAAAGAIIweQY21hcAAAAzAAAABMAAAATA9+4ghnYXNwAAADfAAAAAgAAAAIAAAAEGhlYWQAAAOEAAAANgAAADYAQ88baGhlYQAAA7wAAAAkAAAAJAMHAelobXR4AAAD4AAAACAAAAAgBLgAEm1heHAAAAQAAAAABgAAAAYACFAAbmFtZQAABAgAAAFFAAABRVcZpu5wb3N0AAAFUAAAACAAAAAgAAMAAAEABAQAAQEBCGljb21vb24AAQIAAQA6+BwC+BsD+BgEHgoAGVP/i4seCgAZU/+LiwwHi2v4lPh0BR0AAACIDx0AAACNER0AAAAJHQAAAdASAAkBAQgPERMWGyAlKmljb21vb25pY29tb29udTB1MXUyMHVGMEQ3dUYwRDh1RjBEOXVGMERBAAACAYkABgAIAgABAAQABwAKAA0AVgCfAOgBL/yUDvyUDvyUDvuUDvtvi/emFYuQjZCOjo+Pj42Qiwj3lIsFkIuQiY6Hj4iNhouGi4aJh4eHCPsU+xQFiIiGiYaLhouHjYeOCPsU9xQFiI+Jj4uQCA77b4v3FBWLkI2Pjo8I9xT3FAWPjo+NkIuQi5CJjogI9xT7FAWPh42Hi4aLhomHh4eIiIaJhosI+5SLBYaLh42HjoiPiY+LkAgO+92d928Vi5CNkI+OCPcU9xQFjo+QjZCLkIuPiY6Hj4iNhouGCIv7lAWLhomHh4iIh4eJhouGi4aNiI8I+xT3FAWHjomPi5AIDvvdi+YVi/eUBYuQjZCOjo+Pj42Qi5CLkImOhwj3FPsUBY+IjYaLhouGiYeHiAj7FPsUBYiHhomGi4aLh42Hj4iOiY+LkAgO+JQU+JQViwwKAAAAAAMCAAGQAAUAAAFMAWYAAABHAUwBZgAAAPUAGQCEAAAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAQAAA8NoB4P/g/+AB4AAgAAAAAQAAAAAAAAAAAAAAIAAAAAAAAgAAAAMAAAAUAAMAAQAAABQABAA4AAAACgAIAAIAAgABACDw2v/9//8AAAAAACDw1//9//8AAf/jDy0AAwABAAAAAAAAAAAAAAABAAH//wAPAAEAAAABAAA5emozXw889QALAgAAAAAA0ABHWAAAAADQAEdYAAAAAAElAW4AAAAIAAIAAAAAAAAAAQAAAeD/4AAAAgAAAAAAASUAAQAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAABAAAAASUAAAElAAAAtwASALcAAAAAUAAACAAAAAAADgCuAAEAAAAAAAEADgAAAAEAAAAAAAIADgBHAAEAAAAAAAMADgAkAAEAAAAAAAQADgBVAAEAAAAAAAUAFgAOAAEAAAAAAAYABwAyAAEAAAAAAAoANABjAAMAAQQJAAEADgAAAAMAAQQJAAIADgBHAAMAAQQJAAMADgAkAAMAAQQJAAQADgBVAAMAAQQJAAUAFgAOAAMAAQQJAAYADgA5AAMAAQQJAAoANABjAGkAYwBvAG0AbwBvAG4AVgBlAHIAcwBpAG8AbgAgADEALgAwAGkAYwBvAG0AbwBvAG5pY29tb29uAGkAYwBvAG0AbwBvAG4AUgBlAGcAdQBsAGEAcgBpAGMAbwBtAG8AbwBuAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAEkAYwBvAE0AbwBvAG4ALgAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) format('woff');\\n  font-weight: normal;\\n  font-style: normal;\\n}\\n.ui.dropdown > .dropdown.icon[data-v-4030daa2] {\\n  font-family: 'Dropdown';\\n  line-height: 1;\\n  height: 1em;\\n  width: 1.23em;\\n  -webkit-backface-visibility: hidden;\\n          backface-visibility: hidden;\\n  font-weight: normal;\\n  font-style: normal;\\n  text-align: center;\\n}\\n.ui.dropdown > .dropdown.icon[data-v-4030daa2] {\\n  width: auto;\\n}\\n.ui.dropdown > .dropdown.icon[data-v-4030daa2]:before {\\n  content: '\\\\F0D7';\\n}\\n\\n/* Sub Menu */\\n.ui.dropdown .menu .item .dropdown.icon[data-v-4030daa2]:before {\\n  content: '\\\\F0DA' ;\\n}\\n.ui.dropdown .item .left.dropdown.icon[data-v-4030daa2]:before,\\n.ui.dropdown .left.menu .item .dropdown.icon[data-v-4030daa2]:before {\\n  content: \\\"\\\\F0D9\\\" ;\\n}\\n\\n/* Vertical Menu Dropdown */\\n.ui.vertical.menu .dropdown.item > .dropdown.icon[data-v-4030daa2]:before {\\n  content: \\\"\\\\F0DA\\\" ;\\n}\\n/* Icons for Reference\\n.dropdown.down.icon {\\n  content: \\\"\\\\f0d7\\\";\\n}\\n.dropdown.up.icon {\\n  content: \\\"\\\\f0d8\\\";\\n}\\n.dropdown.left.icon {\\n  content: \\\"\\\\f0d9\\\";\\n}\\n.dropdown.icon.icon {\\n  content: \\\"\\\\f0da\\\";\\n}\\n*/\\n\\n\\n/*******************************\\n        User Overrides\\n*******************************/\\n\\n\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 94 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(4)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/* Menu Item Hover for Key event */\\n.ui.dropdown .menu > .item.current {\\n  background: rgba(0, 0, 0, 0.05);\\n}\\n\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 95 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(4)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"/*!\\n * # Semantic UI 2.2.3 - Dropdown\\n * http://github.com/semantic-org/semantic-ui/\\n *\\n *\\n * Released under the MIT license\\n * http://opensource.org/licenses/MIT\\n *\\n */\\n\\n\\n/*******************************\\n            Dropdown\\n*******************************/\\n.ui.dropdown[data-v-a3dbfc0c] {\\n  cursor: pointer;\\n  position: relative;\\n  display: inline-block;\\n  outline: none;\\n  text-align: left;\\n  -webkit-transition: box-shadow 0.1s ease, width 0.1s ease;\\n  transition: box-shadow 0.1s ease, width 0.1s ease;\\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\n}\\n\\n\\n/*******************************\\n            Content\\n*******************************/\\n\\n\\n/*--------------\\n      Menu\\n---------------*/\\n.ui.dropdown .menu[data-v-a3dbfc0c] {\\n  cursor: auto;\\n  position: absolute;\\n  display: none;\\n  outline: none;\\n  top: 100%;\\n  min-width: -webkit-max-content;\\n  min-width: -moz-max-content;\\n  min-width: max-content;\\n  margin: 0em;\\n  padding: 0em 0em;\\n  background: #FFFFFF;\\n  font-size: 1em;\\n  text-shadow: none;\\n  text-align: left;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n  border: 1px solid rgba(34, 36, 38, 0.15);\\n  border-radius: 0.28571429rem;\\n  -webkit-transition: opacity 0.1s ease;\\n  transition: opacity 0.1s ease;\\n  z-index: 11;\\n  will-change: transform, opacity;\\n}\\n.ui.dropdown .menu > *[data-v-a3dbfc0c] {\\n  white-space: nowrap;\\n}\\n\\n/*--------------\\n  Hidden Input\\n---------------*/\\n.ui.dropdown > input[data-v-a3dbfc0c]:not(.search):first-child,\\n.ui.dropdown > select[data-v-a3dbfc0c] {\\n  display: none !important;\\n}\\n\\n/*--------------\\n Dropdown Icon\\n---------------*/\\n.ui.dropdown > .dropdown.icon[data-v-a3dbfc0c] {\\n  position: relative;\\n  width: auto;\\n  font-size: 0.85714286em;\\n  margin: 0em 0em 0em 1em;\\n}\\n.ui.dropdown .menu > .item .dropdown.icon[data-v-a3dbfc0c] {\\n  width: auto;\\n  float: right;\\n  margin: 0em 0em 0em 1em;\\n}\\n.ui.dropdown .menu > .item .dropdown.icon + .text[data-v-a3dbfc0c] {\\n  margin-right: 1em;\\n}\\n\\n/*--------------\\n      Text\\n---------------*/\\n.ui.dropdown > .text[data-v-a3dbfc0c] {\\n  display: inline-block;\\n  -webkit-transition: none;\\n  transition: none;\\n}\\n\\n/*--------------\\n    Menu Item\\n---------------*/\\n.ui.dropdown .menu > .item[data-v-a3dbfc0c] {\\n  position: relative;\\n  cursor: pointer;\\n  display: block;\\n  border: none;\\n  height: auto;\\n  text-align: left;\\n  border-top: none;\\n  line-height: 1em;\\n  color: rgba(0, 0, 0, 0.87);\\n  padding: 0.78571429rem 1.14285714rem !important;\\n  font-size: 1rem;\\n  text-transform: none;\\n  font-weight: normal;\\n  box-shadow: none;\\n  -webkit-touch-callout: none;\\n}\\n.ui.dropdown .menu > .item[data-v-a3dbfc0c]:first-child {\\n  border-top-width: 0px;\\n}\\n\\n/*--------------\\n  Floated Content\\n---------------*/\\n.ui.dropdown > .text > [class*=\\\"right floated\\\"][data-v-a3dbfc0c],\\n.ui.dropdown .menu .item > [class*=\\\"right floated\\\"][data-v-a3dbfc0c] {\\n  float: right !important;\\n  margin-right: 0em !important;\\n  margin-left: 1em !important;\\n}\\n.ui.dropdown > .text > [class*=\\\"left floated\\\"][data-v-a3dbfc0c],\\n.ui.dropdown .menu .item > [class*=\\\"left floated\\\"][data-v-a3dbfc0c] {\\n  float: left !important;\\n  margin-left: 0em !important;\\n  margin-right: 1em !important;\\n}\\n.ui.dropdown .menu .item > .icon.floated[data-v-a3dbfc0c],\\n.ui.dropdown .menu .item > .flag.floated[data-v-a3dbfc0c],\\n.ui.dropdown .menu .item > .image.floated[data-v-a3dbfc0c],\\n.ui.dropdown .menu .item > img.floated[data-v-a3dbfc0c] {\\n  margin-top: 0em;\\n}\\n\\n/*--------------\\n  Menu Divider\\n---------------*/\\n.ui.dropdown .menu > .header[data-v-a3dbfc0c] {\\n  margin: 1rem 0rem 0.75rem;\\n  padding: 0em 1.14285714rem;\\n  color: rgba(0, 0, 0, 0.85);\\n  font-size: 0.78571429em;\\n  font-weight: bold;\\n  text-transform: uppercase;\\n}\\n.ui.dropdown .menu > .divider[data-v-a3dbfc0c] {\\n  border-top: 1px solid rgba(34, 36, 38, 0.1);\\n  height: 0em;\\n  margin: 0.5em 0em;\\n}\\n.ui.dropdown .menu > .input[data-v-a3dbfc0c] {\\n  width: auto;\\n  display: -webkit-box;\\n  display: -webkit-flex;\\n  display: -ms-flexbox;\\n  display: flex;\\n  margin: 1.14285714rem 0.78571429rem;\\n  min-width: 10rem;\\n}\\n.ui.dropdown .menu > .header + .input[data-v-a3dbfc0c] {\\n  margin-top: 0em;\\n}\\n.ui.dropdown .menu > .input:not(.transparent) input[data-v-a3dbfc0c] {\\n  padding: 0.5em 1em;\\n}\\n.ui.dropdown .menu > .input:not(.transparent) .button[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .input:not(.transparent) .icon[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .input:not(.transparent) .label[data-v-a3dbfc0c] {\\n  padding-top: 0.5em;\\n  padding-bottom: 0.5em;\\n}\\n\\n/*-----------------\\n  Item Description\\n-------------------*/\\n.ui.dropdown > .text > .description[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .item > .description[data-v-a3dbfc0c] {\\n  float: right;\\n  margin: 0em 0em 0em 1em;\\n  color: rgba(0, 0, 0, 0.4);\\n}\\n\\n/*-----------------\\n       Message\\n-------------------*/\\n.ui.dropdown .menu > .message[data-v-a3dbfc0c] {\\n  padding: 0.78571429rem 1.14285714rem;\\n  font-weight: normal;\\n}\\n.ui.dropdown .menu > .message[data-v-a3dbfc0c]:not(.ui) {\\n  color: rgba(0, 0, 0, 0.4);\\n}\\n\\n/*--------------\\n    Sub Menu\\n---------------*/\\n.ui.dropdown .menu .menu[data-v-a3dbfc0c] {\\n  top: 0% !important;\\n  left: 100% !important;\\n  right: auto !important;\\n  margin: 0em 0em 0em -0.5em !important;\\n  border-radius: 0.28571429rem !important;\\n  z-index: 21 !important;\\n}\\n\\n/* Hide Arrow */\\n.ui.dropdown .menu .menu[data-v-a3dbfc0c]:after {\\n  display: none;\\n}\\n\\n/*--------------\\n   Sub Elements\\n---------------*/\\n\\n\\n/* Icons / Flags / Labels / Image */\\n.ui.dropdown > .text > .icon[data-v-a3dbfc0c],\\n.ui.dropdown > .text > .label[data-v-a3dbfc0c],\\n.ui.dropdown > .text > .flag[data-v-a3dbfc0c],\\n.ui.dropdown > .text > img[data-v-a3dbfc0c],\\n.ui.dropdown > .text > .image[data-v-a3dbfc0c] {\\n  margin-top: 0em;\\n}\\n.ui.dropdown .menu > .item > .icon[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .item > .label[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .item > .flag[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .item > .image[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .item > img[data-v-a3dbfc0c] {\\n  margin-top: 0em;\\n}\\n.ui.dropdown > .text > .icon[data-v-a3dbfc0c],\\n.ui.dropdown > .text > .label[data-v-a3dbfc0c],\\n.ui.dropdown > .text > .flag[data-v-a3dbfc0c],\\n.ui.dropdown > .text > img[data-v-a3dbfc0c],\\n.ui.dropdown > .text > .image[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .item > .icon[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .item > .label[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .item > .flag[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .item > .image[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .item > img[data-v-a3dbfc0c] {\\n  margin-left: 0em;\\n  float: none;\\n  margin-right: 0.78571429rem;\\n}\\n\\n/*--------------\\n     Image\\n---------------*/\\n.ui.dropdown > .text > img[data-v-a3dbfc0c],\\n.ui.dropdown > .text > .image[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .item > .image[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .item > img[data-v-a3dbfc0c] {\\n  display: inline-block;\\n  vertical-align: middle;\\n  width: auto;\\n  max-height: 2em;\\n}\\n\\n\\n/*******************************\\n            Coupling\\n*******************************/\\n\\n\\n/*--------------\\n      Menu\\n---------------*/\\n\\n\\n/* Remove Menu Item Divider */\\n.ui.dropdown .ui.menu > .item[data-v-a3dbfc0c]:before,\\n.ui.menu .ui.dropdown .menu > .item[data-v-a3dbfc0c]:before {\\n  display: none;\\n}\\n\\n/* Prevent Menu Item Border */\\n.ui.menu .ui.dropdown .menu .active.item[data-v-a3dbfc0c] {\\n  border-left: none;\\n}\\n\\n/* Automatically float dropdown menu right on last menu item */\\n.ui.menu .right.menu .dropdown:last-child .menu[data-v-a3dbfc0c],\\n.ui.menu .right.dropdown.item .menu[data-v-a3dbfc0c],\\n.ui.buttons > .ui.dropdown:last-child .menu[data-v-a3dbfc0c] {\\n  left: auto;\\n  right: 0em;\\n}\\n\\n/*--------------\\n      Label\\n---------------*/\\n\\n\\n/* Dropdown Menu */\\n.ui.label.dropdown .menu[data-v-a3dbfc0c] {\\n  min-width: 100%;\\n}\\n\\n/*--------------\\n     Button\\n---------------*/\\n\\n\\n/* No Margin On Icon Button */\\n.ui.dropdown.icon.button > .dropdown.icon[data-v-a3dbfc0c] {\\n  margin: 0em;\\n}\\n.ui.button.dropdown .menu[data-v-a3dbfc0c] {\\n  min-width: 100%;\\n}\\n\\n\\n/*******************************\\n              Types\\n*******************************/\\n\\n\\n/*--------------\\n    Selection\\n---------------*/\\n\\n\\n/* Displays like a select box */\\n.ui.selection.dropdown[data-v-a3dbfc0c] {\\n  cursor: pointer;\\n  word-wrap: break-word;\\n  line-height: 1em;\\n  white-space: normal;\\n  outline: 0;\\n  -webkit-transform: rotateZ(0deg);\\n      -ms-transform: rotate(0deg);\\n          transform: rotateZ(0deg);\\n  min-width: 14em;\\n  min-height: 2.7142em;\\n  background: #FFFFFF;\\n  display: inline-block;\\n  padding: 0.78571429em 2.1em 0.78571429em 1em;\\n  color: rgba(0, 0, 0, 0.87);\\n  box-shadow: none;\\n  border: 1px solid rgba(34, 36, 38, 0.15);\\n  border-radius: 0.28571429rem;\\n  -webkit-transition: box-shadow 0.1s ease, width 0.1s ease;\\n  transition: box-shadow 0.1s ease, width 0.1s ease;\\n}\\n.ui.selection.dropdown.visible[data-v-a3dbfc0c],\\n.ui.selection.dropdown.active[data-v-a3dbfc0c] {\\n  z-index: 10;\\n}\\nselect.ui.dropdown[data-v-a3dbfc0c] {\\n  height: 38px;\\n  padding: 0.5em;\\n  border: 1px solid rgba(34, 36, 38, 0.15);\\n  visibility: visible;\\n}\\n.ui.selection.dropdown > .search.icon[data-v-a3dbfc0c],\\n.ui.selection.dropdown > .delete.icon[data-v-a3dbfc0c],\\n.ui.selection.dropdown > .dropdown.icon[data-v-a3dbfc0c] {\\n  cursor: pointer;\\n  position: absolute;\\n  width: auto;\\n  height: auto;\\n  line-height: 1.2142em;\\n  top: 0.78571429em;\\n  right: 1em;\\n  z-index: 3;\\n  margin: -0.78571429em;\\n  padding: 0.78571429em;\\n  opacity: 0.8;\\n  -webkit-transition: opacity 0.1s ease;\\n  transition: opacity 0.1s ease;\\n}\\n\\n/* Compact */\\n.ui.compact.selection.dropdown[data-v-a3dbfc0c] {\\n  min-width: 0px;\\n}\\n\\n/*  Selection Menu */\\n.ui.selection.dropdown .menu[data-v-a3dbfc0c] {\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n  -webkit-backface-visibility: hidden;\\n          backface-visibility: hidden;\\n  -webkit-overflow-scrolling: touch;\\n  border-top-width: 0px !important;\\n  width: auto;\\n  outline: none;\\n  margin: 0px -1px;\\n  min-width: calc(100% +  2px );\\n  width: calc(100% +  2px );\\n  border-radius: 0em 0em 0.28571429rem 0.28571429rem;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n  -webkit-transition: opacity 0.1s ease;\\n  transition: opacity 0.1s ease;\\n}\\n.ui.selection.dropdown .menu[data-v-a3dbfc0c]:after,\\n.ui.selection.dropdown .menu[data-v-a3dbfc0c]:before {\\n  display: none;\\n}\\n\\n/*--------------\\n    Message\\n---------------*/\\n.ui.selection.dropdown .menu > .message[data-v-a3dbfc0c] {\\n  padding: 0.78571429rem 1.14285714rem;\\n}\\n@media only screen and (max-width: 767px) {\\n.ui.selection.dropdown .menu[data-v-a3dbfc0c] {\\n    max-height: 8.01428571rem;\\n}\\n}\\n@media only screen and (min-width: 768px) {\\n.ui.selection.dropdown .menu[data-v-a3dbfc0c] {\\n    max-height: 10.68571429rem;\\n}\\n}\\n@media only screen and (min-width: 992px) {\\n.ui.selection.dropdown .menu[data-v-a3dbfc0c] {\\n    max-height: 16.02857143rem;\\n}\\n}\\n@media only screen and (min-width: 1920px) {\\n.ui.selection.dropdown .menu[data-v-a3dbfc0c] {\\n    max-height: 21.37142857rem;\\n}\\n}\\n\\n/* Menu Item */\\n.ui.selection.dropdown .menu > .item[data-v-a3dbfc0c] {\\n  border-top: 1px solid #FAFAFA;\\n  padding: 0.78571429rem 1.14285714rem !important;\\n  white-space: normal;\\n  word-wrap: normal;\\n}\\n\\n/* User Item */\\n.ui.selection.dropdown .menu > .hidden.addition.item[data-v-a3dbfc0c] {\\n  display: none;\\n}\\n\\n/* Hover */\\n.ui.selection.dropdown[data-v-a3dbfc0c]:hover {\\n  border-color: rgba(34, 36, 38, 0.35);\\n  box-shadow: none;\\n}\\n\\n/* Active */\\n.ui.selection.active.dropdown[data-v-a3dbfc0c] {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n.ui.selection.active.dropdown .menu[data-v-a3dbfc0c] {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n\\n/* Focus */\\n.ui.selection.dropdown[data-v-a3dbfc0c]:focus {\\n  border-color: #96C8DA;\\n  box-shadow: none;\\n}\\n.ui.selection.dropdown:focus .menu[data-v-a3dbfc0c] {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n\\n/* Visible */\\n.ui.selection.visible.dropdown > .text[data-v-a3dbfc0c]:not(.default) {\\n  font-weight: normal;\\n  color: rgba(0, 0, 0, 0.8);\\n}\\n\\n/* Visible Hover */\\n.ui.selection.active.dropdown[data-v-a3dbfc0c]:hover {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n.ui.selection.active.dropdown:hover .menu[data-v-a3dbfc0c] {\\n  border-color: #96C8DA;\\n  box-shadow: 0px 2px 3px 0px rgba(34, 36, 38, 0.15);\\n}\\n\\n/* Dropdown Icon */\\n.ui.active.selection.dropdown > .dropdown.icon[data-v-a3dbfc0c],\\n.ui.visible.selection.dropdown > .dropdown.icon[data-v-a3dbfc0c] {\\n  opacity: 1;\\n  z-index: 3;\\n}\\n\\n/* Connecting Border */\\n.ui.active.selection.dropdown[data-v-a3dbfc0c] {\\n  border-bottom-left-radius: 0em !important;\\n  border-bottom-right-radius: 0em !important;\\n}\\n\\n/* Empty Connecting Border */\\n.ui.active.empty.selection.dropdown[data-v-a3dbfc0c] {\\n  border-radius: 0.28571429rem !important;\\n  box-shadow: none !important;\\n}\\n.ui.active.empty.selection.dropdown .menu[data-v-a3dbfc0c] {\\n  border: none !important;\\n  box-shadow: none !important;\\n}\\n\\n/*--------------\\n   Searchable\\n---------------*/\\n\\n\\n/* Search Selection */\\n.ui.search.dropdown[data-v-a3dbfc0c] {\\n  min-width: '';\\n}\\n\\n/* Search Dropdown */\\n.ui.search.dropdown > input.search[data-v-a3dbfc0c] {\\n  background: none transparent !important;\\n  border: none !important;\\n  box-shadow: none !important;\\n  cursor: text;\\n  top: 0em;\\n  left: 1px;\\n  width: 100%;\\n  outline: none;\\n  -webkit-tap-highlight-color: rgba(255, 255, 255, 0);\\n  padding: inherit;\\n}\\n\\n/* Text Layering */\\n.ui.search.dropdown > input.search[data-v-a3dbfc0c] {\\n  position: absolute;\\n  z-index: 2;\\n}\\n.ui.search.dropdown > .text[data-v-a3dbfc0c] {\\n  cursor: text;\\n  position: relative;\\n  left: 1px;\\n  z-index: 3;\\n}\\n\\n/* Search Selection */\\n.ui.search.selection.dropdown > input.search[data-v-a3dbfc0c] {\\n  line-height: 1.2142em;\\n  padding: 0.67861429em 2.1em 0.67861429em 1em;\\n}\\n\\n/* Used to size multi select input to character width */\\n.ui.search.selection.dropdown > span.sizer[data-v-a3dbfc0c] {\\n  line-height: 1.2142em;\\n  padding: 0.67861429em 2.1em 0.67861429em 1em;\\n  display: none;\\n  white-space: pre;\\n}\\n\\n/* Active/Visible Search */\\n.ui.search.dropdown.active > input.search[data-v-a3dbfc0c],\\n.ui.search.dropdown.visible > input.search[data-v-a3dbfc0c] {\\n  cursor: auto;\\n}\\n.ui.search.dropdown.active > .text[data-v-a3dbfc0c],\\n.ui.search.dropdown.visible > .text[data-v-a3dbfc0c] {\\n  pointer-events: none;\\n}\\n\\n/* Filtered Text */\\n.ui.active.search.dropdown input.search:focus + .text .icon[data-v-a3dbfc0c],\\n.ui.active.search.dropdown input.search:focus + .text .flag[data-v-a3dbfc0c] {\\n  opacity: 0.45;\\n}\\n.ui.active.search.dropdown input.search:focus + .text[data-v-a3dbfc0c] {\\n  color: rgba(115, 115, 115, 0.87) !important;\\n}\\n\\n/* Search Menu */\\n.ui.search.dropdown .menu[data-v-a3dbfc0c] {\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n  -webkit-backface-visibility: hidden;\\n          backface-visibility: hidden;\\n  -webkit-overflow-scrolling: touch;\\n}\\n@media only screen and (max-width: 767px) {\\n.ui.search.dropdown .menu[data-v-a3dbfc0c] {\\n    max-height: 8.01428571rem;\\n}\\n}\\n@media only screen and (min-width: 768px) {\\n.ui.search.dropdown .menu[data-v-a3dbfc0c] {\\n    max-height: 10.68571429rem;\\n}\\n}\\n@media only screen and (min-width: 992px) {\\n.ui.search.dropdown .menu[data-v-a3dbfc0c] {\\n    max-height: 16.02857143rem;\\n}\\n}\\n@media only screen and (min-width: 1920px) {\\n.ui.search.dropdown .menu[data-v-a3dbfc0c] {\\n    max-height: 21.37142857rem;\\n}\\n}\\n\\n/*--------------\\n    Multiple\\n---------------*/\\n\\n\\n/* Multiple Selection */\\n.ui.multiple.dropdown[data-v-a3dbfc0c] {\\n  padding: 0.22620476em 2.1em 0.22620476em 0.35714286em;\\n}\\n.ui.multiple.dropdown .menu[data-v-a3dbfc0c] {\\n  cursor: auto;\\n}\\n\\n/* Multiple Search Selection */\\n.ui.multiple.search.dropdown[data-v-a3dbfc0c],\\n.ui.multiple.search.dropdown > input.search[data-v-a3dbfc0c] {\\n  cursor: text;\\n}\\n\\n/* Selection Label */\\n.ui.multiple.dropdown > .label[data-v-a3dbfc0c] {\\n  -webkit-user-select: none;\\n     -moz-user-select: none;\\n      -ms-user-select: none;\\n          user-select: none;\\n  display: inline-block;\\n  vertical-align: top;\\n  white-space: normal;\\n  font-size: 1em;\\n  padding: 0.35714286em 0.78571429em;\\n  margin: 0.14285714rem 0.28571429rem 0.14285714rem 0em;\\n  box-shadow: 0px 0px 0px 1px rgba(34, 36, 38, 0.15) inset;\\n}\\n\\n/* Dropdown Icon */\\n.ui.multiple.dropdown .dropdown.icon[data-v-a3dbfc0c] {\\n  margin: '';\\n  padding: '';\\n}\\n\\n/* Text */\\n.ui.multiple.dropdown > .text[data-v-a3dbfc0c] {\\n  position: static;\\n  padding: 0;\\n  max-width: 100%;\\n  margin: 0.45240952em 0em 0.45240952em 0.64285714em;\\n  line-height: 1.21428571em;\\n}\\n.ui.multiple.dropdown > .label ~ input.search[data-v-a3dbfc0c] {\\n  margin-left: 0.14285714em !important;\\n}\\n.ui.multiple.dropdown > .label ~ .text[data-v-a3dbfc0c] {\\n  display: none;\\n}\\n\\n/*-----------------\\n  Multiple Search\\n-----------------*/\\n\\n\\n/* Prompt Text */\\n.ui.multiple.search.dropdown > .text[data-v-a3dbfc0c] {\\n  display: inline-block;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  padding: inherit;\\n  margin: 0.45240952em 0em 0.45240952em 0.64285714em;\\n  line-height: 1.21428571em;\\n}\\n.ui.multiple.search.dropdown > .label ~ .text[data-v-a3dbfc0c] {\\n  display: none;\\n}\\n\\n/* Search */\\n.ui.multiple.search.dropdown > input.search[data-v-a3dbfc0c] {\\n  position: static;\\n  padding: 0;\\n  max-width: 100%;\\n  margin: 0.45240952em 0em 0.45240952em 0.64285714em;\\n  width: 2.2em;\\n  line-height: 1.21428571em;\\n}\\n\\n/*--------------\\n     Inline\\n---------------*/\\n.ui.inline.dropdown[data-v-a3dbfc0c] {\\n  cursor: pointer;\\n  display: inline-block;\\n  color: inherit;\\n}\\n.ui.inline.dropdown .dropdown.icon[data-v-a3dbfc0c] {\\n  margin: 0em 0.5em 0em 0.21428571em;\\n  vertical-align: baseline;\\n}\\n.ui.inline.dropdown > .text[data-v-a3dbfc0c] {\\n  font-weight: bold;\\n}\\n.ui.inline.dropdown .menu[data-v-a3dbfc0c] {\\n  cursor: auto;\\n  margin-top: 0.21428571em;\\n  border-radius: 0.28571429rem;\\n}\\n\\n\\n/*******************************\\n            States\\n*******************************/\\n\\n\\n/*--------------------\\n        Active\\n----------------------*/\\n\\n\\n/* Menu Item Active */\\n.ui.dropdown .menu .active.item[data-v-a3dbfc0c] {\\n  background: transparent;\\n  font-weight: bold;\\n  color: rgba(0, 0, 0, 0.95);\\n  box-shadow: none;\\n  z-index: 12;\\n}\\n\\n/*--------------------\\n        Hover\\n----------------------*/\\n\\n\\n/* Menu Item Hover */\\n.ui.dropdown .menu > .item[data-v-a3dbfc0c]:hover {\\n  background: rgba(0, 0, 0, 0.05);\\n  color: rgba(0, 0, 0, 0.95);\\n  z-index: 13;\\n}\\n\\n/*--------------------\\n       Loading\\n---------------------*/\\n.ui.loading.dropdown > i.icon[data-v-a3dbfc0c] {\\n  height: 1em !important;\\n  padding: 1.14285714em 1.07142857em !important;\\n}\\n.ui.loading.dropdown > i.icon[data-v-a3dbfc0c]:before {\\n  position: absolute;\\n  content: '';\\n  top: 50%;\\n  left: 50%;\\n  margin: -0.64285714em 0em 0em -0.64285714em;\\n  width: 1.28571429em;\\n  height: 1.28571429em;\\n  border-radius: 500rem;\\n  border: 0.2em solid rgba(0, 0, 0, 0.1);\\n}\\n.ui.loading.dropdown > i.icon[data-v-a3dbfc0c]:after {\\n  position: absolute;\\n  content: '';\\n  top: 50%;\\n  left: 50%;\\n  box-shadow: 0px 0px 0px 1px transparent;\\n  margin: -0.64285714em 0em 0em -0.64285714em;\\n  width: 1.28571429em;\\n  height: 1.28571429em;\\n  -webkit-animation: dropdown-spin 0.6s linear;\\n          animation: dropdown-spin 0.6s linear;\\n  -webkit-animation-iteration-count: infinite;\\n          animation-iteration-count: infinite;\\n  border-radius: 500rem;\\n  border-color: #767676 transparent transparent;\\n  border-style: solid;\\n  border-width: 0.2em;\\n}\\n\\n/* Coupling */\\n.ui.loading.dropdown.button > i.icon[data-v-a3dbfc0c]:before,\\n.ui.loading.dropdown.button > i.icon[data-v-a3dbfc0c]:after {\\n  display: none;\\n}\\n@-webkit-keyframes dropdown-spin {\\nfrom {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n}\\nto {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n}\\n}\\n@keyframes dropdown-spin {\\nfrom {\\n    -webkit-transform: rotate(0deg);\\n            transform: rotate(0deg);\\n}\\nto {\\n    -webkit-transform: rotate(360deg);\\n            transform: rotate(360deg);\\n}\\n}\\n\\n/*--------------------\\n     Default Text\\n----------------------*/\\n.ui.dropdown:not(.button) > .default.text[data-v-a3dbfc0c],\\n.ui.default.dropdown:not(.button) > .text[data-v-a3dbfc0c] {\\n  color: rgba(191, 191, 191, 0.87);\\n}\\n.ui.dropdown:not(.button) > input:focus + .default.text[data-v-a3dbfc0c],\\n.ui.default.dropdown:not(.button) > input:focus + .text[data-v-a3dbfc0c] {\\n  color: rgba(115, 115, 115, 0.87);\\n}\\n\\n/*--------------------\\n        Loading\\n----------------------*/\\n.ui.loading.dropdown > .text[data-v-a3dbfc0c] {\\n  -webkit-transition: none;\\n  transition: none;\\n}\\n\\n/* Used To Check Position */\\n.ui.dropdown .loading.menu[data-v-a3dbfc0c] {\\n  display: block;\\n  visibility: hidden;\\n  z-index: -1;\\n}\\n\\n/*--------------------\\n    Keyboard Select\\n----------------------*/\\n\\n\\n/* Selected Item */\\n.ui.dropdown.selected[data-v-a3dbfc0c],\\n.ui.dropdown .menu .selected.item[data-v-a3dbfc0c] {\\n  background: rgba(0, 0, 0, 0.03);\\n  color: rgba(0, 0, 0, 0.95);\\n}\\n\\n/*--------------------\\n    Search Filtered\\n----------------------*/\\n\\n\\n/* Filtered Item */\\n.ui.dropdown > .filtered.text[data-v-a3dbfc0c] {\\n  visibility: hidden;\\n}\\n.ui.dropdown .filtered.item[data-v-a3dbfc0c] {\\n  display: none !important;\\n}\\n\\n/*--------------------\\n        Error\\n----------------------*/\\n.ui.dropdown.error[data-v-a3dbfc0c],\\n.ui.dropdown.error > .text[data-v-a3dbfc0c],\\n.ui.dropdown.error > .default.text[data-v-a3dbfc0c] {\\n  color: #9F3A38;\\n}\\n.ui.selection.dropdown.error[data-v-a3dbfc0c] {\\n  background: #FFF6F6;\\n  border-color: #E0B4B4;\\n}\\n.ui.selection.dropdown.error[data-v-a3dbfc0c]:hover {\\n  border-color: #E0B4B4;\\n}\\n.ui.dropdown.error > .menu[data-v-a3dbfc0c],\\n.ui.dropdown.error > .menu .menu[data-v-a3dbfc0c] {\\n  border-color: #E0B4B4;\\n}\\n.ui.dropdown.error > .menu > .item[data-v-a3dbfc0c] {\\n  color: #9F3A38;\\n}\\n.ui.multiple.selection.error.dropdown > .label[data-v-a3dbfc0c] {\\n  border-color: #E0B4B4;\\n}\\n\\n/* Item Hover */\\n.ui.dropdown.error > .menu > .item[data-v-a3dbfc0c]:hover {\\n  background-color: #FFF2F2;\\n}\\n\\n/* Item Active */\\n.ui.dropdown.error > .menu .active.item[data-v-a3dbfc0c] {\\n  background-color: #FDCFCF;\\n}\\n\\n/*--------------------\\n        Disabled\\n----------------------*/\\n\\n\\n/* Disabled */\\n.ui.disabled.dropdown[data-v-a3dbfc0c],\\n.ui.dropdown .menu > .disabled.item[data-v-a3dbfc0c] {\\n  cursor: default;\\n  pointer-events: none;\\n  opacity: 0.45;\\n}\\n\\n\\n/*******************************\\n           Variations\\n*******************************/\\n\\n\\n/*--------------\\n    Direction\\n---------------*/\\n\\n\\n/* Flyout Direction */\\n.ui.dropdown .menu[data-v-a3dbfc0c] {\\n  left: 0px;\\n}\\n\\n/* Default Side (Right) */\\n.ui.dropdown .right.menu > .menu[data-v-a3dbfc0c],\\n.ui.dropdown .menu .right.menu[data-v-a3dbfc0c] {\\n  left: 100% !important;\\n  right: auto !important;\\n  border-radius: 0.28571429rem !important;\\n}\\n\\n/* Left Flyout Menu */\\n.ui.dropdown > .left.menu .menu[data-v-a3dbfc0c],\\n.ui.dropdown .menu .left.menu[data-v-a3dbfc0c] {\\n  left: auto !important;\\n  right: 100% !important;\\n  border-radius: 0.28571429rem !important;\\n}\\n.ui.dropdown .item .left.dropdown.icon[data-v-a3dbfc0c],\\n.ui.dropdown .left.menu .item .dropdown.icon[data-v-a3dbfc0c] {\\n  width: auto;\\n  float: left;\\n  margin: 0em 0.78571429rem 0em 0em;\\n}\\n.ui.dropdown .item .left.dropdown.icon[data-v-a3dbfc0c],\\n.ui.dropdown .left.menu .item .dropdown.icon[data-v-a3dbfc0c] {\\n  width: auto;\\n  float: left;\\n  margin: 0em 0.78571429rem 0em 0em;\\n}\\n.ui.dropdown .item .left.dropdown.icon + .text[data-v-a3dbfc0c],\\n.ui.dropdown .left.menu .item .dropdown.icon + .text[data-v-a3dbfc0c] {\\n  margin-left: 1em;\\n}\\n\\n/*--------------\\n     Upward\\n---------------*/\\n\\n\\n/* Upward Main Menu */\\n.ui.upward.dropdown > .menu[data-v-a3dbfc0c] {\\n  top: auto;\\n  bottom: 100%;\\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.08);\\n  border-radius: 0.28571429rem 0.28571429rem 0em 0em;\\n}\\n\\n/* Upward Sub Menu */\\n.ui.dropdown .upward.menu[data-v-a3dbfc0c] {\\n  top: auto !important;\\n  bottom: 0 !important;\\n}\\n\\n/* Active Upward */\\n.ui.simple.upward.active.dropdown[data-v-a3dbfc0c],\\n.ui.simple.upward.dropdown[data-v-a3dbfc0c]:hover {\\n  border-radius: 0.28571429rem 0.28571429rem 0em 0em !important;\\n}\\n.ui.upward.dropdown.button:not(.pointing):not(.floating).active[data-v-a3dbfc0c] {\\n  border-radius: 0.28571429rem 0.28571429rem 0em 0em;\\n}\\n\\n/* Selection */\\n.ui.upward.selection.dropdown .menu[data-v-a3dbfc0c] {\\n  border-top-width: 1px !important;\\n  border-bottom-width: 0px !important;\\n  box-shadow: 0px -2px 3px 0px rgba(0, 0, 0, 0.08);\\n}\\n.ui.upward.selection.dropdown[data-v-a3dbfc0c]:hover {\\n  box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.05);\\n}\\n\\n/* Active Upward */\\n.ui.active.upward.selection.dropdown[data-v-a3dbfc0c] {\\n  border-radius: 0em 0em 0.28571429rem 0.28571429rem !important;\\n}\\n\\n/* Visible Upward */\\n.ui.upward.selection.dropdown.visible[data-v-a3dbfc0c] {\\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.08);\\n  border-radius: 0em 0em 0.28571429rem 0.28571429rem !important;\\n}\\n\\n/* Visible Hover Upward */\\n.ui.upward.active.selection.dropdown[data-v-a3dbfc0c]:hover {\\n  box-shadow: 0px 0px 3px 0px rgba(0, 0, 0, 0.05);\\n}\\n.ui.upward.active.selection.dropdown:hover .menu[data-v-a3dbfc0c] {\\n  box-shadow: 0px -2px 3px 0px rgba(0, 0, 0, 0.08);\\n}\\n\\n/*--------------\\n     Simple\\n---------------*/\\n\\n\\n/*  Selection Menu */\\n.ui.scrolling.dropdown .menu[data-v-a3dbfc0c],\\n.ui.dropdown .scrolling.menu[data-v-a3dbfc0c] {\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n}\\n.ui.scrolling.dropdown .menu[data-v-a3dbfc0c] {\\n  overflow-x: hidden;\\n  overflow-y: auto;\\n  -webkit-backface-visibility: hidden;\\n          backface-visibility: hidden;\\n  -webkit-overflow-scrolling: touch;\\n  min-width: 100% !important;\\n  width: auto !important;\\n}\\n.ui.dropdown .scrolling.menu[data-v-a3dbfc0c] {\\n  position: static;\\n  overflow-y: auto;\\n  border: none;\\n  box-shadow: none !important;\\n  border-radius: 0 !important;\\n  margin: 0 !important;\\n  min-width: 100% !important;\\n  width: auto !important;\\n  border-top: 1px solid rgba(34, 36, 38, 0.15);\\n}\\n.ui.scrolling.dropdown .menu .item.item.item[data-v-a3dbfc0c],\\n.ui.dropdown .scrolling.menu > .item.item.item[data-v-a3dbfc0c] {\\n  border-top: none;\\n  padding-right: calc( 1.14285714rem  +  17px ) !important;\\n}\\n.ui.scrolling.dropdown .menu .item[data-v-a3dbfc0c]:first-child,\\n.ui.dropdown .scrolling.menu .item[data-v-a3dbfc0c]:first-child {\\n  border-top: none;\\n}\\n.ui.dropdown > .animating.menu .scrolling.menu[data-v-a3dbfc0c],\\n.ui.dropdown > .visible.menu .scrolling.menu[data-v-a3dbfc0c] {\\n  display: block;\\n}\\n\\n/* Scrollbar in IE */\\n@media all and (-ms-high-contrast: none) {\\n.ui.scrolling.dropdown .menu[data-v-a3dbfc0c],\\n  .ui.dropdown .scrolling.menu[data-v-a3dbfc0c] {\\n    min-width: calc(100% -  17px );\\n}\\n}\\n@media only screen and (max-width: 767px) {\\n.ui.scrolling.dropdown .menu[data-v-a3dbfc0c],\\n  .ui.dropdown .scrolling.menu[data-v-a3dbfc0c] {\\n    max-height: 10.28571429rem;\\n}\\n}\\n@media only screen and (min-width: 768px) {\\n.ui.scrolling.dropdown .menu[data-v-a3dbfc0c],\\n  .ui.dropdown .scrolling.menu[data-v-a3dbfc0c] {\\n    max-height: 15.42857143rem;\\n}\\n}\\n@media only screen and (min-width: 992px) {\\n.ui.scrolling.dropdown .menu[data-v-a3dbfc0c],\\n  .ui.dropdown .scrolling.menu[data-v-a3dbfc0c] {\\n    max-height: 20.57142857rem;\\n}\\n}\\n@media only screen and (min-width: 1920px) {\\n.ui.scrolling.dropdown .menu[data-v-a3dbfc0c],\\n  .ui.dropdown .scrolling.menu[data-v-a3dbfc0c] {\\n    max-height: 20.57142857rem;\\n}\\n}\\n\\n/*--------------\\n     Simple\\n---------------*/\\n\\n\\n/* Displays without javascript */\\n.ui.simple.dropdown .menu[data-v-a3dbfc0c]:before,\\n.ui.simple.dropdown .menu[data-v-a3dbfc0c]:after {\\n  display: none;\\n}\\n.ui.simple.dropdown .menu[data-v-a3dbfc0c] {\\n  position: absolute;\\n  display: block;\\n  overflow: hidden;\\n  top: -9999px !important;\\n  opacity: 0;\\n  width: 0;\\n  height: 0;\\n  -webkit-transition: opacity 0.1s ease;\\n  transition: opacity 0.1s ease;\\n}\\n.ui.simple.active.dropdown[data-v-a3dbfc0c],\\n.ui.simple.dropdown[data-v-a3dbfc0c]:hover {\\n  border-bottom-left-radius: 0em !important;\\n  border-bottom-right-radius: 0em !important;\\n}\\n.ui.simple.active.dropdown > .menu[data-v-a3dbfc0c],\\n.ui.simple.dropdown:hover > .menu[data-v-a3dbfc0c] {\\n  overflow: visible;\\n  width: auto;\\n  height: auto;\\n  top: 100% !important;\\n  opacity: 1;\\n}\\n.ui.simple.dropdown > .menu > .item:active > .menu[data-v-a3dbfc0c],\\n.ui.simple.dropdown:hover > .menu > .item:hover > .menu[data-v-a3dbfc0c] {\\n  overflow: visible;\\n  width: auto;\\n  height: auto;\\n  top: 0% !important;\\n  left: 100% !important;\\n  opacity: 1;\\n}\\n.ui.simple.disabled.dropdown:hover .menu[data-v-a3dbfc0c] {\\n  display: none;\\n  height: 0px;\\n  width: 0px;\\n  overflow: hidden;\\n}\\n\\n/* Visible */\\n.ui.simple.visible.dropdown > .menu[data-v-a3dbfc0c] {\\n  display: block;\\n}\\n\\n/*--------------\\n      Fluid\\n---------------*/\\n.ui.fluid.dropdown[data-v-a3dbfc0c] {\\n  display: block;\\n  width: 100%;\\n  min-width: 0em;\\n}\\n.ui.fluid.dropdown > .dropdown.icon[data-v-a3dbfc0c] {\\n  float: right;\\n}\\n\\n/*--------------\\n    Floating\\n---------------*/\\n.ui.floating.dropdown .menu[data-v-a3dbfc0c] {\\n  left: 0;\\n  right: auto;\\n  box-shadow: 0px 2px 4px 0px rgba(34, 36, 38, 0.12), 0px 2px 10px 0px rgba(34, 36, 38, 0.15) !important;\\n  border-radius: 0.28571429rem !important;\\n}\\n.ui.floating.dropdown > .menu[data-v-a3dbfc0c] {\\n  margin-top: 0.5em !important;\\n  border-radius: 0.28571429rem !important;\\n}\\n\\n/*--------------\\n     Pointing\\n---------------*/\\n.ui.pointing.dropdown > .menu[data-v-a3dbfc0c] {\\n  top: 100%;\\n  margin-top: 0.78571429rem;\\n  border-radius: 0.28571429rem;\\n}\\n.ui.pointing.dropdown > .menu[data-v-a3dbfc0c]:after {\\n  display: block;\\n  position: absolute;\\n  pointer-events: none;\\n  content: '';\\n  visibility: visible;\\n  -webkit-transform: rotate(45deg);\\n      -ms-transform: rotate(45deg);\\n          transform: rotate(45deg);\\n  width: 0.5em;\\n  height: 0.5em;\\n  box-shadow: -1px -1px 0px 1px rgba(34, 36, 38, 0.15);\\n  background: #FFFFFF;\\n  z-index: 2;\\n}\\n.ui.pointing.dropdown > .menu[data-v-a3dbfc0c]:after {\\n  top: -0.25em;\\n  left: 50%;\\n  margin: 0em 0em 0em -0.25em;\\n}\\n\\n/* Top Left Pointing */\\n.ui.top.left.pointing.dropdown > .menu[data-v-a3dbfc0c] {\\n  top: 100%;\\n  bottom: auto;\\n  left: 0%;\\n  right: auto;\\n  margin: 1em 0em 0em;\\n}\\n.ui.top.left.pointing.dropdown > .menu[data-v-a3dbfc0c] {\\n  top: 100%;\\n  bottom: auto;\\n  left: 0%;\\n  right: auto;\\n  margin: 1em 0em 0em;\\n}\\n.ui.top.left.pointing.dropdown > .menu[data-v-a3dbfc0c]:after {\\n  top: -0.25em;\\n  left: 1em;\\n  right: auto;\\n  margin: 0em;\\n  -webkit-transform: rotate(45deg);\\n      -ms-transform: rotate(45deg);\\n          transform: rotate(45deg);\\n}\\n\\n/* Top Right  Pointing */\\n.ui.top.right.pointing.dropdown > .menu[data-v-a3dbfc0c] {\\n  top: 100%;\\n  bottom: auto;\\n  right: 0%;\\n  left: auto;\\n  margin: 1em 0em 0em;\\n}\\n.ui.top.right.pointing.dropdown > .menu[data-v-a3dbfc0c]:after {\\n  top: -0.25em;\\n  left: auto;\\n  right: 1em;\\n  margin: 0em;\\n  -webkit-transform: rotate(45deg);\\n      -ms-transform: rotate(45deg);\\n          transform: rotate(45deg);\\n}\\n\\n/* Left Pointing */\\n.ui.left.pointing.dropdown > .menu[data-v-a3dbfc0c] {\\n  top: 0%;\\n  left: 100%;\\n  right: auto;\\n  margin: 0em 0em 0em 1em;\\n}\\n.ui.left.pointing.dropdown > .menu[data-v-a3dbfc0c]:after {\\n  top: 1em;\\n  left: -0.25em;\\n  margin: 0em 0em 0em 0em;\\n  -webkit-transform: rotate(-45deg);\\n      -ms-transform: rotate(-45deg);\\n          transform: rotate(-45deg);\\n}\\n\\n/* Right Pointing */\\n.ui.right.pointing.dropdown > .menu[data-v-a3dbfc0c] {\\n  top: 0%;\\n  left: auto;\\n  right: 100%;\\n  margin: 0em 1em 0em 0em;\\n}\\n.ui.right.pointing.dropdown > .menu[data-v-a3dbfc0c]:after {\\n  top: 1em;\\n  left: auto;\\n  right: -0.25em;\\n  margin: 0em 0em 0em 0em;\\n  -webkit-transform: rotate(135deg);\\n      -ms-transform: rotate(135deg);\\n          transform: rotate(135deg);\\n}\\n\\n/* Bottom Pointing */\\n.ui.bottom.pointing.dropdown > .menu[data-v-a3dbfc0c] {\\n  top: auto;\\n  bottom: 100%;\\n  left: 0%;\\n  right: auto;\\n  margin: 0em 0em 1em;\\n}\\n.ui.bottom.pointing.dropdown > .menu[data-v-a3dbfc0c]:after {\\n  top: auto;\\n  bottom: -0.25em;\\n  right: auto;\\n  margin: 0em;\\n  -webkit-transform: rotate(-135deg);\\n      -ms-transform: rotate(-135deg);\\n          transform: rotate(-135deg);\\n}\\n\\n/* Reverse Sub-Menu Direction */\\n.ui.bottom.pointing.dropdown > .menu .menu[data-v-a3dbfc0c] {\\n  top: auto !important;\\n  bottom: 0px !important;\\n}\\n\\n/* Bottom Left */\\n.ui.bottom.left.pointing.dropdown > .menu[data-v-a3dbfc0c] {\\n  left: 0%;\\n  right: auto;\\n}\\n.ui.bottom.left.pointing.dropdown > .menu[data-v-a3dbfc0c]:after {\\n  left: 1em;\\n  right: auto;\\n}\\n\\n/* Bottom Right */\\n.ui.bottom.right.pointing.dropdown > .menu[data-v-a3dbfc0c] {\\n  right: 0%;\\n  left: auto;\\n}\\n.ui.bottom.right.pointing.dropdown > .menu[data-v-a3dbfc0c]:after {\\n  left: auto;\\n  right: 1em;\\n}\\n\\n/* Upward pointing */\\n.ui.upward.pointing.dropdown > .menu[data-v-a3dbfc0c],\\n.ui.upward.top.pointing.dropdown > .menu[data-v-a3dbfc0c] {\\n  top: auto;\\n  bottom: 100%;\\n  margin: 0em 0em 0.78571429rem;\\n  border-radius: 0.28571429rem;\\n}\\n.ui.upward.pointing.dropdown > .menu[data-v-a3dbfc0c]:after,\\n.ui.upward.top.pointing.dropdown > .menu[data-v-a3dbfc0c]:after {\\n  top: 100%;\\n  bottom: auto;\\n  box-shadow: 1px 1px 0px 1px rgba(34, 36, 38, 0.15);\\n  margin: -0.25em 0em 0em;\\n}\\n\\n\\n/*******************************\\n         Theme Overrides\\n*******************************/\\n\\n\\n/* Dropdown Carets */\\n@font-face {\\n  font-family: 'Dropdown';\\n  src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMggjB5AAAAC8AAAAYGNtYXAPfuIIAAABHAAAAExnYXNwAAAAEAAAAWgAAAAIZ2x5Zjo82LgAAAFwAAABVGhlYWQAQ88bAAACxAAAADZoaGVhAwcB6QAAAvwAAAAkaG10eAS4ABIAAAMgAAAAIGxvY2EBNgDeAAADQAAAABJtYXhwAAoAFgAAA1QAAAAgbmFtZVcZpu4AAAN0AAABRXBvc3QAAwAAAAAEvAAAACAAAwIAAZAABQAAAUwBZgAAAEcBTAFmAAAA9QAZAIQAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADw2gHg/+D/4AHgACAAAAABAAAAAAAAAAAAAAAgAAAAAAACAAAAAwAAABQAAwABAAAAFAAEADgAAAAKAAgAAgACAAEAIPDa//3//wAAAAAAIPDX//3//wAB/+MPLQADAAEAAAAAAAAAAAAAAAEAAf//AA8AAQAAAAAAAAAAAAIAADc5AQAAAAABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAIABJQElABMAABM0NzY3BTYXFhUUDwEGJwYvASY1AAUGBwEACAUGBoAFCAcGgAUBEgcGBQEBAQcECQYHfwYBAQZ/BwYAAQAAAG4BJQESABMAADc0PwE2MzIfARYVFAcGIyEiJyY1AAWABgcIBYAGBgUI/wAHBgWABwaABQWABgcHBgUFBgcAAAABABIASQC3AW4AEwAANzQ/ATYXNhcWHQEUBwYnBi8BJjUSBoAFCAcFBgYFBwgFgAbbBwZ/BwEBBwQJ/wgEBwEBB38GBgAAAAABAAAASQClAW4AEwAANxE0NzYzMh8BFhUUDwEGIyInJjUABQYHCAWABgaABQgHBgVbAQAIBQYGgAUIBwWABgYFBwAAAAEAAAABAADZuaKOXw889QALAgAAAAAA0ABHWAAAAADQAEdYAAAAAAElAW4AAAAIAAIAAAAAAAAAAQAAAeD/4AAAAgAAAAAAASUAAQAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAABAAAAASUAAAElAAAAtwASALcAAAAAAAAACgAUAB4AQgBkAIgAqgAAAAEAAAAIABQAAQAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAOAK4AAQAAAAAAAQAOAAAAAQAAAAAAAgAOAEcAAQAAAAAAAwAOACQAAQAAAAAABAAOAFUAAQAAAAAABQAWAA4AAQAAAAAABgAHADIAAQAAAAAACgA0AGMAAwABBAkAAQAOAAAAAwABBAkAAgAOAEcAAwABBAkAAwAOACQAAwABBAkABAAOAFUAAwABBAkABQAWAA4AAwABBAkABgAOADkAAwABBAkACgA0AGMAaQBjAG8AbQBvAG8AbgBWAGUAcgBzAGkAbwBuACAAMQAuADAAaQBjAG8AbQBvAG8Abmljb21vb24AaQBjAG8AbQBvAG8AbgBSAGUAZwB1AGwAYQByAGkAYwBvAG0AbwBvAG4ARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAYgB5ACAASQBjAG8ATQBvAG8AbgAuAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=) format('truetype'), url(data:application/font-woff;charset=utf-8;base64,d09GRk9UVE8AAAVwAAoAAAAABSgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABDRkYgAAAA9AAAAdkAAAHZLDXE/09TLzIAAALQAAAAYAAAAGAIIweQY21hcAAAAzAAAABMAAAATA9+4ghnYXNwAAADfAAAAAgAAAAIAAAAEGhlYWQAAAOEAAAANgAAADYAQ88baGhlYQAAA7wAAAAkAAAAJAMHAelobXR4AAAD4AAAACAAAAAgBLgAEm1heHAAAAQAAAAABgAAAAYACFAAbmFtZQAABAgAAAFFAAABRVcZpu5wb3N0AAAFUAAAACAAAAAgAAMAAAEABAQAAQEBCGljb21vb24AAQIAAQA6+BwC+BsD+BgEHgoAGVP/i4seCgAZU/+LiwwHi2v4lPh0BR0AAACIDx0AAACNER0AAAAJHQAAAdASAAkBAQgPERMWGyAlKmljb21vb25pY29tb29udTB1MXUyMHVGMEQ3dUYwRDh1RjBEOXVGMERBAAACAYkABgAIAgABAAQABwAKAA0AVgCfAOgBL/yUDvyUDvyUDvuUDvtvi/emFYuQjZCOjo+Pj42Qiwj3lIsFkIuQiY6Hj4iNhouGi4aJh4eHCPsU+xQFiIiGiYaLhouHjYeOCPsU9xQFiI+Jj4uQCA77b4v3FBWLkI2Pjo8I9xT3FAWPjo+NkIuQi5CJjogI9xT7FAWPh42Hi4aLhomHh4eIiIaJhosI+5SLBYaLh42HjoiPiY+LkAgO+92d928Vi5CNkI+OCPcU9xQFjo+QjZCLkIuPiY6Hj4iNhouGCIv7lAWLhomHh4iIh4eJhouGi4aNiI8I+xT3FAWHjomPi5AIDvvdi+YVi/eUBYuQjZCOjo+Pj42Qi5CLkImOhwj3FPsUBY+IjYaLhouGiYeHiAj7FPsUBYiHhomGi4aLh42Hj4iOiY+LkAgO+JQU+JQViwwKAAAAAAMCAAGQAAUAAAFMAWYAAABHAUwBZgAAAPUAGQCEAAAAAAAAAAAAAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAQAAA8NoB4P/g/+AB4AAgAAAAAQAAAAAAAAAAAAAAIAAAAAAAAgAAAAMAAAAUAAMAAQAAABQABAA4AAAACgAIAAIAAgABACDw2v/9//8AAAAAACDw1//9//8AAf/jDy0AAwABAAAAAAAAAAAAAAABAAH//wAPAAEAAAABAAA5emozXw889QALAgAAAAAA0ABHWAAAAADQAEdYAAAAAAElAW4AAAAIAAIAAAAAAAAAAQAAAeD/4AAAAgAAAAAAASUAAQAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAABAAAAASUAAAElAAAAtwASALcAAAAAUAAACAAAAAAADgCuAAEAAAAAAAEADgAAAAEAAAAAAAIADgBHAAEAAAAAAAMADgAkAAEAAAAAAAQADgBVAAEAAAAAAAUAFgAOAAEAAAAAAAYABwAyAAEAAAAAAAoANABjAAMAAQQJAAEADgAAAAMAAQQJAAIADgBHAAMAAQQJAAMADgAkAAMAAQQJAAQADgBVAAMAAQQJAAUAFgAOAAMAAQQJAAYADgA5AAMAAQQJAAoANABjAGkAYwBvAG0AbwBvAG4AVgBlAHIAcwBpAG8AbgAgADEALgAwAGkAYwBvAG0AbwBvAG5pY29tb29uAGkAYwBvAG0AbwBvAG4AUgBlAGcAdQBsAGEAcgBpAGMAbwBtAG8AbwBuAEYAbwBuAHQAIABnAGUAbgBlAHIAYQB0AGUAZAAgAGIAeQAgAEkAYwBvAE0AbwBvAG4ALgAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) format('woff');\\n  font-weight: normal;\\n  font-style: normal;\\n}\\n.ui.dropdown > .dropdown.icon[data-v-a3dbfc0c] {\\n  font-family: 'Dropdown';\\n  line-height: 1;\\n  height: 1em;\\n  width: 1.23em;\\n  -webkit-backface-visibility: hidden;\\n          backface-visibility: hidden;\\n  font-weight: normal;\\n  font-style: normal;\\n  text-align: center;\\n}\\n.ui.dropdown > .dropdown.icon[data-v-a3dbfc0c] {\\n  width: auto;\\n}\\n.ui.dropdown > .dropdown.icon[data-v-a3dbfc0c]:before {\\n  content: '\\\\F0D7';\\n}\\n\\n/* Sub Menu */\\n.ui.dropdown .menu .item .dropdown.icon[data-v-a3dbfc0c]:before {\\n  content: '\\\\F0DA' ;\\n}\\n.ui.dropdown .item .left.dropdown.icon[data-v-a3dbfc0c]:before,\\n.ui.dropdown .left.menu .item .dropdown.icon[data-v-a3dbfc0c]:before {\\n  content: \\\"\\\\F0D9\\\" ;\\n}\\n\\n/* Vertical Menu Dropdown */\\n.ui.vertical.menu .dropdown.item > .dropdown.icon[data-v-a3dbfc0c]:before {\\n  content: \\\"\\\\F0DA\\\" ;\\n}\\n/* Icons for Reference\\n.dropdown.down.icon {\\n  content: \\\"\\\\f0d7\\\";\\n}\\n.dropdown.up.icon {\\n  content: \\\"\\\\f0d8\\\";\\n}\\n.dropdown.left.icon {\\n  content: \\\"\\\\f0d9\\\";\\n}\\n.dropdown.icon.icon {\\n  content: \\\"\\\\f0da\\\";\\n}\\n*/\\n\\n\\n/*******************************\\n        User Overrides\\n*******************************/\\n\\n\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 96 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(4)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"/*!\\n * # Semantic UI 2.2.3 - Label\\n * http://github.com/semantic-org/semantic-ui/\\n *\\n *\\n * Released under the MIT license\\n * http://opensource.org/licenses/MIT\\n *\\n */\\n\\n\\n/*******************************\\n            Label\\n*******************************/\\n.ui.label[data-v-a3dbfc0c] {\\n  display: inline-block;\\n  line-height: 1;\\n  vertical-align: baseline;\\n  margin: 0em 0.14285714em;\\n  background-color: #E8E8E8;\\n  background-image: none;\\n  padding: 0.5833em 0.833em;\\n  color: rgba(0, 0, 0, 0.6);\\n  text-transform: none;\\n  font-weight: bold;\\n  border: 0px solid transparent;\\n  border-radius: 0.28571429rem;\\n  -webkit-transition: background 0.1s ease;\\n  transition: background 0.1s ease;\\n}\\n.ui.label[data-v-a3dbfc0c]:first-child {\\n  margin-left: 0em;\\n}\\n.ui.label[data-v-a3dbfc0c]:last-child {\\n  margin-right: 0em;\\n}\\n\\n/* Link */\\na.ui.label[data-v-a3dbfc0c] {\\n  cursor: pointer;\\n}\\n\\n/* Inside Link */\\n.ui.label > a[data-v-a3dbfc0c] {\\n  cursor: pointer;\\n  color: inherit;\\n  opacity: 0.5;\\n  -webkit-transition: 0.1s opacity ease;\\n  transition: 0.1s opacity ease;\\n}\\n.ui.label > a[data-v-a3dbfc0c]:hover {\\n  opacity: 1;\\n}\\n\\n/* Image */\\n.ui.label > img[data-v-a3dbfc0c] {\\n  width: auto !important;\\n  vertical-align: middle;\\n  height: 2.1666em !important;\\n}\\n\\n/* Icon */\\n.ui.label > .icon[data-v-a3dbfc0c] {\\n  width: auto;\\n  margin: 0em 0.75em 0em 0em;\\n}\\n\\n/* Detail */\\n.ui.label > .detail[data-v-a3dbfc0c] {\\n  display: inline-block;\\n  vertical-align: top;\\n  font-weight: bold;\\n  margin-left: 1em;\\n  opacity: 0.8;\\n}\\n.ui.label > .detail .icon[data-v-a3dbfc0c] {\\n  margin: 0em 0.25em 0em 0em;\\n}\\n\\n/* Removable label */\\n.ui.label > .close.icon[data-v-a3dbfc0c],\\n.ui.label > .delete.icon[data-v-a3dbfc0c] {\\n  cursor: pointer;\\n  margin-right: 0em;\\n  margin-left: 0.5em;\\n  font-size: 0.92857143em;\\n  opacity: 0.5;\\n  -webkit-transition: background 0.1s ease;\\n  transition: background 0.1s ease;\\n}\\n.ui.label > .delete.icon[data-v-a3dbfc0c]:hover {\\n  opacity: 1;\\n}\\n\\n/*-------------------\\n       Group\\n--------------------*/\\n.ui.labels > .label[data-v-a3dbfc0c] {\\n  margin: 0em 0.5em 0.5em 0em;\\n}\\n\\n/*-------------------\\n       Coupling\\n--------------------*/\\n.ui.header > .ui.label[data-v-a3dbfc0c] {\\n  margin-top: -0.29165em;\\n}\\n\\n/* Remove border radius on attached segment */\\n.ui.attached.segment > .ui.top.left.attached.label[data-v-a3dbfc0c],\\n.ui.bottom.attached.segment > .ui.top.left.attached.label[data-v-a3dbfc0c] {\\n  border-top-left-radius: 0;\\n}\\n.ui.attached.segment > .ui.top.right.attached.label[data-v-a3dbfc0c],\\n.ui.bottom.attached.segment > .ui.top.right.attached.label[data-v-a3dbfc0c] {\\n  border-top-right-radius: 0;\\n}\\n.ui.top.attached.segment > .ui.bottom.left.attached.label[data-v-a3dbfc0c] {\\n  border-bottom-left-radius: 0;\\n}\\n.ui.top.attached.segment > .ui.bottom.right.attached.label[data-v-a3dbfc0c] {\\n  border-bottom-right-radius: 0;\\n}\\n\\n/* Padding on next content after a label */\\n.ui.top.attached.label:first-child + [data-v-a3dbfc0c]:not(.attached),\\n.ui.top.attached.label + [class*=\\\"right floated\\\"] + *[data-v-a3dbfc0c] {\\n  margin-top: 2rem !important;\\n}\\n.ui.bottom.attached.label:first-child ~ [data-v-a3dbfc0c]:last-child:not(.attached) {\\n  margin-top: 0em;\\n  margin-bottom: 2rem !important;\\n}\\n\\n\\n/*******************************\\n             Types\\n*******************************/\\n.ui.image.label[data-v-a3dbfc0c] {\\n  width: auto !important;\\n  margin-top: 0em;\\n  margin-bottom: 0em;\\n  max-width: 9999px;\\n  vertical-align: baseline;\\n  text-transform: none;\\n  background: #E8E8E8;\\n  padding: 0.5833em 0.833em 0.5833em 0.5em;\\n  border-radius: 0.28571429rem;\\n  box-shadow: none;\\n}\\n.ui.image.label img[data-v-a3dbfc0c] {\\n  display: inline-block;\\n  vertical-align: top;\\n  height: 2.1666em;\\n  margin: -0.5833em 0.5em -0.5833em -0.5em;\\n  border-radius: 0.28571429rem 0em 0em 0.28571429rem;\\n}\\n.ui.image.label .detail[data-v-a3dbfc0c] {\\n  background: rgba(0, 0, 0, 0.1);\\n  margin: -0.5833em -0.833em -0.5833em 0.5em;\\n  padding: 0.5833em 0.833em;\\n  border-radius: 0em 0.28571429rem 0.28571429rem 0em;\\n}\\n\\n/*-------------------\\n         Tag\\n--------------------*/\\n.ui.tag.labels .label[data-v-a3dbfc0c],\\n.ui.tag.label[data-v-a3dbfc0c] {\\n  margin-left: 1em;\\n  position: relative;\\n  padding-left: 1.5em;\\n  padding-right: 1.5em;\\n  border-radius: 0em 0.28571429rem 0.28571429rem 0em;\\n  -webkit-transition: none;\\n  transition: none;\\n}\\n.ui.tag.labels .label[data-v-a3dbfc0c]:before,\\n.ui.tag.label[data-v-a3dbfc0c]:before {\\n  position: absolute;\\n  -webkit-transform: translateY(-50%) translateX(50%) rotate(-45deg);\\n      -ms-transform: translateY(-50%) translateX(50%) rotate(-45deg);\\n          transform: translateY(-50%) translateX(50%) rotate(-45deg);\\n  top: 50%;\\n  right: 100%;\\n  content: '';\\n  background-color: inherit;\\n  background-image: none;\\n  width: 1.56em;\\n  height: 1.56em;\\n  -webkit-transition: none;\\n  transition: none;\\n}\\n.ui.tag.labels .label[data-v-a3dbfc0c]:after,\\n.ui.tag.label[data-v-a3dbfc0c]:after {\\n  position: absolute;\\n  content: '';\\n  top: 50%;\\n  left: -0.25em;\\n  margin-top: -0.25em;\\n  background-color: #FFFFFF !important;\\n  width: 0.5em;\\n  height: 0.5em;\\n  box-shadow: 0 -1px 1px 0 rgba(0, 0, 0, 0.3);\\n  border-radius: 500rem;\\n}\\n\\n/*-------------------\\n    Corner Label\\n--------------------*/\\n.ui.corner.label[data-v-a3dbfc0c] {\\n  position: absolute;\\n  top: 0em;\\n  right: 0em;\\n  margin: 0em;\\n  padding: 0em;\\n  text-align: center;\\n  border-color: #E8E8E8;\\n  width: 4em;\\n  height: 4em;\\n  z-index: 1;\\n  -webkit-transition: border-color 0.1s ease;\\n  transition: border-color 0.1s ease;\\n}\\n\\n/* Icon Label */\\n.ui.corner.label[data-v-a3dbfc0c] {\\n  background-color: transparent !important;\\n}\\n.ui.corner.label[data-v-a3dbfc0c]:after {\\n  position: absolute;\\n  content: \\\"\\\";\\n  right: 0em;\\n  top: 0em;\\n  z-index: -1;\\n  width: 0em;\\n  height: 0em;\\n  background-color: transparent !important;\\n  border-top: 0em solid transparent;\\n  border-right: 4em solid transparent;\\n  border-bottom: 4em solid transparent;\\n  border-left: 0em solid transparent;\\n  border-right-color: inherit;\\n  -webkit-transition: border-color 0.1s ease;\\n  transition: border-color 0.1s ease;\\n}\\n.ui.corner.label .icon[data-v-a3dbfc0c] {\\n  cursor: default;\\n  position: relative;\\n  top: 0.64285714em;\\n  left: 0.78571429em;\\n  font-size: 1.14285714em;\\n  margin: 0em;\\n}\\n\\n/* Left Corner */\\n.ui.left.corner.label[data-v-a3dbfc0c],\\n.ui.left.corner.label[data-v-a3dbfc0c]:after {\\n  right: auto;\\n  left: 0em;\\n}\\n.ui.left.corner.label[data-v-a3dbfc0c]:after {\\n  border-top: 4em solid transparent;\\n  border-right: 4em solid transparent;\\n  border-bottom: 0em solid transparent;\\n  border-left: 0em solid transparent;\\n  border-top-color: inherit;\\n}\\n.ui.left.corner.label .icon[data-v-a3dbfc0c] {\\n  left: -0.78571429em;\\n}\\n\\n/* Segment */\\n.ui.segment > .ui.corner.label[data-v-a3dbfc0c] {\\n  top: -1px;\\n  right: -1px;\\n}\\n.ui.segment > .ui.left.corner.label[data-v-a3dbfc0c] {\\n  right: auto;\\n  left: -1px;\\n}\\n\\n/*-------------------\\n       Ribbon\\n--------------------*/\\n.ui.ribbon.label[data-v-a3dbfc0c] {\\n  position: relative;\\n  margin: 0em;\\n  min-width: -webkit-max-content;\\n  min-width: -moz-max-content;\\n  min-width: max-content;\\n  border-radius: 0em 0.28571429rem 0.28571429rem 0em;\\n  border-color: rgba(0, 0, 0, 0.15);\\n}\\n.ui.ribbon.label[data-v-a3dbfc0c]:after {\\n  position: absolute;\\n  content: '';\\n  top: 100%;\\n  left: 0%;\\n  background-color: transparent !important;\\n  border-style: solid;\\n  border-width: 0em 1.2em 1.2em 0em;\\n  border-color: transparent;\\n  border-right-color: inherit;\\n  width: 0em;\\n  height: 0em;\\n}\\n\\n/* Positioning */\\n.ui.ribbon.label[data-v-a3dbfc0c] {\\n  left: calc( -1rem  -  1.2em );\\n  margin-right: -1.2em;\\n  padding-left: calc( 1rem  +  1.2em );\\n  padding-right: 1.2em;\\n}\\n.ui[class*=\\\"right ribbon\\\"].label[data-v-a3dbfc0c] {\\n  left: calc(100% +  1rem  +  1.2em );\\n  padding-left: 1.2em;\\n  padding-right: calc( 1rem  +  1.2em );\\n}\\n\\n/* Right Ribbon */\\n.ui[class*=\\\"right ribbon\\\"].label[data-v-a3dbfc0c] {\\n  text-align: left;\\n  -webkit-transform: translateX(-100%);\\n      -ms-transform: translateX(-100%);\\n          transform: translateX(-100%);\\n  border-radius: 0.28571429rem 0em 0em 0.28571429rem;\\n}\\n.ui[class*=\\\"right ribbon\\\"].label[data-v-a3dbfc0c]:after {\\n  left: auto;\\n  right: 0%;\\n  border-style: solid;\\n  border-width: 1.2em 1.2em 0em 0em;\\n  border-color: transparent;\\n  border-top-color: inherit;\\n}\\n\\n/* Inside Table */\\n.ui.image > .ribbon.label[data-v-a3dbfc0c],\\n.ui.card .image > .ribbon.label[data-v-a3dbfc0c] {\\n  position: absolute;\\n  top: 1rem;\\n}\\n.ui.card .image > .ui.ribbon.label[data-v-a3dbfc0c],\\n.ui.image > .ui.ribbon.label[data-v-a3dbfc0c] {\\n  left: calc( 0.05rem  -  1.2em );\\n}\\n.ui.card .image > .ui[class*=\\\"right ribbon\\\"].label[data-v-a3dbfc0c],\\n.ui.image > .ui[class*=\\\"right ribbon\\\"].label[data-v-a3dbfc0c] {\\n  left: calc(100% +  -0.05rem  +  1.2em );\\n  padding-left: 0.833em;\\n}\\n\\n/* Inside Table */\\n.ui.table td > .ui.ribbon.label[data-v-a3dbfc0c] {\\n  left: calc( -0.78571429em  -  1.2em );\\n}\\n.ui.table td > .ui[class*=\\\"right ribbon\\\"].label[data-v-a3dbfc0c] {\\n  left: calc(100% +  0.78571429em  +  1.2em );\\n  padding-left: 0.833em;\\n}\\n\\n/*-------------------\\n      Attached\\n--------------------*/\\n.ui[class*=\\\"top attached\\\"].label[data-v-a3dbfc0c],\\n.ui.attached.label[data-v-a3dbfc0c] {\\n  width: 100%;\\n  position: absolute;\\n  margin: 0em;\\n  top: 0em;\\n  left: 0em;\\n  padding: 0.75em 1em;\\n  border-radius: 0.21428571rem 0.21428571rem 0em 0em;\\n}\\n.ui[class*=\\\"bottom attached\\\"].label[data-v-a3dbfc0c] {\\n  top: auto;\\n  bottom: 0em;\\n  border-radius: 0em 0em 0.21428571rem 0.21428571rem;\\n}\\n.ui[class*=\\\"top left attached\\\"].label[data-v-a3dbfc0c] {\\n  width: auto;\\n  margin-top: 0em !important;\\n  border-radius: 0.21428571rem 0em 0.28571429rem 0em;\\n}\\n.ui[class*=\\\"top right attached\\\"].label[data-v-a3dbfc0c] {\\n  width: auto;\\n  left: auto;\\n  right: 0em;\\n  border-radius: 0em 0.21428571rem 0em 0.28571429rem;\\n}\\n.ui[class*=\\\"bottom left attached\\\"].label[data-v-a3dbfc0c] {\\n  width: auto;\\n  top: auto;\\n  bottom: 0em;\\n  border-radius: 0em 0.28571429rem 0em 0.21428571rem;\\n}\\n.ui[class*=\\\"bottom right attached\\\"].label[data-v-a3dbfc0c] {\\n  top: auto;\\n  bottom: 0em;\\n  left: auto;\\n  right: 0em;\\n  width: auto;\\n  border-radius: 0.28571429rem 0em 0.21428571rem 0em;\\n}\\n\\n\\n/*******************************\\n             States\\n*******************************/\\n\\n\\n/*-------------------\\n      Disabled\\n--------------------*/\\n.ui.label.disabled[data-v-a3dbfc0c] {\\n  opacity: 0.5;\\n}\\n\\n/*-------------------\\n        Hover\\n--------------------*/\\na.ui.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.label[data-v-a3dbfc0c]:hover {\\n  background-color: #E0E0E0;\\n  border-color: #E0E0E0;\\n  background-image: none;\\n  color: rgba(0, 0, 0, 0.8);\\n}\\n.ui.labels a.label[data-v-a3dbfc0c]:hover:before,\\na.ui.label[data-v-a3dbfc0c]:hover:before {\\n  color: rgba(0, 0, 0, 0.8);\\n}\\n\\n/*-------------------\\n        Active\\n--------------------*/\\n.ui.active.label[data-v-a3dbfc0c] {\\n  background-color: #D0D0D0;\\n  border-color: #D0D0D0;\\n  background-image: none;\\n  color: rgba(0, 0, 0, 0.95);\\n}\\n.ui.active.label[data-v-a3dbfc0c]:before {\\n  background-color: #D0D0D0;\\n  background-image: none;\\n  color: rgba(0, 0, 0, 0.95);\\n}\\n\\n/*-------------------\\n     Active Hover\\n--------------------*/\\na.ui.labels .active.label[data-v-a3dbfc0c]:hover,\\na.ui.active.label[data-v-a3dbfc0c]:hover {\\n  background-color: #C8C8C8;\\n  border-color: #C8C8C8;\\n  background-image: none;\\n  color: rgba(0, 0, 0, 0.95);\\n}\\n.ui.labels a.active.label[data-v-a3dbfc0c]:ActiveHover:before,\\na.ui.active.label[data-v-a3dbfc0c]:ActiveHover:before {\\n  background-color: #C8C8C8;\\n  background-image: none;\\n  color: rgba(0, 0, 0, 0.95);\\n}\\n\\n/*-------------------\\n      Visible\\n--------------------*/\\n.ui.labels.visible .label[data-v-a3dbfc0c],\\n.ui.label.visible[data-v-a3dbfc0c]:not(.dropdown) {\\n  display: inline-block !important;\\n}\\n\\n/*-------------------\\n      Hidden\\n--------------------*/\\n.ui.labels.hidden .label[data-v-a3dbfc0c],\\n.ui.label.hidden[data-v-a3dbfc0c] {\\n  display: none !important;\\n}\\n\\n\\n/*******************************\\n           Variations\\n*******************************/\\n\\n\\n/*-------------------\\n       Colors\\n--------------------*/\\n\\n\\n/*--- Red ---*/\\n.ui.red.labels .label[data-v-a3dbfc0c],\\n.ui.red.label[data-v-a3dbfc0c] {\\n  background-color: #DB2828 !important;\\n  border-color: #DB2828 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.red.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.red.label[data-v-a3dbfc0c]:hover {\\n  background-color: #d01919 !important;\\n  border-color: #d01919 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.red.corner.label[data-v-a3dbfc0c],\\n.ui.red.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.red.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #b21e1e !important;\\n}\\n\\n/* Basic */\\n.ui.basic.red.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #DB2828 !important;\\n  border-color: #DB2828 !important;\\n}\\n.ui.basic.red.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.red.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #d01919 !important;\\n  border-color: #d01919 !important;\\n}\\n\\n/*--- Orange ---*/\\n.ui.orange.labels .label[data-v-a3dbfc0c],\\n.ui.orange.label[data-v-a3dbfc0c] {\\n  background-color: #F2711C !important;\\n  border-color: #F2711C !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.orange.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.orange.label[data-v-a3dbfc0c]:hover {\\n  background-color: #f26202 !important;\\n  border-color: #f26202 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.orange.corner.label[data-v-a3dbfc0c],\\n.ui.orange.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.orange.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #cf590c !important;\\n}\\n\\n/* Basic */\\n.ui.basic.orange.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #F2711C !important;\\n  border-color: #F2711C !important;\\n}\\n.ui.basic.orange.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.orange.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #f26202 !important;\\n  border-color: #f26202 !important;\\n}\\n\\n/*--- Yellow ---*/\\n.ui.yellow.labels .label[data-v-a3dbfc0c],\\n.ui.yellow.label[data-v-a3dbfc0c] {\\n  background-color: #FBBD08 !important;\\n  border-color: #FBBD08 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.yellow.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.yellow.label[data-v-a3dbfc0c]:hover {\\n  background-color: #eaae00 !important;\\n  border-color: #eaae00 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.yellow.corner.label[data-v-a3dbfc0c],\\n.ui.yellow.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.yellow.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #cd9903 !important;\\n}\\n\\n/* Basic */\\n.ui.basic.yellow.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #FBBD08 !important;\\n  border-color: #FBBD08 !important;\\n}\\n.ui.basic.yellow.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.yellow.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #eaae00 !important;\\n  border-color: #eaae00 !important;\\n}\\n\\n/*--- Olive ---*/\\n.ui.olive.labels .label[data-v-a3dbfc0c],\\n.ui.olive.label[data-v-a3dbfc0c] {\\n  background-color: #B5CC18 !important;\\n  border-color: #B5CC18 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.olive.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.olive.label[data-v-a3dbfc0c]:hover {\\n  background-color: #a7bd0d !important;\\n  border-color: #a7bd0d !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.olive.corner.label[data-v-a3dbfc0c],\\n.ui.olive.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.olive.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #198f35 !important;\\n}\\n\\n/* Basic */\\n.ui.basic.olive.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #B5CC18 !important;\\n  border-color: #B5CC18 !important;\\n}\\n.ui.basic.olive.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.olive.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #a7bd0d !important;\\n  border-color: #a7bd0d !important;\\n}\\n\\n/*--- Green ---*/\\n.ui.green.labels .label[data-v-a3dbfc0c],\\n.ui.green.label[data-v-a3dbfc0c] {\\n  background-color: #21BA45 !important;\\n  border-color: #21BA45 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.green.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.green.label[data-v-a3dbfc0c]:hover {\\n  background-color: #16ab39 !important;\\n  border-color: #16ab39 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.green.corner.label[data-v-a3dbfc0c],\\n.ui.green.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.green.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #198f35 !important;\\n}\\n\\n/* Basic */\\n.ui.basic.green.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #21BA45 !important;\\n  border-color: #21BA45 !important;\\n}\\n.ui.basic.green.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.green.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #16ab39 !important;\\n  border-color: #16ab39 !important;\\n}\\n\\n/*--- Teal ---*/\\n.ui.teal.labels .label[data-v-a3dbfc0c],\\n.ui.teal.label[data-v-a3dbfc0c] {\\n  background-color: #00B5AD !important;\\n  border-color: #00B5AD !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.teal.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.teal.label[data-v-a3dbfc0c]:hover {\\n  background-color: #009c95 !important;\\n  border-color: #009c95 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.teal.corner.label[data-v-a3dbfc0c],\\n.ui.teal.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.teal.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #00827c !important;\\n}\\n\\n/* Basic */\\n.ui.basic.teal.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #00B5AD !important;\\n  border-color: #00B5AD !important;\\n}\\n.ui.basic.teal.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.teal.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #009c95 !important;\\n  border-color: #009c95 !important;\\n}\\n\\n/*--- Blue ---*/\\n.ui.blue.labels .label[data-v-a3dbfc0c],\\n.ui.blue.label[data-v-a3dbfc0c] {\\n  background-color: #2185D0 !important;\\n  border-color: #2185D0 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.blue.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.blue.label[data-v-a3dbfc0c]:hover {\\n  background-color: #1678c2 !important;\\n  border-color: #1678c2 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.blue.corner.label[data-v-a3dbfc0c],\\n.ui.blue.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.blue.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #1a69a4 !important;\\n}\\n\\n/* Basic */\\n.ui.basic.blue.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #2185D0 !important;\\n  border-color: #2185D0 !important;\\n}\\n.ui.basic.blue.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.blue.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #1678c2 !important;\\n  border-color: #1678c2 !important;\\n}\\n\\n/*--- Violet ---*/\\n.ui.violet.labels .label[data-v-a3dbfc0c],\\n.ui.violet.label[data-v-a3dbfc0c] {\\n  background-color: #6435C9 !important;\\n  border-color: #6435C9 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.violet.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.violet.label[data-v-a3dbfc0c]:hover {\\n  background-color: #5829bb !important;\\n  border-color: #5829bb !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.violet.corner.label[data-v-a3dbfc0c],\\n.ui.violet.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.violet.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #502aa1 !important;\\n}\\n\\n/* Basic */\\n.ui.basic.violet.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #6435C9 !important;\\n  border-color: #6435C9 !important;\\n}\\n.ui.basic.violet.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.violet.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #5829bb !important;\\n  border-color: #5829bb !important;\\n}\\n\\n/*--- Purple ---*/\\n.ui.purple.labels .label[data-v-a3dbfc0c],\\n.ui.purple.label[data-v-a3dbfc0c] {\\n  background-color: #A333C8 !important;\\n  border-color: #A333C8 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.purple.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.purple.label[data-v-a3dbfc0c]:hover {\\n  background-color: #9627ba !important;\\n  border-color: #9627ba !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.purple.corner.label[data-v-a3dbfc0c],\\n.ui.purple.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.purple.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #82299f !important;\\n}\\n\\n/* Basic */\\n.ui.basic.purple.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #A333C8 !important;\\n  border-color: #A333C8 !important;\\n}\\n.ui.basic.purple.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.purple.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #9627ba !important;\\n  border-color: #9627ba !important;\\n}\\n\\n/*--- Pink ---*/\\n.ui.pink.labels .label[data-v-a3dbfc0c],\\n.ui.pink.label[data-v-a3dbfc0c] {\\n  background-color: #E03997 !important;\\n  border-color: #E03997 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.pink.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.pink.label[data-v-a3dbfc0c]:hover {\\n  background-color: #e61a8d !important;\\n  border-color: #e61a8d !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.pink.corner.label[data-v-a3dbfc0c],\\n.ui.pink.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.pink.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #c71f7e !important;\\n}\\n\\n/* Basic */\\n.ui.basic.pink.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #E03997 !important;\\n  border-color: #E03997 !important;\\n}\\n.ui.basic.pink.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.pink.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #e61a8d !important;\\n  border-color: #e61a8d !important;\\n}\\n\\n/*--- Brown ---*/\\n.ui.brown.labels .label[data-v-a3dbfc0c],\\n.ui.brown.label[data-v-a3dbfc0c] {\\n  background-color: #A5673F !important;\\n  border-color: #A5673F !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.brown.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.brown.label[data-v-a3dbfc0c]:hover {\\n  background-color: #975b33 !important;\\n  border-color: #975b33 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.brown.corner.label[data-v-a3dbfc0c],\\n.ui.brown.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.brown.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #805031 !important;\\n}\\n\\n/* Basic */\\n.ui.basic.brown.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #A5673F !important;\\n  border-color: #A5673F !important;\\n}\\n.ui.basic.brown.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.brown.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #975b33 !important;\\n  border-color: #975b33 !important;\\n}\\n\\n/*--- Grey ---*/\\n.ui.grey.labels .label[data-v-a3dbfc0c],\\n.ui.grey.label[data-v-a3dbfc0c] {\\n  background-color: #767676 !important;\\n  border-color: #767676 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.grey.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.grey.label[data-v-a3dbfc0c]:hover {\\n  background-color: #838383 !important;\\n  border-color: #838383 !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.grey.corner.label[data-v-a3dbfc0c],\\n.ui.grey.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.grey.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #805031 !important;\\n}\\n\\n/* Basic */\\n.ui.basic.grey.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #767676 !important;\\n  border-color: #767676 !important;\\n}\\n.ui.basic.grey.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.grey.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #838383 !important;\\n  border-color: #838383 !important;\\n}\\n\\n/*--- Black ---*/\\n.ui.black.labels .label[data-v-a3dbfc0c],\\n.ui.black.label[data-v-a3dbfc0c] {\\n  background-color: #1B1C1D !important;\\n  border-color: #1B1C1D !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Link */\\n.ui.black.labels .label[data-v-a3dbfc0c]:hover,\\na.ui.black.label[data-v-a3dbfc0c]:hover {\\n  background-color: #27292a !important;\\n  border-color: #27292a !important;\\n  color: #FFFFFF !important;\\n}\\n\\n/* Corner */\\n.ui.black.corner.label[data-v-a3dbfc0c],\\n.ui.black.corner.label[data-v-a3dbfc0c]:hover {\\n  background-color: transparent !important;\\n}\\n\\n/* Ribbon */\\n.ui.black.ribbon.label[data-v-a3dbfc0c] {\\n  border-color: #805031 !important;\\n}\\n\\n/* Basic */\\n.ui.basic.black.label[data-v-a3dbfc0c] {\\n  background-color: #FFFFFF !important;\\n  color: #1B1C1D !important;\\n  border-color: #1B1C1D !important;\\n}\\n.ui.basic.black.labels a.label[data-v-a3dbfc0c]:hover,\\na.ui.basic.black.label[data-v-a3dbfc0c]:hover {\\n  background-color: #FFFFFF !important;\\n  color: #27292a !important;\\n  border-color: #27292a !important;\\n}\\n\\n/*-------------------\\n        Basic\\n--------------------*/\\n.ui.basic.label[data-v-a3dbfc0c] {\\n  background: none #FFFFFF;\\n  border: 1px solid rgba(34, 36, 38, 0.15);\\n  color: rgba(0, 0, 0, 0.87);\\n  box-shadow: none;\\n}\\n\\n/* Link */\\na.ui.basic.label[data-v-a3dbfc0c]:hover {\\n  text-decoration: none;\\n  background: none #FFFFFF;\\n  color: #1e70bf;\\n  box-shadow: 1px solid rgba(34, 36, 38, 0.15);\\n  box-shadow: none;\\n}\\n\\n/* Pointing */\\n.ui.basic.pointing.label[data-v-a3dbfc0c]:before {\\n  border-color: inherit;\\n}\\n\\n/*-------------------\\n       Fluid\\n--------------------*/\\n.ui.label.fluid[data-v-a3dbfc0c],\\n.ui.fluid.labels > .label[data-v-a3dbfc0c] {\\n  width: 100%;\\n  box-sizing: border-box;\\n}\\n\\n/*-------------------\\n       Inverted\\n--------------------*/\\n.ui.inverted.labels .label[data-v-a3dbfc0c],\\n.ui.inverted.label[data-v-a3dbfc0c] {\\n  color: rgba(255, 255, 255, 0.9) !important;\\n}\\n\\n/*-------------------\\n     Horizontal\\n--------------------*/\\n.ui.horizontal.labels .label[data-v-a3dbfc0c],\\n.ui.horizontal.label[data-v-a3dbfc0c] {\\n  margin: 0em 0.5em 0em 0em;\\n  padding: 0.4em 0.833em;\\n  min-width: 3em;\\n  text-align: center;\\n}\\n\\n/*-------------------\\n       Circular\\n--------------------*/\\n.ui.circular.labels .label[data-v-a3dbfc0c],\\n.ui.circular.label[data-v-a3dbfc0c] {\\n  min-width: 2em;\\n  min-height: 2em;\\n  padding: 0.5em !important;\\n  line-height: 1em;\\n  text-align: center;\\n  border-radius: 500rem;\\n}\\n.ui.empty.circular.labels .label[data-v-a3dbfc0c],\\n.ui.empty.circular.label[data-v-a3dbfc0c] {\\n  min-width: 0em;\\n  min-height: 0em;\\n  overflow: hidden;\\n  width: 0.5em;\\n  height: 0.5em;\\n  vertical-align: baseline;\\n}\\n\\n/*-------------------\\n       Pointing\\n--------------------*/\\n.ui.pointing.label[data-v-a3dbfc0c] {\\n  position: relative;\\n}\\n.ui.attached.pointing.label[data-v-a3dbfc0c] {\\n  position: absolute;\\n}\\n.ui.pointing.label[data-v-a3dbfc0c]:before {\\n  background-color: inherit;\\n  background-image: inherit;\\n  border-width: none;\\n  border-style: solid;\\n  border-color: inherit;\\n}\\n\\n/* Arrow */\\n.ui.pointing.label[data-v-a3dbfc0c]:before {\\n  position: absolute;\\n  content: '';\\n  -webkit-transform: rotate(45deg);\\n      -ms-transform: rotate(45deg);\\n          transform: rotate(45deg);\\n  background-image: none;\\n  z-index: 2;\\n  width: 0.6666em;\\n  height: 0.6666em;\\n  -webkit-transition: background 0.1s ease;\\n  transition: background 0.1s ease;\\n}\\n\\n/*--- Above ---*/\\n.ui.pointing.label[data-v-a3dbfc0c],\\n.ui[class*=\\\"pointing above\\\"].label[data-v-a3dbfc0c] {\\n  margin-top: 1em;\\n}\\n.ui.pointing.label[data-v-a3dbfc0c]:before,\\n.ui[class*=\\\"pointing above\\\"].label[data-v-a3dbfc0c]:before {\\n  border-width: 1px 0px 0px 1px;\\n  -webkit-transform: translateX(-50%) translateY(-50%) rotate(45deg);\\n      -ms-transform: translateX(-50%) translateY(-50%) rotate(45deg);\\n          transform: translateX(-50%) translateY(-50%) rotate(45deg);\\n  top: 0%;\\n  left: 50%;\\n}\\n\\n/*--- Below ---*/\\n.ui[class*=\\\"bottom pointing\\\"].label[data-v-a3dbfc0c],\\n.ui[class*=\\\"pointing below\\\"].label[data-v-a3dbfc0c] {\\n  margin-top: 0em;\\n  margin-bottom: 1em;\\n}\\n.ui[class*=\\\"bottom pointing\\\"].label[data-v-a3dbfc0c]:before,\\n.ui[class*=\\\"pointing below\\\"].label[data-v-a3dbfc0c]:before {\\n  border-width: 0px 1px 1px 0px;\\n  top: auto;\\n  right: auto;\\n  -webkit-transform: translateX(-50%) translateY(-50%) rotate(45deg);\\n      -ms-transform: translateX(-50%) translateY(-50%) rotate(45deg);\\n          transform: translateX(-50%) translateY(-50%) rotate(45deg);\\n  top: 100%;\\n  left: 50%;\\n}\\n\\n/*--- Left ---*/\\n.ui[class*=\\\"left pointing\\\"].label[data-v-a3dbfc0c] {\\n  margin-top: 0em;\\n  margin-left: 0.6666em;\\n}\\n.ui[class*=\\\"left pointing\\\"].label[data-v-a3dbfc0c]:before {\\n  border-width: 0px 0px 1px 1px;\\n  -webkit-transform: translateX(-50%) translateY(-50%) rotate(45deg);\\n      -ms-transform: translateX(-50%) translateY(-50%) rotate(45deg);\\n          transform: translateX(-50%) translateY(-50%) rotate(45deg);\\n  bottom: auto;\\n  right: auto;\\n  top: 50%;\\n  left: 0em;\\n}\\n\\n/*--- Right ---*/\\n.ui[class*=\\\"right pointing\\\"].label[data-v-a3dbfc0c] {\\n  margin-top: 0em;\\n  margin-right: 0.6666em;\\n}\\n.ui[class*=\\\"right pointing\\\"].label[data-v-a3dbfc0c]:before {\\n  border-width: 1px 1px 0px 0px;\\n  -webkit-transform: translateX(50%) translateY(-50%) rotate(45deg);\\n      -ms-transform: translateX(50%) translateY(-50%) rotate(45deg);\\n          transform: translateX(50%) translateY(-50%) rotate(45deg);\\n  top: 50%;\\n  right: 0%;\\n  bottom: auto;\\n  left: auto;\\n}\\n\\n/* Basic Pointing */\\n\\n/*--- Above ---*/\\n.ui.basic.pointing.label[data-v-a3dbfc0c]:before,\\n.ui.basic[class*=\\\"pointing above\\\"].label[data-v-a3dbfc0c]:before {\\n  margin-top: -1px;\\n}\\n\\n/*--- Below ---*/\\n.ui.basic[class*=\\\"bottom pointing\\\"].label[data-v-a3dbfc0c]:before,\\n.ui.basic[class*=\\\"pointing below\\\"].label[data-v-a3dbfc0c]:before {\\n  bottom: auto;\\n  top: 100%;\\n  margin-top: 1px;\\n}\\n\\n/*--- Left ---*/\\n.ui.basic[class*=\\\"left pointing\\\"].label[data-v-a3dbfc0c]:before {\\n  top: 50%;\\n  left: -1px;\\n}\\n\\n/*--- Right ---*/\\n.ui.basic[class*=\\\"right pointing\\\"].label[data-v-a3dbfc0c]:before {\\n  top: 50%;\\n  right: -1px;\\n}\\n\\n/*------------------\\n   Floating Label\\n-------------------*/\\n.ui.floating.label[data-v-a3dbfc0c] {\\n  position: absolute;\\n  z-index: 100;\\n  top: -1em;\\n  left: 100%;\\n  margin: 0em 0em 0em -1.5em !important;\\n}\\n\\n/*-------------------\\n        Sizes\\n--------------------*/\\n.ui.mini.labels .label[data-v-a3dbfc0c],\\n.ui.mini.label[data-v-a3dbfc0c] {\\n  font-size: 0.64285714rem;\\n}\\n.ui.tiny.labels .label[data-v-a3dbfc0c],\\n.ui.tiny.label[data-v-a3dbfc0c] {\\n  font-size: 0.71428571rem;\\n}\\n.ui.small.labels .label[data-v-a3dbfc0c],\\n.ui.small.label[data-v-a3dbfc0c] {\\n  font-size: 0.78571429rem;\\n}\\n.ui.labels .label[data-v-a3dbfc0c],\\n.ui.label[data-v-a3dbfc0c] {\\n  font-size: 0.85714286rem;\\n}\\n.ui.large.labels .label[data-v-a3dbfc0c],\\n.ui.large.label[data-v-a3dbfc0c] {\\n  font-size: 1rem;\\n}\\n.ui.big.labels .label[data-v-a3dbfc0c],\\n.ui.big.label[data-v-a3dbfc0c] {\\n  font-size: 1.28571429rem;\\n}\\n.ui.huge.labels .label[data-v-a3dbfc0c],\\n.ui.huge.label[data-v-a3dbfc0c] {\\n  font-size: 1.42857143rem;\\n}\\n.ui.massive.labels .label[data-v-a3dbfc0c],\\n.ui.massive.label[data-v-a3dbfc0c] {\\n  font-size: 1.71428571rem;\\n}\\n\\n\\n/*******************************\\n         Theme Overrides\\n*******************************/\\n\\n\\n\\n/*******************************\\n         Site Overrides\\n*******************************/\\n\\n\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 97 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_exports__, __vue_options__\n\tvar __vue_styles__ = {}\n\t\n\t/* script */\n\t__vue_exports__ = __webpack_require__(48)\n\t__vue_options__ = __vue_exports__ = __vue_exports__ || {}\n\tif (\n\t  typeof __vue_exports__.default === \"object\" ||\n\t  typeof __vue_exports__.default === \"function\"\n\t) {\n\t__vue_options__ = __vue_exports__ = __vue_exports__.default\n\t}\n\tif (typeof __vue_options__ === \"function\") {\n\t  __vue_options__ = __vue_options__.options\n\t}\n\t\n\t\n\tmodule.exports = __vue_exports__\n\n\n/***/ },\n/* 98 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_exports__, __vue_options__\n\tvar __vue_styles__ = {}\n\t\n\t/* script */\n\t__vue_exports__ = __webpack_require__(49)\n\t__vue_options__ = __vue_exports__ = __vue_exports__ || {}\n\tif (\n\t  typeof __vue_exports__.default === \"object\" ||\n\t  typeof __vue_exports__.default === \"function\"\n\t) {\n\t__vue_options__ = __vue_exports__ = __vue_exports__.default\n\t}\n\tif (typeof __vue_options__ === \"function\") {\n\t  __vue_options__ = __vue_options__.options\n\t}\n\t\n\t\n\tmodule.exports = __vue_exports__\n\n\n/***/ },\n/* 99 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_exports__, __vue_options__\n\tvar __vue_styles__ = {}\n\t\n\t/* script */\n\t__vue_exports__ = __webpack_require__(51)\n\t__vue_options__ = __vue_exports__ = __vue_exports__ || {}\n\tif (\n\t  typeof __vue_exports__.default === \"object\" ||\n\t  typeof __vue_exports__.default === \"function\"\n\t) {\n\t__vue_options__ = __vue_exports__ = __vue_exports__.default\n\t}\n\tif (typeof __vue_options__ === \"function\") {\n\t  __vue_options__ = __vue_options__.options\n\t}\n\t\n\t\n\tmodule.exports = __vue_exports__\n\n\n/***/ },\n/* 100 */\n/***/ function(module, exports) {\n\n\tmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n\t  return _c('div', {\n\t    staticClass: \"ui fluid search selection dropdown\",\n\t    class: {\n\t      'active visible': _vm.showMenu, 'error': _vm.isError, 'disabled': _vm.isDisabled\n\t    },\n\t    on: {\n\t      \"click\": _vm.openOptions,\n\t      \"focus\": _vm.openOptions\n\t    }\n\t  }, [_c('i', {\n\t    staticClass: \"dropdown icon\"\n\t  }), _vm._v(\" \"), _c('input', {\n\t    ref: \"input\",\n\t    staticClass: \"search\",\n\t    attrs: {\n\t      \"autocomplete\": \"off\",\n\t      \"tabindex\": \"0\",\n\t      \"id\": _vm.id,\n\t      \"name\": _vm.name\n\t    },\n\t    domProps: {\n\t      \"value\": _vm.searchText\n\t    },\n\t    on: {\n\t      \"input\": function($event) {\n\t        _vm.searchText = $event.target.value\n\t      },\n\t      \"focus\": function($event) {\n\t        $event.preventDefault();\n\t        _vm.openOptions($event)\n\t      },\n\t      \"keyup\": [function($event) {\n\t        if (_vm._k($event.keyCode, \"esc\", 27)) { return; }\n\t        _vm.closeOptions($event)\n\t      }, function($event) {\n\t        if (_vm._k($event.keyCode, \"enter\", 13)) { return; }\n\t        $event.preventDefault();\n\t        _vm.enterItem($event)\n\t      }],\n\t      \"blur\": _vm.blurInput,\n\t      \"keydown\": [function($event) {\n\t        if (_vm._k($event.keyCode, \"up\", 38)) { return; }\n\t        _vm.prevItem($event)\n\t      }, function($event) {\n\t        if (_vm._k($event.keyCode, \"down\", 40)) { return; }\n\t        _vm.nextItem($event)\n\t      }, function($event) {\n\t        if (_vm._k($event.keyCode, \"enter\", 13)) { return; }\n\t        $event.preventDefault();\n\t      }, function($event) {\n\t        if (_vm._k($event.keyCode, \"delete\", [8, 46])) { return; }\n\t        _vm.deleteTextOrItem($event)\n\t      }]\n\t    }\n\t  }), _vm._v(\" \"), _c('div', {\n\t    staticClass: \"text\",\n\t    class: _vm.textClass,\n\t    attrs: {\n\t      \"data-vss-custom-attr\": _vm.searchTextCustomAttr\n\t    }\n\t  }, [_vm._v(_vm._s(_vm.inputText) + \"\\n  \")]), _vm._v(\" \"), _c('div', {\n\t    ref: \"menu\",\n\t    staticClass: \"menu\",\n\t    class: _vm.menuClass,\n\t    style: (_vm.menuStyle),\n\t    attrs: {\n\t      \"tabindex\": \"-1\"\n\t    },\n\t    on: {\n\t      \"mousedown\": function($event) {\n\t        $event.preventDefault();\n\t      }\n\t    }\n\t  }, [_vm._l((_vm.filteredOptions), function(option, idx) {\n\t    return [_c('div', {\n\t      staticClass: \"item\",\n\t      class: {\n\t        'selected': option.selected, 'current': _vm.pointer === idx\n\t      },\n\t      attrs: {\n\t        \"data-vss-custom-attr\": _vm.customAttrs[idx] ? _vm.customAttrs[idx] : ''\n\t      },\n\t      on: {\n\t        \"click\": function($event) {\n\t          $event.stopPropagation();\n\t          _vm.selectItem(option)\n\t        },\n\t        \"mousedown\": _vm.mousedownItem,\n\t        \"mouseenter\": function($event) {\n\t          _vm.pointerSet(idx)\n\t        }\n\t      }\n\t    }, [_vm._v(\"\\n        \" + _vm._s(option.text) + \"\\n      \")])]\n\t  })], 2)])\n\t},staticRenderFns: []}\n\n/***/ },\n/* 101 */\n/***/ function(module, exports) {\n\n\tmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n\t  return _c('div', {\n\t    staticClass: \"ui fluid search selection dropdown\",\n\t    class: {\n\t      'active visible': _vm.showMenu, 'error': _vm.isError, 'disabled': _vm.isDisabled\n\t    },\n\t    on: {\n\t      \"click\": _vm.openOptions,\n\t      \"focus\": _vm.openOptions\n\t    }\n\t  }, [_c('i', {\n\t    staticClass: \"dropdown icon\"\n\t  }), _vm._v(\" \"), _c('input', {\n\t    ref: \"input\",\n\t    staticClass: \"search\",\n\t    attrs: {\n\t      \"autocomplete\": \"off\",\n\t      \"tabindex\": \"0\",\n\t      \"id\": _vm.id,\n\t      \"name\": _vm.name\n\t    },\n\t    domProps: {\n\t      \"value\": _vm.searchText\n\t    },\n\t    on: {\n\t      \"input\": function($event) {\n\t        _vm.searchText = $event.target.value\n\t      },\n\t      \"focus\": function($event) {\n\t        $event.preventDefault();\n\t        _vm.openOptions($event)\n\t      },\n\t      \"keyup\": [function($event) {\n\t        if (_vm._k($event.keyCode, \"esc\", 27)) { return; }\n\t        _vm.closeOptions($event)\n\t      }, function($event) {\n\t        if (_vm._k($event.keyCode, \"enter\", 13)) { return; }\n\t        $event.preventDefault();\n\t        _vm.enterItem($event)\n\t      }],\n\t      \"blur\": _vm.blurInput,\n\t      \"keydown\": [function($event) {\n\t        if (_vm._k($event.keyCode, \"up\", 38)) { return; }\n\t        _vm.prevItem($event)\n\t      }, function($event) {\n\t        if (_vm._k($event.keyCode, \"down\", 40)) { return; }\n\t        _vm.nextItem($event)\n\t      }, function($event) {\n\t        if (_vm._k($event.keyCode, \"enter\", 13)) { return; }\n\t        $event.preventDefault();\n\t      }, function($event) {\n\t        if (_vm._k($event.keyCode, \"delete\", [8, 46])) { return; }\n\t        _vm.deleteTextOrItem($event)\n\t      }]\n\t    }\n\t  }), _vm._v(\" \"), _c('div', {\n\t    staticClass: \"text\",\n\t    class: _vm.textClass,\n\t    attrs: {\n\t      \"data-vss-custom-attr\": _vm.searchTextCustomAttr\n\t    }\n\t  }, [_vm._v(_vm._s(_vm.inputText) + \"\\n  \")]), _vm._v(\" \"), _c('div', {\n\t    ref: \"menu\",\n\t    staticClass: \"menu\",\n\t    class: _vm.menuClass,\n\t    style: (_vm.menuStyle),\n\t    attrs: {\n\t      \"tabindex\": \"-1\"\n\t    },\n\t    on: {\n\t      \"mousedown\": function($event) {\n\t        $event.preventDefault();\n\t      }\n\t    }\n\t  }, [_vm._l((_vm.filteredOptions), function(option, idx) {\n\t    return [_c('div', {\n\t      staticClass: \"item\",\n\t      class: {\n\t        'selected': option.selected, 'current': _vm.pointer === idx\n\t      },\n\t      attrs: {\n\t        \"data-vss-custom-attr\": _vm.customAttrs[idx] ? _vm.customAttrs[idx] : ''\n\t      },\n\t      on: {\n\t        \"click\": function($event) {\n\t          $event.stopPropagation();\n\t          _vm.selectItem(option)\n\t        },\n\t        \"mousedown\": _vm.mousedownItem,\n\t        \"mouseenter\": function($event) {\n\t          _vm.pointerSet(idx)\n\t        }\n\t      }\n\t    }, [_vm._v(\"\\n        \" + _vm._s(option.text) + \"\\n      \")])]\n\t  })], 2)])\n\t},staticRenderFns: []}\n\n/***/ },\n/* 102 */\n/***/ function(module, exports) {\n\n\tmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n\t  return _c('div', {\n\t    staticClass: \"ui fluid multiple search selection dropdown\",\n\t    class: {\n\t      'active visible': _vm.showMenu, 'error': _vm.isError, 'disabled': _vm.isDisabled\n\t    },\n\t    on: {\n\t      \"click\": _vm.openOptions,\n\t      \"focus\": _vm.openOptions\n\t    }\n\t  }, [_c('i', {\n\t    staticClass: \"dropdown icon\"\n\t  }), _vm._v(\" \"), _vm._l((_vm.selectedOptions), function(option, idx) {\n\t    return (!_vm.hideSelectedOptions) ? [_c('a', {\n\t      staticClass: \"ui label transition visible\",\n\t      staticStyle: {\n\t        \"display\": \"inline-block !important\"\n\t      },\n\t      attrs: {\n\t        \"data-vss-custom-attr\": _vm.customAttr(option)\n\t      }\n\t    }, [_vm._v(\"\\n      \" + _vm._s(option.text)), _c('i', {\n\t      staticClass: \"delete icon\",\n\t      on: {\n\t        \"click\": function($event) {\n\t          _vm.deleteItem(option)\n\t        }\n\t      }\n\t    })])] : _vm._e()\n\t  }), _vm._v(\" \"), _c('input', {\n\t    directives: [{\n\t      name: \"model\",\n\t      rawName: \"v-model\",\n\t      value: (_vm.searchText),\n\t      expression: \"searchText\"\n\t    }],\n\t    ref: \"input\",\n\t    staticClass: \"search\",\n\t    style: (_vm.inputWidth),\n\t    attrs: {\n\t      \"autocomplete\": \"off\",\n\t      \"tabindex\": \"0\",\n\t      \"id\": _vm.id,\n\t      \"name\": _vm.name\n\t    },\n\t    domProps: {\n\t      \"value\": _vm._s(_vm.searchText)\n\t    },\n\t    on: {\n\t      \"focus\": function($event) {\n\t        $event.preventDefault();\n\t        _vm.openOptions($event)\n\t      },\n\t      \"keyup\": [function($event) {\n\t        if (_vm._k($event.keyCode, \"esc\", 27)) { return; }\n\t        _vm.closeOptions($event)\n\t      }, function($event) {\n\t        if (_vm._k($event.keyCode, \"enter\", 13)) { return; }\n\t        $event.preventDefault();\n\t        _vm.enterItem($event)\n\t      }],\n\t      \"blur\": _vm.blurInput,\n\t      \"keydown\": [function($event) {\n\t        if (_vm._k($event.keyCode, \"up\", 38)) { return; }\n\t        _vm.prevItem($event)\n\t      }, function($event) {\n\t        if (_vm._k($event.keyCode, \"down\", 40)) { return; }\n\t        _vm.nextItem($event)\n\t      }, function($event) {\n\t        if (_vm._k($event.keyCode, \"enter\", 13)) { return; }\n\t        $event.preventDefault();\n\t      }, function($event) {\n\t        if (_vm._k($event.keyCode, \"delete\", [8, 46])) { return; }\n\t        _vm.deleteTextOrLastItem($event)\n\t      }],\n\t      \"input\": function($event) {\n\t        if ($event.target.composing) { return; }\n\t        _vm.searchText = $event.target.value\n\t      }\n\t    }\n\t  }), _vm._v(\" \"), _c('div', {\n\t    staticClass: \"text\",\n\t    class: _vm.textClass\n\t  }, [_vm._v(_vm._s(_vm.inputText) + \"\\n  \")]), _vm._v(\" \"), _c('div', {\n\t    ref: \"menu\",\n\t    staticClass: \"menu\",\n\t    class: _vm.menuClass,\n\t    style: (_vm.menuStyle),\n\t    attrs: {\n\t      \"tabindex\": \"-1\"\n\t    },\n\t    on: {\n\t      \"mousedown\": function($event) {\n\t        $event.preventDefault();\n\t      }\n\t    }\n\t  }, [_vm._l((_vm.filteredOptions), function(option, idx) {\n\t    return [_c('div', {\n\t      staticClass: \"item\",\n\t      class: {\n\t        'selected': option.selected, 'current': _vm.pointer === idx\n\t      },\n\t      attrs: {\n\t        \"data-vss-custom-attr\": _vm.customAttr(option)\n\t      },\n\t      on: {\n\t        \"click\": function($event) {\n\t          $event.stopPropagation();\n\t          _vm.selectItem(option)\n\t        },\n\t        \"mousedown\": _vm.mousedownItem,\n\t        \"mouseenter\": function($event) {\n\t          _vm.pointerSet(idx)\n\t        }\n\t      }\n\t    }, [_vm._v(\"\\n        \" + _vm._s(option.text) + \"\\n      \")])]\n\t  })], 2)], 2)\n\t},staticRenderFns: []}\n\n/***/ },\n/* 103 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(90);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(5)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {}\n\n/***/ },\n/* 104 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(91);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(5)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {}\n\n/***/ },\n/* 105 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(92);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(5)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {}\n\n/***/ },\n/* 106 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(93);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(5)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {}\n\n/***/ },\n/* 107 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(94);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(5)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {}\n\n/***/ },\n/* 108 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(95);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(5)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {}\n\n/***/ },\n/* 109 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(96);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(5)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {}\n\n/***/ }\n/******/ ])\n});\n;\n//# sourceMappingURL=vue-search-select.js.map\n\n//# sourceURL=webpack:///./node_modules/vue-search-select/publish/vue-search-select.js?");

/***/ }),

/***/ "./node_modules/vue/dist/vue.esm.js":
/*!******************************************!*\
  !*** ./node_modules/vue/dist/vue.esm.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.6.10\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a string containing static keys from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (target) {\n  targetStack.push(target);\n  Dep.target = target;\n}\n\nfunction popTarget () {\n  targetStack.pop();\n  Dep.target = targetStack[targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      protoAugment(value, arrayMethods);\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar isUsingMicroTask = false;\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n  isUsingMicroTask = true;\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n  isUsingMicroTask = true;\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Techinically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a speical value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack becaues all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if ( true && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.10';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');\n\nvar convertEnumeratedValue = function (key, value) {\n  return isFalsyAttrValue(value) || value === 'false'\n    ? 'false'\n    // allow arbitrary string value for contenteditable\n    : key === 'contenteditable' && isValidContentEditableValue(value)\n      ? value\n      : 'true'\n};\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n       true && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\nvar nodeOps = /*#__PURE__*/Object.freeze({\n  createElement: createElement$1,\n  createElementNS: createElementNS,\n  createTextNode: createTextNode,\n  createComment: createComment,\n  insertBefore: insertBefore,\n  removeChild: removeChild,\n  appendChild: appendChild,\n  parentNode: parentNode,\n  nextSibling: nextSibling,\n  tagName: tagName,\n  setTextContent: setTextContent,\n  setStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (true) {\n        if (data && data.pre) {\n          creatingElmInVPre++;\n        }\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if ( true && data && data.pre) {\n        creatingElmInVPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        insert(parentElm, vnode.elm, refElm);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (nodeOps.parentNode(ref$$1) === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (true) {\n        checkDuplicateKeys(children);\n      }\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (true) {\n      checkDuplicateKeys(newCh);\n    }\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (\n    oldVnode,\n    vnode,\n    insertedVnodeQueue,\n    ownerArray,\n    index,\n    removeOnly\n  ) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // clone reused vnode\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (true) {\n          checkDuplicateKeys(ch);\n        }\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (true) {\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\n        return false\n      }\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if ( true &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if ( true &&\n                typeof console !== 'undefined' &&\n                !hydrationBailed\n              ) {\n                hydrationBailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (true) {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm)) {\n          removeVnodes(parentElm, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      dir.oldArg = oldDir.arg;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, convertEnumeratedValue(key, value));\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && value !== '' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + (args !== ')' ? ',' + args : args))\n  }\n}\n\n/*  */\n\n\n\n/* eslint-disable no-unused-vars */\nfunction baseWarn (msg, range) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n/* eslint-enable no-unused-vars */\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value, range, dynamic) {\n  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value, range, dynamic) {\n  var attrs = dynamic\n    ? (el.dynamicAttrs || (el.dynamicAttrs = []))\n    : (el.attrs || (el.attrs = []));\n  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value, range) {\n  el.attrsMap[name] = value;\n  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  isDynamicArg,\n  modifiers,\n  range\n) {\n  (el.directives || (el.directives = [])).push(rangeSetItem({\n    name: name,\n    rawName: rawName,\n    value: value,\n    arg: arg,\n    isDynamicArg: isDynamicArg,\n    modifiers: modifiers\n  }, range));\n  el.plain = false;\n}\n\nfunction prependModifierMarker (symbol, name, dynamic) {\n  return dynamic\n    ? (\"_p(\" + name + \",\\\"\" + symbol + \"\\\")\")\n    : symbol + name // mark the event as captured\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn,\n  range,\n  dynamic\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n     true && warn &&\n    modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.',\n      range\n    );\n  }\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (modifiers.right) {\n    if (dynamic) {\n      name = \"(\" + name + \")==='click'?'contextmenu':(\" + name + \")\";\n    } else if (name === 'click') {\n      name = 'contextmenu';\n      delete modifiers.right;\n    }\n  } else if (modifiers.middle) {\n    if (dynamic) {\n      name = \"(\" + name + \")==='click'?'mouseup':(\" + name + \")\";\n    } else if (name === 'click') {\n      name = 'mouseup';\n    }\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = prependModifierMarker('!', name, dynamic);\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = prependModifierMarker('~', name, dynamic);\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = prependModifierMarker('&', name, dynamic);\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getRawBindingAttr (\n  el,\n  name\n) {\n  return el.rawAttrsMap[':' + name] ||\n    el.rawAttrsMap['v-bind:' + name] ||\n    el.rawAttrsMap[name]\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\nfunction getAndRemoveAttrByRegex (\n  el,\n  name\n) {\n  var list = el.attrsList;\n  for (var i = 0, l = list.length; i < l; i++) {\n    var attr = list[i];\n    if (name.test(attr.name)) {\n      list.splice(i, 1);\n      return attr\n    }\n  }\n}\n\nfunction rangeSetItem (\n  item,\n  range\n) {\n  if (range) {\n    if (range.start != null) {\n      item.start = range.start;\n    }\n    if (range.end != null) {\n      item.end = range.end;\n    }\n  }\n  return item\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n      \"? \" + baseValueExpression + \".trim()\" +\n      \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: JSON.stringify(value),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len, str, chr, index$1, expressionPos, expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  // Fix https://github.com/vuejs/vue/pull/7730\n  // allow v-model=\"obj.val \" (trailing whitespace)\n  val = val.trim();\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (true) {\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\",\n        el.rawAttrsMap['v-model']\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (true) {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.',\n      el.rawAttrsMap['v-model']\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n      \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  // except for inputs with v-bind:type\n  if (true) {\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\n    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (value$1 && !typeBinding) {\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\n      warn$1(\n        binding + \"=\\\"\" + value$1 + \"\\\" conflicts with v-model on the same element \" +\n        'because the latter already expands to a value binding internally',\n        el.rawAttrsMap[binding]\n      );\n    }\n  }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler$1 (event, handler, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\n// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp\n// implementation and does not fire microtasks in between event propagation, so\n// safe to exclude.\nvar useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);\n\nfunction add$1 (\n  name,\n  handler,\n  capture,\n  passive\n) {\n  // async edge case #6566: inner click event triggers patch, event handler\n  // attached to outer element during patch, and triggered again. This\n  // happens because browsers fire microtask ticks between event propagation.\n  // the solution is simple: we save the timestamp when a handler is attached,\n  // and the handler would only fire if the event passed to it was fired\n  // AFTER it was attached.\n  if (useMicrotaskFix) {\n    var attachedTimestamp = currentFlushTimestamp;\n    var original = handler;\n    handler = original._wrapper = function (e) {\n      if (\n        // no bubbling, should always fire.\n        // this is just a safety net in case event.timeStamp is unreliable in\n        // certain weird environments...\n        e.target === e.currentTarget ||\n        // event is fired after handler attachment\n        e.timeStamp >= attachedTimestamp ||\n        // bail for environments that have buggy event.timeStamp implementations\n        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState\n        // #9681 QtWebEngine event.timeStamp is negative value\n        e.timeStamp <= 0 ||\n        // #9448 bail if event is fired in another document in a multi-page\n        // electron/nw.js app, since event.timeStamp will be using a different\n        // starting reference\n        e.target.ownerDocument !== document\n      ) {\n        return original.apply(this, arguments)\n      }\n    };\n  }\n  target$1.addEventListener(\n    name,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  name,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    name,\n    handler._wrapper || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nvar svgContainer;\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (!(key in props)) {\n      elm[key] = '';\n    }\n  }\n\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value' && elm.tagName !== 'PROGRESS') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {\n      // IE doesn't support innerHTML for SVG elements\n      svgContainer = svgContainer || document.createElement('div');\n      svgContainer.innerHTML = \"<svg>\" + cur + \"</svg>\";\n      var svg = svgContainer.firstChild;\n      while (elm.firstChild) {\n        elm.removeChild(elm.firstChild);\n      }\n      while (svg.firstChild) {\n        elm.appendChild(svg.firstChild);\n      }\n    } else if (\n      // skip the update if old and new VDOM state is the same.\n      // `value` is handled separately because the DOM value may be temporarily\n      // out of sync with VDOM state due to focus, composition and modifiers.\n      // This  #4521 by skipping the unnecesarry `checked` update.\n      cur !== oldProps[key]\n    ) {\n      // some property updates can throw\n      // e.g. `value` on <progress> w/ non-finite value\n      try {\n        elm[key] = cur;\n      } catch (e) {}\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\nvar whitespaceRE = /\\s+/;\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  // JSDOM may return undefined for transition properties\n  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');\n  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');\n  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers\n// in a locale-dependent way, using a comma instead of a dot.\n// If comma is not replaced with a dot, the input will be rounded down (i.e. acting\n// as a floor function) causing unexpected behaviors\nfunction toMs (s) {\n  return Number(s.slice(0, -1).replace(',', '.')) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    context = transitionNode.context;\n    transitionNode = transitionNode.parent;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if ( true && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if ( true && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show && el.parentNode) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n     true && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n};\n\n/*  */\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };\n\nvar isVShowDirective = function (d) { return d.name === 'show'; };\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(isNotTextNode);\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if ( true && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if ( true &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(isVShowDirective)) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  beforeMount: function beforeMount () {\n    var this$1 = this;\n\n    var update = this._update;\n    this._update = function (vnode, hydrating) {\n      var restoreActiveInstance = setActiveInstance(this$1);\n      // force removing pass\n      this$1.__patch__(\n        this$1._vnode,\n        this$1.kept,\n        false, // hydrating\n        true // removeOnly (!important, avoids unnecessary moves)\n      );\n      this$1._vnode = this$1.kept;\n      restoreActiveInstance();\n      update.call(this$1, vnode, hydrating);\n    };\n  },\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (true) {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (e && e.target !== el) {\n            return\n          }\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        true\n      ) {\n        console[console.info ? 'info' : 'log'](\n          'Download the Vue Devtools extension for a better development experience:\\n' +\n          'https://github.com/vuejs/vue-devtools'\n        );\n      }\n    }\n    if ( true &&\n      config.productionTip !== false &&\n      typeof console !== 'undefined'\n    ) {\n      console[console.info ? 'info' : 'log'](\n        \"You are running Vue in development mode.\\n\" +\n        \"Make sure to turn on production mode when deploying for production.\\n\" +\n        \"See more tips at https://vuejs.org/guide/deployment.html\"\n      );\n    }\n  }, 0);\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if ( true && staticClass) {\n    var res = parseText(staticClass, options.delimiters);\n    if (res) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.',\n        el.rawAttrsMap['class']\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (true) {\n      var res = parseText(staticStyle, options.delimiters);\n      if (res) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.',\n          el.rawAttrsMap['style']\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n};\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n};\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\nvar dynamicArgAttribute = /^\\s*((?:v-[\\w-]+:|@|:|#)\\[[^=]+\\][^\\s\"'<>\\/=]*)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\nvar ncname = \"[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z\" + (unicodeRegExp.source) + \"]*\";\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\n// #7298: escape - to avoid being pased as HTML comment when inlined in page\nvar comment = /^<!\\--/;\nvar conditionalComment = /^<!\\[/;\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t',\n  '&#39;': \"'\"\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n      }\n\n      if (text) {\n        advance(text.length);\n      }\n\n      if (options.chars && text) {\n        options.chars(text, index - text.length, index);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!\\--([\\s\\S]*?)-->/g, '$1') // #7298\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if ( true && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"), { start: index + html.length });\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {\n        attr.start = index;\n        advance(attr[0].length);\n        attr.end = index;\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n      if ( true && options.outputSourceRange) {\n        attrs[i].start = args.start + args[0].match(/^\\s*/).length;\n        attrs[i].end = args.end;\n      }\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if ( true &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\"),\n            { start: stack[i].start, end: stack[i].end }\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\nvar dynamicArgRE = /^\\[.*\\]$/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^\\.|^v-bind:/;\nvar modifierRE = /\\.[^.\\]]+(?=[^\\]]*$)/g;\n\nvar slotRE = /^v-slot(:|$)|^#/;\n\nvar lineBreakRE = /[\\r\\n]/;\nvar whitespaceRE$1 = /\\s+/g;\n\nvar invalidAttributeRE = /[\\s\"'<>\\/=]/;\n\nvar decodeHTMLCached = cached(he.decode);\n\nvar emptySlotScopeToken = \"_empty_\";\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\nvar maybeComponent;\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    rawAttrsMap: {},\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  var isReservedTag = options.isReservedTag || no;\n  maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var whitespaceOption = options.whitespace;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg, range) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg, range);\n    }\n  }\n\n  function closeElement (element) {\n    trimEndingWhitespace(element);\n    if (!inVPre && !element.processed) {\n      element = processElement(element, options);\n    }\n    // tree management\n    if (!stack.length && element !== root) {\n      // allow root elements with v-if, v-else-if and v-else\n      if (root.if && (element.elseif || element.else)) {\n        if (true) {\n          checkRootConstraints(element);\n        }\n        addIfCondition(root, {\n          exp: element.elseif,\n          block: element\n        });\n      } else if (true) {\n        warnOnce(\n          \"Component template should contain exactly one root element. \" +\n          \"If you are using v-if on multiple elements, \" +\n          \"use v-else-if to chain them instead.\",\n          { start: element.start }\n        );\n      }\n    }\n    if (currentParent && !element.forbidden) {\n      if (element.elseif || element.else) {\n        processIfConditions(element, currentParent);\n      } else {\n        if (element.slotScope) {\n          // scoped slot\n          // keep it in the children list so that v-else(-if) conditions can\n          // find it as the prev node.\n          var name = element.slotTarget || '\"default\"'\n          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        }\n        currentParent.children.push(element);\n        element.parent = currentParent;\n      }\n    }\n\n    // final children cleanup\n    // filter out scoped slots\n    element.children = element.children.filter(function (c) { return !(c).slotScope; });\n    // remove trailing whitespace node again\n    trimEndingWhitespace(element);\n\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  function trimEndingWhitespace (el) {\n    // remove trailing whitespace node\n    if (!inPre) {\n      var lastNode;\n      while (\n        (lastNode = el.children[el.children.length - 1]) &&\n        lastNode.type === 3 &&\n        lastNode.text === ' '\n      ) {\n        el.children.pop();\n      }\n    }\n  }\n\n  function checkRootConstraints (el) {\n    if (el.tag === 'slot' || el.tag === 'template') {\n      warnOnce(\n        \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n        'contain multiple nodes.',\n        { start: el.start }\n      );\n    }\n    if (el.attrsMap.hasOwnProperty('v-for')) {\n      warnOnce(\n        'Cannot use v-for on stateful component root element because ' +\n        'it renders multiple elements.',\n        el.rawAttrsMap['v-for']\n      );\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    outputSourceRange: options.outputSourceRange,\n    start: function start (tag, attrs, unary, start$1, end) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (true) {\n        if (options.outputSourceRange) {\n          element.start = start$1;\n          element.end = end;\n          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {\n            cumulated[attr.name] = attr;\n            return cumulated\n          }, {});\n        }\n        attrs.forEach(function (attr) {\n          if (invalidAttributeRE.test(attr.name)) {\n            warn$2(\n              \"Invalid dynamic argument expression: attribute names cannot contain \" +\n              \"spaces, quotes, <, >, / or =.\",\n              {\n                start: attr.start + attr.name.indexOf(\"[\"),\n                end: attr.start + attr.name.length\n              }\n            );\n          }\n        });\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n         true && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.',\n          { start: element.start }\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n      }\n\n      if (!root) {\n        root = element;\n        if (true) {\n          checkRootConstraints(root);\n        }\n      }\n\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end (tag, start, end$1) {\n      var element = stack[stack.length - 1];\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      if ( true && options.outputSourceRange) {\n        element.end = end$1;\n      }\n      closeElement(element);\n    },\n\n    chars: function chars (text, start, end) {\n      if (!currentParent) {\n        if (true) {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.',\n              { start: start }\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\"),\n              { start: start }\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      if (inPre || text.trim()) {\n        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);\n      } else if (!children.length) {\n        // remove the whitespace-only node right after an opening tag\n        text = '';\n      } else if (whitespaceOption) {\n        if (whitespaceOption === 'condense') {\n          // in condense mode, remove the whitespace node if it contains\n          // line break, otherwise condense to a single space\n          text = lineBreakRE.test(text) ? '' : ' ';\n        } else {\n          text = ' ';\n        }\n      } else {\n        text = preserveWhitespace ? ' ' : '';\n      }\n      if (text) {\n        if (!inPre && whitespaceOption === 'condense') {\n          // condense consecutive whitespaces into single space\n          text = text.replace(whitespaceRE$1, ' ');\n        }\n        var res;\n        var child;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          child = {\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          };\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          child = {\n            type: 3,\n            text: text\n          };\n        }\n        if (child) {\n          if ( true && options.outputSourceRange) {\n            child.start = start;\n            child.end = end;\n          }\n          children.push(child);\n        }\n      }\n    },\n    comment: function comment (text, start, end) {\n      // adding anyting as a sibling to the root node is forbidden\n      // comments should still be allowed, but ignored\n      if (currentParent) {\n        var child = {\n          type: 3,\n          text: text,\n          isComment: true\n        };\n        if ( true && options.outputSourceRange) {\n          child.start = start;\n          child.end = end;\n        }\n        currentParent.children.push(child);\n      }\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var list = el.attrsList;\n  var len = list.length;\n  if (len) {\n    var attrs = el.attrs = new Array(len);\n    for (var i = 0; i < len; i++) {\n      attrs[i] = {\n        name: list[i].name,\n        value: JSON.stringify(list[i].value)\n      };\n      if (list[i].start != null) {\n        attrs[i].start = list[i].start;\n        attrs[i].end = list[i].end;\n      }\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (\n  element,\n  options\n) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = (\n    !element.key &&\n    !element.scopedSlots &&\n    !element.attrsList.length\n  );\n\n  processRef(element);\n  processSlotContent(element);\n  processSlotOutlet(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n  return element\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (true) {\n      if (el.tag === 'template') {\n        warn$2(\n          \"<template> cannot be keyed. Place the key on real elements instead.\",\n          getRawBindingAttr(el, 'key')\n        );\n      }\n      if (el.for) {\n        var iterator = el.iterator2 || el.iterator1;\n        var parent = el.parent;\n        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {\n          warn$2(\n            \"Do not use v-for index as key on <transition-group> children, \" +\n            \"this is the same as not using keys.\",\n            getRawBindingAttr(el, 'key'),\n            true /* tip */\n          );\n        }\n      }\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else if (true) {\n      warn$2(\n        (\"Invalid v-for expression: \" + exp),\n        el.rawAttrsMap['v-for']\n      );\n    }\n  }\n}\n\n\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '').trim();\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (true) {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\",\n      el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if ( true && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\",\n          children[i]\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\n// handle content being passed to a component as slot,\n// e.g. <template slot=\"xxx\">, <div slot-scope=\"xxx\">\nfunction processSlotContent (el) {\n  var slotScope;\n  if (el.tag === 'template') {\n    slotScope = getAndRemoveAttr(el, 'scope');\n    /* istanbul ignore if */\n    if ( true && slotScope) {\n      warn$2(\n        \"the \\\"scope\\\" attribute for scoped slots have been deprecated and \" +\n        \"replaced by \\\"slot-scope\\\" since 2.5. The new \\\"slot-scope\\\" attribute \" +\n        \"can also be used on plain elements in addition to <template> to \" +\n        \"denote scoped slots.\",\n        el.rawAttrsMap['scope'],\n        true\n      );\n    }\n    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n    /* istanbul ignore if */\n    if ( true && el.attrsMap['v-for']) {\n      warn$2(\n        \"Ambiguous combined usage of slot-scope and v-for on <\" + (el.tag) + \"> \" +\n        \"(v-for takes higher priority). Use a wrapper <template> for the \" +\n        \"scoped slot to make it clearer.\",\n        el.rawAttrsMap['slot-scope'],\n        true\n      );\n    }\n    el.slotScope = slotScope;\n  }\n\n  // slot=\"xxx\"\n  var slotTarget = getBindingAttr(el, 'slot');\n  if (slotTarget) {\n    el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);\n    // preserve slot as an attribute for native shadow DOM compat\n    // only for non-scoped slots.\n    if (el.tag !== 'template' && !el.slotScope) {\n      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));\n    }\n  }\n\n  // 2.6 v-slot syntax\n  {\n    if (el.tag === 'template') {\n      // v-slot on <template>\n      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);\n      if (slotBinding) {\n        if (true) {\n          if (el.slotTarget || el.slotScope) {\n            warn$2(\n              \"Unexpected mixed usage of different slot syntaxes.\",\n              el\n            );\n          }\n          if (el.parent && !maybeComponent(el.parent)) {\n            warn$2(\n              \"<template v-slot> can only appear at the root level inside \" +\n              \"the receiving the component\",\n              el\n            );\n          }\n        }\n        var ref = getSlotName(slotBinding);\n        var name = ref.name;\n        var dynamic = ref.dynamic;\n        el.slotTarget = name;\n        el.slotTargetDynamic = dynamic;\n        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf\n      }\n    } else {\n      // v-slot on component, denotes default slot\n      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);\n      if (slotBinding$1) {\n        if (true) {\n          if (!maybeComponent(el)) {\n            warn$2(\n              \"v-slot can only be used on components or <template>.\",\n              slotBinding$1\n            );\n          }\n          if (el.slotScope || el.slotTarget) {\n            warn$2(\n              \"Unexpected mixed usage of different slot syntaxes.\",\n              el\n            );\n          }\n          if (el.scopedSlots) {\n            warn$2(\n              \"To avoid scope ambiguity, the default slot should also use \" +\n              \"<template> syntax when there are other named slots.\",\n              slotBinding$1\n            );\n          }\n        }\n        // add the component's children to its default slot\n        var slots = el.scopedSlots || (el.scopedSlots = {});\n        var ref$1 = getSlotName(slotBinding$1);\n        var name$1 = ref$1.name;\n        var dynamic$1 = ref$1.dynamic;\n        var slotContainer = slots[name$1] = createASTElement('template', [], el);\n        slotContainer.slotTarget = name$1;\n        slotContainer.slotTargetDynamic = dynamic$1;\n        slotContainer.children = el.children.filter(function (c) {\n          if (!c.slotScope) {\n            c.parent = slotContainer;\n            return true\n          }\n        });\n        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;\n        // remove children as they are returned from scopedSlots now\n        el.children = [];\n        // mark el non-plain so data gets generated\n        el.plain = false;\n      }\n    }\n  }\n}\n\nfunction getSlotName (binding) {\n  var name = binding.name.replace(slotRE, '');\n  if (!name) {\n    if (binding.name[0] !== '#') {\n      name = 'default';\n    } else if (true) {\n      warn$2(\n        \"v-slot shorthand syntax requires a slot name.\",\n        binding\n      );\n    }\n  }\n  return dynamicArgRE.test(name)\n    // dynamic [name]\n    ? { name: name.slice(1, -1), dynamic: true }\n    // static name\n    : { name: (\"\\\"\" + name + \"\\\"\"), dynamic: false }\n}\n\n// handle <slot/> outlets\nfunction processSlotOutlet (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if ( true && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\",\n        getRawBindingAttr(el, 'key')\n      );\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name.replace(dirRE, ''));\n      // support .foo shorthand syntax for the .prop modifier\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isDynamic = dynamicArgRE.test(name);\n        if (isDynamic) {\n          name = name.slice(1, -1);\n        }\n        if (\n           true &&\n          value.trim().length === 0\n        ) {\n          warn$2(\n            (\"The value for a v-bind expression cannot be empty. Found in \\\"v-bind:\" + name + \"\\\"\")\n          );\n        }\n        if (modifiers) {\n          if (modifiers.prop && !isDynamic) {\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel && !isDynamic) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            syncGen = genAssignmentCode(value, \"$event\");\n            if (!isDynamic) {\n              addHandler(\n                el,\n                (\"update:\" + (camelize(name))),\n                syncGen,\n                null,\n                false,\n                warn$2,\n                list[i]\n              );\n              if (hyphenate(name) !== camelize(name)) {\n                addHandler(\n                  el,\n                  (\"update:\" + (hyphenate(name))),\n                  syncGen,\n                  null,\n                  false,\n                  warn$2,\n                  list[i]\n                );\n              }\n            } else {\n              // handler w/ dynamic event name\n              addHandler(\n                el,\n                (\"\\\"update:\\\"+(\" + name + \")\"),\n                syncGen,\n                null,\n                false,\n                warn$2,\n                list[i],\n                true // dynamic\n              );\n            }\n          }\n        }\n        if ((modifiers && modifiers.prop) || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value, list[i], isDynamic);\n        } else {\n          addAttr(el, name, value, list[i], isDynamic);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        isDynamic = dynamicArgRE.test(name);\n        if (isDynamic) {\n          name = name.slice(1, -1);\n        }\n        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        isDynamic = false;\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n          if (dynamicArgRE.test(arg)) {\n            arg = arg.slice(1, -1);\n            isDynamic = true;\n          }\n        }\n        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);\n        if ( true && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (true) {\n        var res = parseText(value, delimiters);\n        if (res) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.',\n            list[i]\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value), list[i]);\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true', list[i]);\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n       true &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\",\n        el.rawAttrsMap['v-model']\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (!map['v-model']) {\n      return\n    }\n\n    var typeBinding;\n    if (map[':type'] || map['v-bind:type']) {\n      typeBinding = getBindingAttr(el, 'type');\n    }\n    if (!map.type && !typeBinding && map['v-bind']) {\n      typeBinding = \"(\" + (map['v-bind']) + \").type\";\n    }\n\n    if (typeBinding) {\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$1 = {\n  preTransformNode: preTransformNode\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$1\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"), dir);\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"), dir);\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*(?:[\\w$]+)?\\s*\\(/;\nvar fnInvokeRE = /\\([^)]*?\\);*$/;\nvar simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n\n// KeyboardEvent.keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// KeyboardEvent.key aliases\nvar keyNames = {\n  // #7880: IE11 and Edge use `Esc` for Escape key name.\n  esc: ['Esc', 'Escape'],\n  tab: 'Tab',\n  enter: 'Enter',\n  // #9112: IE11 uses `Spacebar` for Space key name.\n  space: [' ', 'Spacebar'],\n  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  // #9112: IE11 uses `Del` for Delete key name.\n  'delete': ['Backspace', 'Delete', 'Del']\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative\n) {\n  var prefix = isNative ? 'nativeOn:' : 'on:';\n  var staticHandlers = \"\";\n  var dynamicHandlers = \"\";\n  for (var name in events) {\n    var handlerCode = genHandler(events[name]);\n    if (events[name] && events[name].dynamic) {\n      dynamicHandlers += name + \",\" + handlerCode + \",\";\n    } else {\n      staticHandlers += \"\\\"\" + name + \"\\\":\" + handlerCode + \",\";\n    }\n  }\n  staticHandlers = \"{\" + (staticHandlers.slice(0, -1)) + \"}\";\n  if (dynamicHandlers) {\n    return prefix + \"_d(\" + staticHandlers + \",[\" + (dynamicHandlers.slice(0, -1)) + \"])\"\n  } else {\n    return prefix + staticHandlers\n  }\n}\n\nfunction genHandler (handler) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    return (\"function($event){\" + (isFunctionInvocation ? (\"return \" + (handler.value)) : handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? (\"return \" + (handler.value) + \"($event)\")\n      : isFunctionExpression\n        ? (\"return (\" + (handler.value) + \")($event)\")\n        : isFunctionInvocation\n          ? (\"return \" + (handler.value))\n          : handler.value;\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\n    // make sure the key filters only apply to KeyboardEvents\n    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake\n    // key events that do not have keyCode property...\n    \"if(!$event.type.indexOf('key')&&\" +\n    (keys.map(genFilterCode).join('&&')) + \")return null;\"\n  )\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var keyCode = keyCodes[key];\n  var keyName = keyNames[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(keyCode)) + \",\" +\n    \"$event.key,\" +\n    \"\" + (JSON.stringify(keyName)) +\n    \")\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if ( true && dir.modifiers) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\n\n\n\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n  this.pre = false;\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.parent) {\n    el.pre = el.pre || el.parent.pre;\n  }\n\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data;\n      if (!el.plain || (el.pre && state.maybeComponent(el))) {\n        data = genData$2(el, state);\n      }\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  // Some elements (templates) need to behave differently inside of a v-pre\n  // node.  All pre nodes are static roots, so we can use this as a location to\n  // wrap a state change and reset it upon exiting the pre node.\n  var originalPreState = state.pre;\n  if (el.pre) {\n    state.pre = el.pre;\n  }\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  state.pre = originalPreState;\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n       true && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \",\n        el.rawAttrsMap['v-once']\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if ( true &&\n    state.maybeComponent(el) &&\n    el.tag !== 'slot' &&\n    el.tag !== 'template' &&\n    !el.key\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      el.rawAttrsMap['v-for'],\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:\" + (genProps(el.attrs)) + \",\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:\" + (genProps(el.props)) + \",\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el, el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind dynamic argument wrap\n  // v-bind with dynamic arguments must be applied using the same v-bind object\n  // merge helper so that class/style/mustUseProp attrs are handled correctly.\n  if (el.dynamicAttrs) {\n    data = \"_b(\" + data + \",\\\"\" + (el.tag) + \"\\\",\" + (genProps(el.dynamicAttrs)) + \")\";\n  }\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\" + (dir.isDynamicArg ? dir.arg : (\"\\\"\" + (dir.arg) + \"\\\"\"))) : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if ( true && (\n    el.children.length !== 1 || ast.type !== 1\n  )) {\n    state.warn(\n      'Inline-template components must have exactly one child element.',\n      { start: el.start }\n    );\n  }\n  if (ast && ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  el,\n  slots,\n  state\n) {\n  // by default scoped slots are considered \"stable\", this allows child\n  // components with only scoped slots to skip forced updates from parent.\n  // but in some cases we have to bail-out of this optimization\n  // for example if the slot contains dynamic names, has v-if or v-for on them...\n  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {\n    var slot = slots[key];\n    return (\n      slot.slotTargetDynamic ||\n      slot.if ||\n      slot.for ||\n      containsSlotChild(slot) // is passing down slot from parent which may be dynamic\n    )\n  });\n\n  // #9534: if a component with scoped slots is inside a conditional branch,\n  // it's possible for the same component to be reused but with different\n  // compiled slot content. To avoid that, we generate a unique key based on\n  // the generated code of all the slot contents.\n  var needsKey = !!el.if;\n\n  // OR when it is inside another scoped slot or v-for (the reactivity may be\n  // disconnected due to the intermediate scope variable)\n  // #9438, #9506\n  // TODO: this can be further optimized by properly analyzing in-scope bindings\n  // and skip force updating ones that do not actually use scope variables.\n  if (!needsForceUpdate) {\n    var parent = el.parent;\n    while (parent) {\n      if (\n        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||\n        parent.for\n      ) {\n        needsForceUpdate = true;\n        break\n      }\n      if (parent.if) {\n        needsKey = true;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  var generatedSlots = Object.keys(slots)\n    .map(function (key) { return genScopedSlot(slots[key], state); })\n    .join(',');\n\n  return (\"scopedSlots:_u([\" + generatedSlots + \"]\" + (needsForceUpdate ? \",null,true\" : \"\") + (!needsForceUpdate && needsKey ? (\",null,false,\" + (hash(generatedSlots))) : \"\") + \")\")\n}\n\nfunction hash(str) {\n  var hash = 5381;\n  var i = str.length;\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n  return hash >>> 0\n}\n\nfunction containsSlotChild (el) {\n  if (el.type === 1) {\n    if (el.tag === 'slot') {\n      return true\n    }\n    return el.children.some(containsSlotChild)\n  }\n  return false\n}\n\nfunction genScopedSlot (\n  el,\n  state\n) {\n  var isLegacySyntax = el.attrsMap['slot-scope'];\n  if (el.if && !el.ifProcessed && !isLegacySyntax) {\n    return genIf(el, state, genScopedSlot, \"null\")\n  }\n  if (el.for && !el.forProcessed) {\n    return genFor(el, state, genScopedSlot)\n  }\n  var slotScope = el.slotScope === emptySlotScopeToken\n    ? \"\"\n    : String(el.slotScope);\n  var fn = \"function(\" + slotScope + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if && isLegacySyntax\n        ? (\"(\" + (el.if) + \")?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  // reverse proxy v-slot without scope on this.$slots\n  var reverseProxy = slotScope ? \"\" : \",proxy:true\";\n  return (\"{key:\" + (el.slotTarget || \"\\\"default\\\"\") + \",fn:\" + fn + reverseProxy + \"}\")\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      var normalizationType = checkSkip\n        ? state.maybeComponent(el$1) ? \",1\" : \",0\"\n        : \"\";\n      return (\"\" + ((altGenElement || genElement)(el$1, state)) + normalizationType)\n    }\n    var normalizationType$1 = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType$1 ? (\",\" + normalizationType$1) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } else if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs || el.dynamicAttrs\n    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({\n        // slot props are camelized\n        name: camelize(attr.name),\n        value: attr.value,\n        dynamic: attr.dynamic\n      }); }))\n    : null;\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var staticProps = \"\";\n  var dynamicProps = \"\";\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    var value = transformSpecialNewlines(prop.value);\n    if (prop.dynamic) {\n      dynamicProps += (prop.name) + \",\" + value + \",\";\n    } else {\n      staticProps += \"\\\"\" + (prop.name) + \"\\\":\" + value + \",\";\n    }\n  }\n  staticProps = \"{\" + (staticProps.slice(0, -1)) + \"}\";\n  if (dynamicProps) {\n    return (\"_d(\" + staticProps + \",[\" + (dynamicProps.slice(0, -1)) + \"])\")\n  } else {\n    return staticProps\n  }\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast, warn) {\n  if (ast) {\n    checkNode(ast, warn);\n  }\n}\n\nfunction checkNode (node, warn) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          var range = node.rawAttrsMap[name];\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), warn, range);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], warn);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, warn, node);\n  }\n}\n\nfunction checkEvent (exp, text, warn, range) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    warn(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim()),\n      range\n    );\n  }\n  checkExpression(exp, text, warn, range);\n}\n\nfunction checkFor (node, text, warn, range) {\n  checkExpression(node.for || '', text, warn, range);\n  checkIdentifier(node.alias, 'v-for alias', text, warn, range);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  warn,\n  range\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      warn((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())), range);\n    }\n  }\n}\n\nfunction checkExpression (exp, text, warn, range) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      warn(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim()),\n        range\n      );\n    } else {\n      warn(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\",\n        range\n      );\n    }\n  }\n}\n\n/*  */\n\nvar range = 2;\n\nfunction generateCodeFrame (\n  source,\n  start,\n  end\n) {\n  if ( start === void 0 ) start = 0;\n  if ( end === void 0 ) end = source.length;\n\n  var lines = source.split(/\\r?\\n/);\n  var count = 0;\n  var res = [];\n  for (var i = 0; i < lines.length; i++) {\n    count += lines[i].length + 1;\n    if (count >= start) {\n      for (var j = i - range; j <= i + range || end > count; j++) {\n        if (j < 0 || j >= lines.length) { continue }\n        res.push((\"\" + (j + 1) + (repeat$1(\" \", 3 - String(j + 1).length)) + \"|  \" + (lines[j])));\n        var lineLength = lines[j].length;\n        if (j === i) {\n          // push underline\n          var pad = start - (count - lineLength) + 1;\n          var length = end > count ? lineLength - pad : end - start;\n          res.push(\"   |  \" + repeat$1(\" \", pad) + repeat$1(\"^\", length));\n        } else if (j > i) {\n          if (end > count) {\n            var length$1 = Math.min(end - count, lineLength);\n            res.push(\"   |  \" + repeat$1(\"^\", length$1));\n          }\n          count += lineLength + 1;\n        }\n      }\n      break\n    }\n  }\n  return res.join('\\n')\n}\n\nfunction repeat$1 (str, n) {\n  var result = '';\n  if (n > 0) {\n    while (true) { // eslint-disable-line\n      if (n & 1) { result += str; }\n      n >>>= 1;\n      if (n <= 0) { break }\n      str += str;\n    }\n  }\n  return result\n}\n\n/*  */\n\n\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    if (true) {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn$$1(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (true) {\n      if (compiled.errors && compiled.errors.length) {\n        if (options.outputSourceRange) {\n          compiled.errors.forEach(function (e) {\n            warn$$1(\n              \"Error compiling template:\\n\\n\" + (e.msg) + \"\\n\\n\" +\n              generateCodeFrame(template, e.start, e.end),\n              vm\n            );\n          });\n        } else {\n          warn$$1(\n            \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n            compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n            vm\n          );\n        }\n      }\n      if (compiled.tips && compiled.tips.length) {\n        if (options.outputSourceRange) {\n          compiled.tips.forEach(function (e) { return tip(e.msg, vm); });\n        } else {\n          compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n        }\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (true) {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn$$1(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n\n      var warn = function (msg, range, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        if ( true && options.outputSourceRange) {\n          // $flow-disable-line\n          var leadingSpaceLength = template.match(/^\\s*/)[0].length;\n\n          warn = function (msg, range, tip) {\n            var data = { msg: msg };\n            if (range) {\n              if (range.start != null) {\n                data.start = range.start + leadingSpaceLength;\n              }\n              if (range.end != null) {\n                data.end = range.end + leadingSpaceLength;\n              }\n            }\n            (tip ? tips : errors).push(data);\n          };\n        }\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      finalOptions.warn = warn;\n\n      var compiled = baseCompile(template.trim(), finalOptions);\n      if (true) {\n        detectErrors(compiled.ast, warn);\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compile = ref$1.compile;\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue.prototype.$mount;\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n     true && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if ( true && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (true) {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if ( true && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        outputSourceRange: \"development\" !== 'production',\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if ( true && config.performance && mark) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate))\n\n//# sourceURL=webpack:///./node_modules/vue/dist/vue.esm.js?");

/***/ }),

/***/ "./node_modules/vuedraggable/dist/vuedraggable.common.js":
/*!***************************************************************!*\
  !*** ./node_modules/vuedraggable/dist/vuedraggable.common.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"fb15\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"02f4\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toInteger = __webpack_require__(\"4588\");\nvar defined = __webpack_require__(\"be13\");\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\n\n/***/ }),\n\n/***/ \"0390\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar at = __webpack_require__(\"02f4\")(true);\n\n // `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? at(S, index).length : 1);\n};\n\n\n/***/ }),\n\n/***/ \"07e3\":\n/***/ (function(module, exports) {\n\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n/***/ }),\n\n/***/ \"0bfb\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = __webpack_require__(\"cb7c\");\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n\n\n/***/ }),\n\n/***/ \"0fc9\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toInteger = __webpack_require__(\"3a38\");\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n\n/***/ }),\n\n/***/ \"1654\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $at = __webpack_require__(\"71c1\")(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n__webpack_require__(\"30f1\")(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\n\n/***/ }),\n\n/***/ \"1691\":\n/***/ (function(module, exports) {\n\n// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n\n/***/ }),\n\n/***/ \"1af6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = __webpack_require__(\"63b6\");\n\n$export($export.S, 'Array', { isArray: __webpack_require__(\"9003\") });\n\n\n/***/ }),\n\n/***/ \"1bc3\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(\"f772\");\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n/***/ }),\n\n/***/ \"1ec9\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(\"f772\");\nvar document = __webpack_require__(\"e53d\").document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n/***/ }),\n\n/***/ \"20fd\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $defineProperty = __webpack_require__(\"d9f6\");\nvar createDesc = __webpack_require__(\"aebd\");\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n\n\n/***/ }),\n\n/***/ \"214f\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n__webpack_require__(\"b0c5\");\nvar redefine = __webpack_require__(\"2aba\");\nvar hide = __webpack_require__(\"32e9\");\nvar fails = __webpack_require__(\"79e5\");\nvar defined = __webpack_require__(\"be13\");\nvar wks = __webpack_require__(\"2b4c\");\nvar regexpExec = __webpack_require__(\"520a\");\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n\n\n/***/ }),\n\n/***/ \"230e\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(\"d3f4\");\nvar document = __webpack_require__(\"7726\").document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n/***/ }),\n\n/***/ \"23c6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(\"2d95\");\nvar TAG = __webpack_require__(\"2b4c\")('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n\n/***/ }),\n\n/***/ \"241e\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(\"25eb\");\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n\n\n/***/ }),\n\n/***/ \"25eb\":\n/***/ (function(module, exports) {\n\n// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"294c\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n/***/ }),\n\n/***/ \"2aba\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(\"7726\");\nvar hide = __webpack_require__(\"32e9\");\nvar has = __webpack_require__(\"69a8\");\nvar SRC = __webpack_require__(\"ca5a\")('src');\nvar $toString = __webpack_require__(\"fa5b\");\nvar TO_STRING = 'toString';\nvar TPL = ('' + $toString).split(TO_STRING);\n\n__webpack_require__(\"8378\").inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n\n\n/***/ }),\n\n/***/ \"2b4c\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar store = __webpack_require__(\"5537\")('wks');\nvar uid = __webpack_require__(\"ca5a\");\nvar Symbol = __webpack_require__(\"7726\").Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n\n\n/***/ }),\n\n/***/ \"2d00\":\n/***/ (function(module, exports) {\n\nmodule.exports = false;\n\n\n/***/ }),\n\n/***/ \"2d95\":\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n\n/***/ }),\n\n/***/ \"2fdb\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n\nvar $export = __webpack_require__(\"5ca1\");\nvar context = __webpack_require__(\"d2c8\");\nvar INCLUDES = 'includes';\n\n$export($export.P + $export.F * __webpack_require__(\"5147\")(INCLUDES), 'String', {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"30f1\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar LIBRARY = __webpack_require__(\"b8e3\");\nvar $export = __webpack_require__(\"63b6\");\nvar redefine = __webpack_require__(\"9138\");\nvar hide = __webpack_require__(\"35e8\");\nvar Iterators = __webpack_require__(\"481b\");\nvar $iterCreate = __webpack_require__(\"8f60\");\nvar setToStringTag = __webpack_require__(\"45f2\");\nvar getPrototypeOf = __webpack_require__(\"53e2\");\nvar ITERATOR = __webpack_require__(\"5168\")('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\n\n/***/ }),\n\n/***/ \"32a6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.14 Object.keys(O)\nvar toObject = __webpack_require__(\"241e\");\nvar $keys = __webpack_require__(\"c3a1\");\n\n__webpack_require__(\"ce7e\")('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n\n\n/***/ }),\n\n/***/ \"32e9\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP = __webpack_require__(\"86cc\");\nvar createDesc = __webpack_require__(\"4630\");\nmodule.exports = __webpack_require__(\"9e1e\") ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n/***/ }),\n\n/***/ \"32fc\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar document = __webpack_require__(\"e53d\").document;\nmodule.exports = document && document.documentElement;\n\n\n/***/ }),\n\n/***/ \"335c\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(\"6b4c\");\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n\n/***/ }),\n\n/***/ \"355d\":\n/***/ (function(module, exports) {\n\nexports.f = {}.propertyIsEnumerable;\n\n\n/***/ }),\n\n/***/ \"35e8\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP = __webpack_require__(\"d9f6\");\nvar createDesc = __webpack_require__(\"aebd\");\nmodule.exports = __webpack_require__(\"8e60\") ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n/***/ }),\n\n/***/ \"36c3\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(\"335c\");\nvar defined = __webpack_require__(\"25eb\");\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n\n\n/***/ }),\n\n/***/ \"3702\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// check on default Array iterator\nvar Iterators = __webpack_require__(\"481b\");\nvar ITERATOR = __webpack_require__(\"5168\")('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n\n\n/***/ }),\n\n/***/ \"3a38\":\n/***/ (function(module, exports) {\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n\n/***/ }),\n\n/***/ \"40c3\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(\"6b4c\");\nvar TAG = __webpack_require__(\"5168\")('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n\n/***/ }),\n\n/***/ \"4588\":\n/***/ (function(module, exports) {\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n\n/***/ }),\n\n/***/ \"45f2\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar def = __webpack_require__(\"d9f6\").f;\nvar has = __webpack_require__(\"07e3\");\nvar TAG = __webpack_require__(\"5168\")('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\n\n/***/ }),\n\n/***/ \"4630\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n/***/ }),\n\n/***/ \"469f\":\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"6c1c\");\n__webpack_require__(\"1654\");\nmodule.exports = __webpack_require__(\"7d7b\");\n\n\n/***/ }),\n\n/***/ \"481b\":\n/***/ (function(module, exports) {\n\nmodule.exports = {};\n\n\n/***/ }),\n\n/***/ \"4aa6\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"dc62\");\n\n/***/ }),\n\n/***/ \"4bf8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(\"be13\");\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n\n\n/***/ }),\n\n/***/ \"4ee1\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ITERATOR = __webpack_require__(\"5168\")('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n\n\n/***/ }),\n\n/***/ \"50ed\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n\n\n/***/ }),\n\n/***/ \"5147\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar MATCH = __webpack_require__(\"2b4c\")('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n\n\n/***/ }),\n\n/***/ \"5168\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar store = __webpack_require__(\"dbdb\")('wks');\nvar uid = __webpack_require__(\"62a0\");\nvar Symbol = __webpack_require__(\"e53d\").Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n\n\n/***/ }),\n\n/***/ \"5176\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"51b6\");\n\n/***/ }),\n\n/***/ \"51b6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"a3c3\");\nmodule.exports = __webpack_require__(\"584a\").Object.assign;\n\n\n/***/ }),\n\n/***/ \"520a\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar regexpFlags = __webpack_require__(\"0bfb\");\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar LAST_INDEX = 'lastIndex';\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/,\n      re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n})();\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n\n    match = nativeExec.call(re, str);\n\n    if (UPDATES_LAST_INDEX_WRONG && match) {\n      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      // eslint-disable-next-line no-loop-func\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n\n\n/***/ }),\n\n/***/ \"53e2\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = __webpack_require__(\"07e3\");\nvar toObject = __webpack_require__(\"241e\");\nvar IE_PROTO = __webpack_require__(\"5559\")('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\n\n/***/ }),\n\n/***/ \"549b\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar ctx = __webpack_require__(\"d864\");\nvar $export = __webpack_require__(\"63b6\");\nvar toObject = __webpack_require__(\"241e\");\nvar call = __webpack_require__(\"b0dc\");\nvar isArrayIter = __webpack_require__(\"3702\");\nvar toLength = __webpack_require__(\"b447\");\nvar createProperty = __webpack_require__(\"20fd\");\nvar getIterFn = __webpack_require__(\"7cd6\");\n\n$export($export.S + $export.F * !__webpack_require__(\"4ee1\")(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"54a1\":\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"6c1c\");\n__webpack_require__(\"1654\");\nmodule.exports = __webpack_require__(\"95d5\");\n\n\n/***/ }),\n\n/***/ \"5537\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar core = __webpack_require__(\"8378\");\nvar global = __webpack_require__(\"7726\");\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: __webpack_require__(\"2d00\") ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n\n\n/***/ }),\n\n/***/ \"5559\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar shared = __webpack_require__(\"dbdb\")('keys');\nvar uid = __webpack_require__(\"62a0\");\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n\n\n/***/ }),\n\n/***/ \"584a\":\n/***/ (function(module, exports) {\n\nvar core = module.exports = { version: '2.6.5' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n/***/ }),\n\n/***/ \"5b4e\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(\"36c3\");\nvar toLength = __webpack_require__(\"b447\");\nvar toAbsoluteIndex = __webpack_require__(\"0fc9\");\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n\n/***/ }),\n\n/***/ \"5ca1\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(\"7726\");\nvar core = __webpack_require__(\"8378\");\nvar hide = __webpack_require__(\"32e9\");\nvar redefine = __webpack_require__(\"2aba\");\nvar ctx = __webpack_require__(\"9b43\");\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n/***/ }),\n\n/***/ \"5d73\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"469f\");\n\n/***/ }),\n\n/***/ \"5f1b\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar classof = __webpack_require__(\"23c6\");\nvar builtinExec = RegExp.prototype.exec;\n\n // `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw new TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n  if (classof(R) !== 'RegExp') {\n    throw new TypeError('RegExp#exec called on incompatible receiver');\n  }\n  return builtinExec.call(R, S);\n};\n\n\n/***/ }),\n\n/***/ \"626a\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(\"2d95\");\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n\n/***/ }),\n\n/***/ \"62a0\":\n/***/ (function(module, exports) {\n\nvar id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n\n/***/ }),\n\n/***/ \"63b6\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(\"e53d\");\nvar core = __webpack_require__(\"584a\");\nvar ctx = __webpack_require__(\"d864\");\nvar hide = __webpack_require__(\"35e8\");\nvar has = __webpack_require__(\"07e3\");\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && has(exports, key)) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n/***/ }),\n\n/***/ \"6762\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// https://github.com/tc39/Array.prototype.includes\nvar $export = __webpack_require__(\"5ca1\");\nvar $includes = __webpack_require__(\"c366\")(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n__webpack_require__(\"9c6c\")('includes');\n\n\n/***/ }),\n\n/***/ \"6821\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(\"626a\");\nvar defined = __webpack_require__(\"be13\");\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n\n\n/***/ }),\n\n/***/ \"69a8\":\n/***/ (function(module, exports) {\n\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n/***/ }),\n\n/***/ \"6a99\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(\"d3f4\");\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n/***/ }),\n\n/***/ \"6b4c\":\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n\n/***/ }),\n\n/***/ \"6c1c\":\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"c367\");\nvar global = __webpack_require__(\"e53d\");\nvar hide = __webpack_require__(\"35e8\");\nvar Iterators = __webpack_require__(\"481b\");\nvar TO_STRING_TAG = __webpack_require__(\"5168\")('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n\n\n/***/ }),\n\n/***/ \"71c1\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toInteger = __webpack_require__(\"3a38\");\nvar defined = __webpack_require__(\"25eb\");\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\n\n/***/ }),\n\n/***/ \"7726\":\n/***/ (function(module, exports) {\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n/***/ }),\n\n/***/ \"774e\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"d2d5\");\n\n/***/ }),\n\n/***/ \"77f1\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toInteger = __webpack_require__(\"4588\");\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n\n/***/ }),\n\n/***/ \"794b\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = !__webpack_require__(\"8e60\") && !__webpack_require__(\"294c\")(function () {\n  return Object.defineProperty(__webpack_require__(\"1ec9\")('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n\n/***/ \"79aa\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"79e5\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n/***/ }),\n\n/***/ \"7cd6\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar classof = __webpack_require__(\"40c3\");\nvar ITERATOR = __webpack_require__(\"5168\")('iterator');\nvar Iterators = __webpack_require__(\"481b\");\nmodule.exports = __webpack_require__(\"584a\").getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n\n\n/***/ }),\n\n/***/ \"7d7b\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject = __webpack_require__(\"e4ae\");\nvar get = __webpack_require__(\"7cd6\");\nmodule.exports = __webpack_require__(\"584a\").getIterator = function (it) {\n  var iterFn = get(it);\n  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');\n  return anObject(iterFn.call(it));\n};\n\n\n/***/ }),\n\n/***/ \"7e90\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP = __webpack_require__(\"d9f6\");\nvar anObject = __webpack_require__(\"e4ae\");\nvar getKeys = __webpack_require__(\"c3a1\");\n\nmodule.exports = __webpack_require__(\"8e60\") ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\n\n/***/ }),\n\n/***/ \"8378\":\n/***/ (function(module, exports) {\n\nvar core = module.exports = { version: '2.6.5' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n/***/ }),\n\n/***/ \"8436\":\n/***/ (function(module, exports) {\n\nmodule.exports = function () { /* empty */ };\n\n\n/***/ }),\n\n/***/ \"86cc\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject = __webpack_require__(\"cb7c\");\nvar IE8_DOM_DEFINE = __webpack_require__(\"c69a\");\nvar toPrimitive = __webpack_require__(\"6a99\");\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(\"9e1e\") ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n/***/ }),\n\n/***/ \"8aae\":\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"32a6\");\nmodule.exports = __webpack_require__(\"584a\").Object.keys;\n\n\n/***/ }),\n\n/***/ \"8e60\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(\"294c\")(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n\n/***/ \"8f60\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar create = __webpack_require__(\"a159\");\nvar descriptor = __webpack_require__(\"aebd\");\nvar setToStringTag = __webpack_require__(\"45f2\");\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__webpack_require__(\"35e8\")(IteratorPrototype, __webpack_require__(\"5168\")('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n\n/***/ }),\n\n/***/ \"9003\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.2.2 IsArray(argument)\nvar cof = __webpack_require__(\"6b4c\");\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n\n\n/***/ }),\n\n/***/ \"9138\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"35e8\");\n\n\n/***/ }),\n\n/***/ \"9306\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = __webpack_require__(\"c3a1\");\nvar gOPS = __webpack_require__(\"9aa9\");\nvar pIE = __webpack_require__(\"355d\");\nvar toObject = __webpack_require__(\"241e\");\nvar IObject = __webpack_require__(\"335c\");\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || __webpack_require__(\"294c\")(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n\n\n/***/ }),\n\n/***/ \"9427\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(\"63b6\");\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: __webpack_require__(\"a159\") });\n\n\n/***/ }),\n\n/***/ \"95d5\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar classof = __webpack_require__(\"40c3\");\nvar ITERATOR = __webpack_require__(\"5168\")('iterator');\nvar Iterators = __webpack_require__(\"481b\");\nmodule.exports = __webpack_require__(\"584a\").isIterable = function (it) {\n  var O = Object(it);\n  return O[ITERATOR] !== undefined\n    || '@@iterator' in O\n    // eslint-disable-next-line no-prototype-builtins\n    || Iterators.hasOwnProperty(classof(O));\n};\n\n\n/***/ }),\n\n/***/ \"9aa9\":\n/***/ (function(module, exports) {\n\nexports.f = Object.getOwnPropertySymbols;\n\n\n/***/ }),\n\n/***/ \"9b43\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// optional / simple context binding\nvar aFunction = __webpack_require__(\"d8e8\");\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n/***/ }),\n\n/***/ \"9c6c\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = __webpack_require__(\"2b4c\")('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(\"32e9\")(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n\n\n/***/ }),\n\n/***/ \"9def\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.15 ToLength\nvar toInteger = __webpack_require__(\"4588\");\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n\n/***/ }),\n\n/***/ \"9e1e\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(\"79e5\")(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n\n/***/ \"a159\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = __webpack_require__(\"e4ae\");\nvar dPs = __webpack_require__(\"7e90\");\nvar enumBugKeys = __webpack_require__(\"1691\");\nvar IE_PROTO = __webpack_require__(\"5559\")('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __webpack_require__(\"1ec9\")('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  __webpack_require__(\"32fc\").appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\n\n/***/ }),\n\n/***/ \"a352\":\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! sortablejs */ \"./node_modules/sortablejs/Sortable.js\");\n\n/***/ }),\n\n/***/ \"a3c3\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.3.1 Object.assign(target, source)\nvar $export = __webpack_require__(\"63b6\");\n\n$export($export.S + $export.F, 'Object', { assign: __webpack_require__(\"9306\") });\n\n\n/***/ }),\n\n/***/ \"a481\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar anObject = __webpack_require__(\"cb7c\");\nvar toObject = __webpack_require__(\"4bf8\");\nvar toLength = __webpack_require__(\"9def\");\nvar toInteger = __webpack_require__(\"4588\");\nvar advanceStringIndex = __webpack_require__(\"0390\");\nvar regExpExec = __webpack_require__(\"5f1b\");\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\n__webpack_require__(\"214f\")('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = defined(this);\n      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return fn !== undefined\n        ? fn.call(searchValue, O, replaceValue)\n        : $replace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative($replace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n    // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return $replace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n\n\n/***/ }),\n\n/***/ \"a4bb\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"8aae\");\n\n/***/ }),\n\n/***/ \"a745\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"f410\");\n\n/***/ }),\n\n/***/ \"aae3\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.2.8 IsRegExp(argument)\nvar isObject = __webpack_require__(\"d3f4\");\nvar cof = __webpack_require__(\"2d95\");\nvar MATCH = __webpack_require__(\"2b4c\")('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n\n\n/***/ }),\n\n/***/ \"aebd\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n/***/ }),\n\n/***/ \"b0c5\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar regexpExec = __webpack_require__(\"520a\");\n__webpack_require__(\"5ca1\")({\n  target: 'RegExp',\n  proto: true,\n  forced: regexpExec !== /./.exec\n}, {\n  exec: regexpExec\n});\n\n\n/***/ }),\n\n/***/ \"b0dc\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// call something on iterator step with safe closing on error\nvar anObject = __webpack_require__(\"e4ae\");\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n\n\n/***/ }),\n\n/***/ \"b447\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.15 ToLength\nvar toInteger = __webpack_require__(\"3a38\");\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n\n/***/ }),\n\n/***/ \"b8e3\":\n/***/ (function(module, exports) {\n\nmodule.exports = true;\n\n\n/***/ }),\n\n/***/ \"be13\":\n/***/ (function(module, exports) {\n\n// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"c366\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(\"6821\");\nvar toLength = __webpack_require__(\"9def\");\nvar toAbsoluteIndex = __webpack_require__(\"77f1\");\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n\n/***/ }),\n\n/***/ \"c367\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar addToUnscopables = __webpack_require__(\"8436\");\nvar step = __webpack_require__(\"50ed\");\nvar Iterators = __webpack_require__(\"481b\");\nvar toIObject = __webpack_require__(\"36c3\");\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = __webpack_require__(\"30f1\")(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n\n/***/ }),\n\n/***/ \"c3a1\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = __webpack_require__(\"e6f3\");\nvar enumBugKeys = __webpack_require__(\"1691\");\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n\n\n/***/ }),\n\n/***/ \"c649\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return insertNodeAt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return camelize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return console; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return removeNode; });\n/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"a481\");\n/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var F_source_vuedraggable_node_modules_babel_runtime_corejs2_core_js_object_create__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"4aa6\");\n/* harmony import */ var F_source_vuedraggable_node_modules_babel_runtime_corejs2_core_js_object_create__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(F_source_vuedraggable_node_modules_babel_runtime_corejs2_core_js_object_create__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nfunction getConsole() {\n  if (typeof window !== \"undefined\") {\n    return window.console;\n  }\n\n  return global.console;\n}\n\nvar console = getConsole();\n\nfunction cached(fn) {\n  var cache = F_source_vuedraggable_node_modules_babel_runtime_corejs2_core_js_object_create__WEBPACK_IMPORTED_MODULE_1___default()(null);\n\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\nvar regex = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(regex, function (_, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n});\n\nfunction removeNode(node) {\n  if (node.parentElement !== null) {\n    node.parentElement.removeChild(node);\n  }\n}\n\nfunction insertNodeAt(fatherNode, node, position) {\n  var refNode = position === 0 ? fatherNode.children[0] : fatherNode.children[position - 1].nextSibling;\n  fatherNode.insertBefore(node, refNode);\n}\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(\"c8ba\")))\n\n/***/ }),\n\n/***/ \"c69a\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = !__webpack_require__(\"9e1e\") && !__webpack_require__(\"79e5\")(function () {\n  return Object.defineProperty(__webpack_require__(\"230e\")('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n\n/***/ \"c8ba\":\n/***/ (function(module, exports) {\n\nvar g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n/***/ }),\n\n/***/ \"c8bb\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"54a1\");\n\n/***/ }),\n\n/***/ \"ca5a\":\n/***/ (function(module, exports) {\n\nvar id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n\n/***/ }),\n\n/***/ \"cb7c\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(\"d3f4\");\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"ce7e\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// most Object methods by ES6 should accept primitives\nvar $export = __webpack_require__(\"63b6\");\nvar core = __webpack_require__(\"584a\");\nvar fails = __webpack_require__(\"294c\");\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n\n\n/***/ }),\n\n/***/ \"d2c8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = __webpack_require__(\"aae3\");\nvar defined = __webpack_require__(\"be13\");\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n\n\n/***/ }),\n\n/***/ \"d2d5\":\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"1654\");\n__webpack_require__(\"549b\");\nmodule.exports = __webpack_require__(\"584a\").Array.from;\n\n\n/***/ }),\n\n/***/ \"d3f4\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n/***/ }),\n\n/***/ \"d864\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// optional / simple context binding\nvar aFunction = __webpack_require__(\"79aa\");\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n/***/ }),\n\n/***/ \"d8e8\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"d9f6\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject = __webpack_require__(\"e4ae\");\nvar IE8_DOM_DEFINE = __webpack_require__(\"794b\");\nvar toPrimitive = __webpack_require__(\"1bc3\");\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(\"8e60\") ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n/***/ }),\n\n/***/ \"dbdb\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar core = __webpack_require__(\"584a\");\nvar global = __webpack_require__(\"e53d\");\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: __webpack_require__(\"b8e3\") ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n\n\n/***/ }),\n\n/***/ \"dc62\":\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"9427\");\nvar $Object = __webpack_require__(\"584a\").Object;\nmodule.exports = function create(P, D) {\n  return $Object.create(P, D);\n};\n\n\n/***/ }),\n\n/***/ \"e4ae\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(\"f772\");\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"e53d\":\n/***/ (function(module, exports) {\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n/***/ }),\n\n/***/ \"e6f3\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar has = __webpack_require__(\"07e3\");\nvar toIObject = __webpack_require__(\"36c3\");\nvar arrayIndexOf = __webpack_require__(\"5b4e\")(false);\nvar IE_PROTO = __webpack_require__(\"5559\")('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n\n/***/ }),\n\n/***/ \"f410\":\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"1af6\");\nmodule.exports = __webpack_require__(\"584a\").Array.isArray;\n\n\n/***/ }),\n\n/***/ \"f559\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n\nvar $export = __webpack_require__(\"5ca1\");\nvar toLength = __webpack_require__(\"9def\");\nvar context = __webpack_require__(\"d2c8\");\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * __webpack_require__(\"5147\")(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"f772\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n/***/ }),\n\n/***/ \"fa5b\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"5537\")('native-function-to-string', Function.toString);\n\n\n/***/ }),\n\n/***/ \"fb15\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js\n// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  var setPublicPath_i\n  if ((setPublicPath_i = window.document.currentScript) && (setPublicPath_i = setPublicPath_i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_require__.p = setPublicPath_i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\n/* harmony default export */ var setPublicPath = (null);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime-corejs2/core-js/object/assign.js\nvar object_assign = __webpack_require__(\"5176\");\nvar assign_default = /*#__PURE__*/__webpack_require__.n(object_assign);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.starts-with.js\nvar es6_string_starts_with = __webpack_require__(\"f559\");\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime-corejs2/core-js/object/keys.js\nvar keys = __webpack_require__(\"a4bb\");\nvar keys_default = /*#__PURE__*/__webpack_require__.n(keys);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime-corejs2/core-js/array/is-array.js\nvar is_array = __webpack_require__(\"a745\");\nvar is_array_default = /*#__PURE__*/__webpack_require__.n(is_array);\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/arrayWithHoles.js\n\nfunction _arrayWithHoles(arr) {\n  if (is_array_default()(arr)) return arr;\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime-corejs2/core-js/get-iterator.js\nvar get_iterator = __webpack_require__(\"5d73\");\nvar get_iterator_default = /*#__PURE__*/__webpack_require__.n(get_iterator);\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/iterableToArrayLimit.js\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = get_iterator_default()(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/nonIterableRest.js\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js\n\n\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es7.array.includes.js\nvar es7_array_includes = __webpack_require__(\"6762\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.includes.js\nvar es6_string_includes = __webpack_require__(\"2fdb\");\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/arrayWithoutHoles.js\n\nfunction _arrayWithoutHoles(arr) {\n  if (is_array_default()(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime-corejs2/core-js/array/from.js\nvar from = __webpack_require__(\"774e\");\nvar from_default = /*#__PURE__*/__webpack_require__.n(from);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime-corejs2/core-js/is-iterable.js\nvar is_iterable = __webpack_require__(\"c8bb\");\nvar is_iterable_default = /*#__PURE__*/__webpack_require__.n(is_iterable);\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/iterableToArray.js\n\n\nfunction _iterableToArray(iter) {\n  if (is_iterable_default()(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return from_default()(iter);\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray.js\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n// EXTERNAL MODULE: external {\"commonjs\":\"sortablejs\",\"commonjs2\":\"sortablejs\",\"amd\":\"sortablejs\",\"root\":\"Sortable\"}\nvar external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_ = __webpack_require__(\"a352\");\nvar external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_default = /*#__PURE__*/__webpack_require__.n(external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_);\n\n// EXTERNAL MODULE: ./src/util/helper.js\nvar helper = __webpack_require__(\"c649\");\n\n// CONCATENATED MODULE: ./src/vuedraggable.js\n\n\n\n\n\n\n\n\n\n\nfunction buildAttribute(object, propName, value) {\n  if (value === undefined) {\n    return object;\n  }\n\n  object = object || {};\n  object[propName] = value;\n  return object;\n}\n\nfunction computeVmIndex(vnodes, element) {\n  return vnodes.map(function (elt) {\n    return elt.elm;\n  }).indexOf(element);\n}\n\nfunction _computeIndexes(slots, children, isTransition, footerOffset) {\n  if (!slots) {\n    return [];\n  }\n\n  var elmFromNodes = slots.map(function (elt) {\n    return elt.elm;\n  });\n  var footerIndex = children.length - footerOffset;\n\n  var rawIndexes = _toConsumableArray(children).map(function (elt, idx) {\n    return idx >= footerIndex ? elmFromNodes.length : elmFromNodes.indexOf(elt);\n  });\n\n  return isTransition ? rawIndexes.filter(function (ind) {\n    return ind !== -1;\n  }) : rawIndexes;\n}\n\nfunction emit(evtName, evtData) {\n  var _this = this;\n\n  this.$nextTick(function () {\n    return _this.$emit(evtName.toLowerCase(), evtData);\n  });\n}\n\nfunction delegateAndEmit(evtName) {\n  var _this2 = this;\n\n  return function (evtData) {\n    if (_this2.realList !== null) {\n      _this2[\"onDrag\" + evtName](evtData);\n    }\n\n    emit.call(_this2, evtName, evtData);\n  };\n}\n\nfunction isTransitionName(name) {\n  return [\"transition-group\", \"TransitionGroup\"].includes(name);\n}\n\nfunction vuedraggable_isTransition(slots) {\n  if (!slots || slots.length !== 1) {\n    return false;\n  }\n\n  var _slots = _slicedToArray(slots, 1),\n      componentOptions = _slots[0].componentOptions;\n\n  if (!componentOptions) {\n    return false;\n  }\n\n  return isTransitionName(componentOptions.tag);\n}\n\nfunction getSlot(slot, scopedSlot, key) {\n  return slot[key] || (scopedSlot[key] ? scopedSlot[key]() : undefined);\n}\n\nfunction computeChildrenAndOffsets(children, slot, scopedSlot) {\n  var headerOffset = 0;\n  var footerOffset = 0;\n  var header = getSlot(slot, scopedSlot, \"header\");\n\n  if (header) {\n    headerOffset = header.length;\n    children = children ? [].concat(_toConsumableArray(header), _toConsumableArray(children)) : _toConsumableArray(header);\n  }\n\n  var footer = getSlot(slot, scopedSlot, \"footer\");\n\n  if (footer) {\n    footerOffset = footer.length;\n    children = children ? [].concat(_toConsumableArray(children), _toConsumableArray(footer)) : _toConsumableArray(footer);\n  }\n\n  return {\n    children: children,\n    headerOffset: headerOffset,\n    footerOffset: footerOffset\n  };\n}\n\nfunction getComponentAttributes($attrs, componentData) {\n  var attributes = null;\n\n  var update = function update(name, value) {\n    attributes = buildAttribute(attributes, name, value);\n  };\n\n  var attrs = keys_default()($attrs).filter(function (key) {\n    return key === \"id\" || key.startsWith(\"data-\");\n  }).reduce(function (res, key) {\n    res[key] = $attrs[key];\n    return res;\n  }, {});\n\n  update(\"attrs\", attrs);\n\n  if (!componentData) {\n    return attributes;\n  }\n\n  var on = componentData.on,\n      props = componentData.props,\n      componentDataAttrs = componentData.attrs;\n  update(\"on\", on);\n  update(\"props\", props);\n\n  assign_default()(attributes.attrs, componentDataAttrs);\n\n  return attributes;\n}\n\nvar eventsListened = [\"Start\", \"Add\", \"Remove\", \"Update\", \"End\"];\nvar eventsToEmit = [\"Choose\", \"Unchoose\", \"Sort\", \"Filter\", \"Clone\"];\nvar readonlyProperties = [\"Move\"].concat(eventsListened, eventsToEmit).map(function (evt) {\n  return \"on\" + evt;\n});\nvar draggingElement = null;\nvar vuedraggable_props = {\n  options: Object,\n  list: {\n    type: Array,\n    required: false,\n    default: null\n  },\n  value: {\n    type: Array,\n    required: false,\n    default: null\n  },\n  noTransitionOnDrag: {\n    type: Boolean,\n    default: false\n  },\n  clone: {\n    type: Function,\n    default: function _default(original) {\n      return original;\n    }\n  },\n  element: {\n    type: String,\n    default: \"div\"\n  },\n  tag: {\n    type: String,\n    default: null\n  },\n  move: {\n    type: Function,\n    default: null\n  },\n  componentData: {\n    type: Object,\n    required: false,\n    default: null\n  }\n};\nvar draggableComponent = {\n  name: \"draggable\",\n  inheritAttrs: false,\n  props: vuedraggable_props,\n  data: function data() {\n    return {\n      transitionMode: false,\n      noneFunctionalComponentMode: false\n    };\n  },\n  render: function render(h) {\n    var slots = this.$slots.default;\n    this.transitionMode = vuedraggable_isTransition(slots);\n\n    var _computeChildrenAndOf = computeChildrenAndOffsets(slots, this.$slots, this.$scopedSlots),\n        children = _computeChildrenAndOf.children,\n        headerOffset = _computeChildrenAndOf.headerOffset,\n        footerOffset = _computeChildrenAndOf.footerOffset;\n\n    this.headerOffset = headerOffset;\n    this.footerOffset = footerOffset;\n    var attributes = getComponentAttributes(this.$attrs, this.componentData);\n    return h(this.getTag(), attributes, children);\n  },\n  created: function created() {\n    if (this.list !== null && this.value !== null) {\n      helper[\"b\" /* console */].error(\"Value and list props are mutually exclusive! Please set one or another.\");\n    }\n\n    if (this.element !== \"div\") {\n      helper[\"b\" /* console */].warn(\"Element props is deprecated please use tag props instead. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#element-props\");\n    }\n\n    if (this.options !== undefined) {\n      helper[\"b\" /* console */].warn(\"Options props is deprecated, add sortable options directly as vue.draggable item, or use v-bind. See https://github.com/SortableJS/Vue.Draggable/blob/master/documentation/migrate.md#options-props\");\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n\n    this.noneFunctionalComponentMode = this.getTag().toLowerCase() !== this.$el.nodeName.toLowerCase() && !this.getIsFunctional();\n\n    if (this.noneFunctionalComponentMode && this.transitionMode) {\n      throw new Error(\"Transition-group inside component is not supported. Please alter tag value or remove transition-group. Current tag value: \".concat(this.getTag()));\n    }\n\n    var optionsAdded = {};\n    eventsListened.forEach(function (elt) {\n      optionsAdded[\"on\" + elt] = delegateAndEmit.call(_this3, elt);\n    });\n    eventsToEmit.forEach(function (elt) {\n      optionsAdded[\"on\" + elt] = emit.bind(_this3, elt);\n    });\n\n    var attributes = keys_default()(this.$attrs).reduce(function (res, key) {\n      res[Object(helper[\"a\" /* camelize */])(key)] = _this3.$attrs[key];\n      return res;\n    }, {});\n\n    var options = assign_default()({}, this.options, attributes, optionsAdded, {\n      onMove: function onMove(evt, originalEvent) {\n        return _this3.onDragMove(evt, originalEvent);\n      }\n    });\n\n    !(\"draggable\" in options) && (options.draggable = \">*\");\n    this._sortable = new external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_default.a(this.rootContainer, options);\n    this.computeIndexes();\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this._sortable !== undefined) this._sortable.destroy();\n  },\n  computed: {\n    rootContainer: function rootContainer() {\n      return this.transitionMode ? this.$el.children[0] : this.$el;\n    },\n    realList: function realList() {\n      return this.list ? this.list : this.value;\n    }\n  },\n  watch: {\n    options: {\n      handler: function handler(newOptionValue) {\n        this.updateOptions(newOptionValue);\n      },\n      deep: true\n    },\n    $attrs: {\n      handler: function handler(newOptionValue) {\n        this.updateOptions(newOptionValue);\n      },\n      deep: true\n    },\n    realList: function realList() {\n      this.computeIndexes();\n    }\n  },\n  methods: {\n    getIsFunctional: function getIsFunctional() {\n      var fnOptions = this._vnode.fnOptions;\n      return fnOptions && fnOptions.functional;\n    },\n    getTag: function getTag() {\n      return this.tag || this.element;\n    },\n    updateOptions: function updateOptions(newOptionValue) {\n      for (var property in newOptionValue) {\n        var value = Object(helper[\"a\" /* camelize */])(property);\n\n        if (readonlyProperties.indexOf(value) === -1) {\n          this._sortable.option(value, newOptionValue[property]);\n        }\n      }\n    },\n    getChildrenNodes: function getChildrenNodes() {\n      if (this.noneFunctionalComponentMode) {\n        return this.$children[0].$slots.default;\n      }\n\n      var rawNodes = this.$slots.default;\n      return this.transitionMode ? rawNodes[0].child.$slots.default : rawNodes;\n    },\n    computeIndexes: function computeIndexes() {\n      var _this4 = this;\n\n      this.$nextTick(function () {\n        _this4.visibleIndexes = _computeIndexes(_this4.getChildrenNodes(), _this4.rootContainer.children, _this4.transitionMode, _this4.footerOffset);\n      });\n    },\n    getUnderlyingVm: function getUnderlyingVm(htmlElt) {\n      var index = computeVmIndex(this.getChildrenNodes() || [], htmlElt);\n\n      if (index === -1) {\n        //Edge case during move callback: related element might be\n        //an element different from collection\n        return null;\n      }\n\n      var element = this.realList[index];\n      return {\n        index: index,\n        element: element\n      };\n    },\n    getUnderlyingPotencialDraggableComponent: function getUnderlyingPotencialDraggableComponent(_ref) {\n      var vue = _ref.__vue__;\n\n      if (!vue || !vue.$options || !isTransitionName(vue.$options._componentTag)) {\n        if (!(\"realList\" in vue) && vue.$children.length === 1 && \"realList\" in vue.$children[0]) return vue.$children[0];\n        return vue;\n      }\n\n      return vue.$parent;\n    },\n    emitChanges: function emitChanges(evt) {\n      var _this5 = this;\n\n      this.$nextTick(function () {\n        _this5.$emit(\"change\", evt);\n      });\n    },\n    alterList: function alterList(onList) {\n      if (this.list) {\n        onList(this.list);\n        return;\n      }\n\n      var newList = _toConsumableArray(this.value);\n\n      onList(newList);\n      this.$emit(\"input\", newList);\n    },\n    spliceList: function spliceList() {\n      var _arguments = arguments;\n\n      var spliceList = function spliceList(list) {\n        return list.splice.apply(list, _toConsumableArray(_arguments));\n      };\n\n      this.alterList(spliceList);\n    },\n    updatePosition: function updatePosition(oldIndex, newIndex) {\n      var updatePosition = function updatePosition(list) {\n        return list.splice(newIndex, 0, list.splice(oldIndex, 1)[0]);\n      };\n\n      this.alterList(updatePosition);\n    },\n    getRelatedContextFromMoveEvent: function getRelatedContextFromMoveEvent(_ref2) {\n      var to = _ref2.to,\n          related = _ref2.related;\n      var component = this.getUnderlyingPotencialDraggableComponent(to);\n\n      if (!component) {\n        return {\n          component: component\n        };\n      }\n\n      var list = component.realList;\n      var context = {\n        list: list,\n        component: component\n      };\n\n      if (to !== related && list && component.getUnderlyingVm) {\n        var destination = component.getUnderlyingVm(related);\n\n        if (destination) {\n          return assign_default()(destination, context);\n        }\n      }\n\n      return context;\n    },\n    getVmIndex: function getVmIndex(domIndex) {\n      var indexes = this.visibleIndexes;\n      var numberIndexes = indexes.length;\n      return domIndex > numberIndexes - 1 ? numberIndexes : indexes[domIndex];\n    },\n    getComponent: function getComponent() {\n      return this.$slots.default[0].componentInstance;\n    },\n    resetTransitionData: function resetTransitionData(index) {\n      if (!this.noTransitionOnDrag || !this.transitionMode) {\n        return;\n      }\n\n      var nodes = this.getChildrenNodes();\n      nodes[index].data = null;\n      var transitionContainer = this.getComponent();\n      transitionContainer.children = [];\n      transitionContainer.kept = undefined;\n    },\n    onDragStart: function onDragStart(evt) {\n      this.context = this.getUnderlyingVm(evt.item);\n      evt.item._underlying_vm_ = this.clone(this.context.element);\n      draggingElement = evt.item;\n    },\n    onDragAdd: function onDragAdd(evt) {\n      var element = evt.item._underlying_vm_;\n\n      if (element === undefined) {\n        return;\n      }\n\n      Object(helper[\"d\" /* removeNode */])(evt.item);\n      var newIndex = this.getVmIndex(evt.newIndex);\n      this.spliceList(newIndex, 0, element);\n      this.computeIndexes();\n      var added = {\n        element: element,\n        newIndex: newIndex\n      };\n      this.emitChanges({\n        added: added\n      });\n    },\n    onDragRemove: function onDragRemove(evt) {\n      Object(helper[\"c\" /* insertNodeAt */])(this.rootContainer, evt.item, evt.oldIndex);\n\n      if (evt.pullMode === \"clone\") {\n        Object(helper[\"d\" /* removeNode */])(evt.clone);\n        return;\n      }\n\n      var oldIndex = this.context.index;\n      this.spliceList(oldIndex, 1);\n      var removed = {\n        element: this.context.element,\n        oldIndex: oldIndex\n      };\n      this.resetTransitionData(oldIndex);\n      this.emitChanges({\n        removed: removed\n      });\n    },\n    onDragUpdate: function onDragUpdate(evt) {\n      Object(helper[\"d\" /* removeNode */])(evt.item);\n      Object(helper[\"c\" /* insertNodeAt */])(evt.from, evt.item, evt.oldIndex);\n      var oldIndex = this.context.index;\n      var newIndex = this.getVmIndex(evt.newIndex);\n      this.updatePosition(oldIndex, newIndex);\n      var moved = {\n        element: this.context.element,\n        oldIndex: oldIndex,\n        newIndex: newIndex\n      };\n      this.emitChanges({\n        moved: moved\n      });\n    },\n    updateProperty: function updateProperty(evt, propertyName) {\n      evt.hasOwnProperty(propertyName) && (evt[propertyName] += this.headerOffset);\n    },\n    computeFutureIndex: function computeFutureIndex(relatedContext, evt) {\n      if (!relatedContext.element) {\n        return 0;\n      }\n\n      var domChildren = _toConsumableArray(evt.to.children).filter(function (el) {\n        return el.style[\"display\"] !== \"none\";\n      });\n\n      var currentDOMIndex = domChildren.indexOf(evt.related);\n      var currentIndex = relatedContext.component.getVmIndex(currentDOMIndex);\n      var draggedInList = domChildren.indexOf(draggingElement) !== -1;\n      return draggedInList || !evt.willInsertAfter ? currentIndex : currentIndex + 1;\n    },\n    onDragMove: function onDragMove(evt, originalEvent) {\n      var onMove = this.move;\n\n      if (!onMove || !this.realList) {\n        return true;\n      }\n\n      var relatedContext = this.getRelatedContextFromMoveEvent(evt);\n      var draggedContext = this.context;\n      var futureIndex = this.computeFutureIndex(relatedContext, evt);\n\n      assign_default()(draggedContext, {\n        futureIndex: futureIndex\n      });\n\n      var sendEvt = assign_default()({}, evt, {\n        relatedContext: relatedContext,\n        draggedContext: draggedContext\n      });\n\n      return onMove(sendEvt, originalEvent);\n    },\n    onDragEnd: function onDragEnd() {\n      this.computeIndexes();\n      draggingElement = null;\n    }\n  }\n};\n\nif (typeof window !== \"undefined\" && \"Vue\" in window) {\n  window.Vue.component(\"draggable\", draggableComponent);\n}\n\n/* harmony default export */ var vuedraggable = (draggableComponent);\n// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js\n\n\n/* harmony default export */ var entry_lib = __webpack_exports__[\"default\"] = (vuedraggable);\n\n\n\n/***/ })\n\n/******/ })[\"default\"];\n//# sourceMappingURL=vuedraggable.common.js.map\n\n//# sourceURL=webpack:///./node_modules/vuedraggable/dist/vuedraggable.common.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _moduels__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./moduels */ \"./src/js/moduels.js\");\n/* harmony import */ var _modules_onload__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/onload */ \"./src/js/modules/onload.js\");\n/* harmony import */ var _components_form_Select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/form/Select */ \"./src/js/components/form/Select.vue\");\n/* harmony import */ var _components_form_MultiSelect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/form/MultiSelect */ \"./src/js/components/form/MultiSelect.vue\");\n/* harmony import */ var _components_form_File__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/form/File */ \"./src/js/components/form/File.vue\");\n/* harmony import */ var _components_LoginForm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/LoginForm */ \"./src/js/components/LoginForm.vue\");\n/* harmony import */ var _components_form_ImageIterator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/form/ImageIterator */ \"./src/js/components/form/ImageIterator.vue\");\n/* harmony import */ var vee_validate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! vee-validate */ \"./node_modules/vee-validate/dist/vee-validate.esm.js\");\n/* harmony import */ var vee_validate_dist_locale_ru__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! vee-validate/dist/locale/ru */ \"./node_modules/vee-validate/dist/locale/ru.js\");\n/* harmony import */ var vee_validate_dist_locale_ru__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(vee_validate_dist_locale_ru__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\");\n// Vue main file\n\n\n\n\n\n\n\n\n\n\n\nwindow.onload = function () {\n  Object(_moduels__WEBPACK_IMPORTED_MODULE_0__[\"main\"])();\n  Object(_modules_onload__WEBPACK_IMPORTED_MODULE_1__[\"onload\"])();\n}; // ----------------------use-section-------------------------------------------->\n\n\nvue__WEBPACK_IMPORTED_MODULE_9__[\"default\"].use(vee_validate__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {\n  classes: true,\n  classNames: {\n    valid: 'is-valid',\n    invalid: 'is-invalid'\n  }\n});\nvee_validate__WEBPACK_IMPORTED_MODULE_7__[\"Validator\"].localize('ru', vee_validate_dist_locale_ru__WEBPACK_IMPORTED_MODULE_8___default.a); // ----------------------------------------------------------------------------->\n// ----------------------component-section-------------------------------------->\n\nvue__WEBPACK_IMPORTED_MODULE_9__[\"default\"].component('select-single', _components_form_Select__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\nvue__WEBPACK_IMPORTED_MODULE_9__[\"default\"].component('select-multi', _components_form_MultiSelect__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\nvue__WEBPACK_IMPORTED_MODULE_9__[\"default\"].component('login-form', _components_LoginForm__WEBPACK_IMPORTED_MODULE_5__[\"default\"]);\nvue__WEBPACK_IMPORTED_MODULE_9__[\"default\"].component('form-file', _components_form_File__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\nvue__WEBPACK_IMPORTED_MODULE_9__[\"default\"].component('image-iterator', _components_form_ImageIterator__WEBPACK_IMPORTED_MODULE_6__[\"default\"]); // ----------------------------------------------------------------------------->\n// ---------------------Main-instance-of-Vue------------------------------------>\n\nvar app = new vue__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({\n  el: '#app'\n}); // -------------------------Instances-of-Vue------------------------------------>\n// ----------------------------------------------------------------------------->\n\n//# sourceURL=webpack:///./src/js/app.js?");

/***/ }),

/***/ "./src/js/components/LoginForm.vue":
/*!*****************************************!*\
  !*** ./src/js/components/LoginForm.vue ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _LoginForm_vue_vue_type_template_id_b397ab9e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LoginForm.vue?vue&type=template&id=b397ab9e& */ \"./src/js/components/LoginForm.vue?vue&type=template&id=b397ab9e&\");\n/* harmony import */ var _LoginForm_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LoginForm.vue?vue&type=script&lang=js& */ \"./src/js/components/LoginForm.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _LoginForm_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _LoginForm_vue_vue_type_template_id_b397ab9e___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _LoginForm_vue_vue_type_template_id_b397ab9e___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"src/js/components/LoginForm.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./src/js/components/LoginForm.vue?");

/***/ }),

/***/ "./src/js/components/LoginForm.vue?vue&type=script&lang=js&":
/*!******************************************************************!*\
  !*** ./src/js/components/LoginForm.vue?vue&type=script&lang=js& ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_LoginForm_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib!../../../node_modules/vue-loader/lib??vue-loader-options!./LoginForm.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/js/components/LoginForm.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_LoginForm_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./src/js/components/LoginForm.vue?");

/***/ }),

/***/ "./src/js/components/LoginForm.vue?vue&type=template&id=b397ab9e&":
/*!************************************************************************!*\
  !*** ./src/js/components/LoginForm.vue?vue&type=template&id=b397ab9e& ***!
  \************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_LoginForm_vue_vue_type_template_id_b397ab9e___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib??vue-loader-options!./LoginForm.vue?vue&type=template&id=b397ab9e& */ \"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/js/components/LoginForm.vue?vue&type=template&id=b397ab9e&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_LoginForm_vue_vue_type_template_id_b397ab9e___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_LoginForm_vue_vue_type_template_id_b397ab9e___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./src/js/components/LoginForm.vue?");

/***/ }),

/***/ "./src/js/components/form/File.vue":
/*!*****************************************!*\
  !*** ./src/js/components/form/File.vue ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _File_vue_vue_type_template_id_5191c18b___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./File.vue?vue&type=template&id=5191c18b& */ \"./src/js/components/form/File.vue?vue&type=template&id=5191c18b&\");\n/* harmony import */ var _File_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./File.vue?vue&type=script&lang=js& */ \"./src/js/components/form/File.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _File_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _File_vue_vue_type_template_id_5191c18b___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _File_vue_vue_type_template_id_5191c18b___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"src/js/components/form/File.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./src/js/components/form/File.vue?");

/***/ }),

/***/ "./src/js/components/form/File.vue?vue&type=script&lang=js&":
/*!******************************************************************!*\
  !*** ./src/js/components/form/File.vue?vue&type=script&lang=js& ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_File_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib!../../../../node_modules/vue-loader/lib??vue-loader-options!./File.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/File.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_File_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./src/js/components/form/File.vue?");

/***/ }),

/***/ "./src/js/components/form/File.vue?vue&type=template&id=5191c18b&":
/*!************************************************************************!*\
  !*** ./src/js/components/form/File.vue?vue&type=template&id=5191c18b& ***!
  \************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_File_vue_vue_type_template_id_5191c18b___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./File.vue?vue&type=template&id=5191c18b& */ \"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/File.vue?vue&type=template&id=5191c18b&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_File_vue_vue_type_template_id_5191c18b___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_File_vue_vue_type_template_id_5191c18b___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./src/js/components/form/File.vue?");

/***/ }),

/***/ "./src/js/components/form/ImageIterator.vue":
/*!**************************************************!*\
  !*** ./src/js/components/form/ImageIterator.vue ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ImageIterator_vue_vue_type_template_id_9d90412c___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ImageIterator.vue?vue&type=template&id=9d90412c& */ \"./src/js/components/form/ImageIterator.vue?vue&type=template&id=9d90412c&\");\n/* harmony import */ var _ImageIterator_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ImageIterator.vue?vue&type=script&lang=js& */ \"./src/js/components/form/ImageIterator.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _ImageIterator_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _ImageIterator_vue_vue_type_template_id_9d90412c___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _ImageIterator_vue_vue_type_template_id_9d90412c___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"src/js/components/form/ImageIterator.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./src/js/components/form/ImageIterator.vue?");

/***/ }),

/***/ "./src/js/components/form/ImageIterator.vue?vue&type=script&lang=js&":
/*!***************************************************************************!*\
  !*** ./src/js/components/form/ImageIterator.vue?vue&type=script&lang=js& ***!
  \***************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_ImageIterator_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib!../../../../node_modules/vue-loader/lib??vue-loader-options!./ImageIterator.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/ImageIterator.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_ImageIterator_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./src/js/components/form/ImageIterator.vue?");

/***/ }),

/***/ "./src/js/components/form/ImageIterator.vue?vue&type=template&id=9d90412c&":
/*!*********************************************************************************!*\
  !*** ./src/js/components/form/ImageIterator.vue?vue&type=template&id=9d90412c& ***!
  \*********************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_ImageIterator_vue_vue_type_template_id_9d90412c___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./ImageIterator.vue?vue&type=template&id=9d90412c& */ \"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/ImageIterator.vue?vue&type=template&id=9d90412c&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_ImageIterator_vue_vue_type_template_id_9d90412c___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_ImageIterator_vue_vue_type_template_id_9d90412c___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./src/js/components/form/ImageIterator.vue?");

/***/ }),

/***/ "./src/js/components/form/MultiSelect.vue":
/*!************************************************!*\
  !*** ./src/js/components/form/MultiSelect.vue ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MultiSelect_vue_vue_type_template_id_a401e754___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MultiSelect.vue?vue&type=template&id=a401e754& */ \"./src/js/components/form/MultiSelect.vue?vue&type=template&id=a401e754&\");\n/* harmony import */ var _MultiSelect_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MultiSelect.vue?vue&type=script&lang=js& */ \"./src/js/components/form/MultiSelect.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _MultiSelect_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _MultiSelect_vue_vue_type_template_id_a401e754___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _MultiSelect_vue_vue_type_template_id_a401e754___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"src/js/components/form/MultiSelect.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./src/js/components/form/MultiSelect.vue?");

/***/ }),

/***/ "./src/js/components/form/MultiSelect.vue?vue&type=script&lang=js&":
/*!*************************************************************************!*\
  !*** ./src/js/components/form/MultiSelect.vue?vue&type=script&lang=js& ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_MultiSelect_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib!../../../../node_modules/vue-loader/lib??vue-loader-options!./MultiSelect.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/MultiSelect.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_MultiSelect_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./src/js/components/form/MultiSelect.vue?");

/***/ }),

/***/ "./src/js/components/form/MultiSelect.vue?vue&type=template&id=a401e754&":
/*!*******************************************************************************!*\
  !*** ./src/js/components/form/MultiSelect.vue?vue&type=template&id=a401e754& ***!
  \*******************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_MultiSelect_vue_vue_type_template_id_a401e754___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./MultiSelect.vue?vue&type=template&id=a401e754& */ \"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/MultiSelect.vue?vue&type=template&id=a401e754&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_MultiSelect_vue_vue_type_template_id_a401e754___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_MultiSelect_vue_vue_type_template_id_a401e754___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./src/js/components/form/MultiSelect.vue?");

/***/ }),

/***/ "./src/js/components/form/Select.vue":
/*!*******************************************!*\
  !*** ./src/js/components/form/Select.vue ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Select_vue_vue_type_template_id_b5f5816a___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Select.vue?vue&type=template&id=b5f5816a& */ \"./src/js/components/form/Select.vue?vue&type=template&id=b5f5816a&\");\n/* harmony import */ var _Select_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Select.vue?vue&type=script&lang=js& */ \"./src/js/components/form/Select.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _Select_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _Select_vue_vue_type_template_id_b5f5816a___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _Select_vue_vue_type_template_id_b5f5816a___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"src/js/components/form/Select.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);\n\n//# sourceURL=webpack:///./src/js/components/form/Select.vue?");

/***/ }),

/***/ "./src/js/components/form/Select.vue?vue&type=script&lang=js&":
/*!********************************************************************!*\
  !*** ./src/js/components/form/Select.vue?vue&type=script&lang=js& ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib!../../../../node_modules/vue-loader/lib??vue-loader-options!./Select.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/Select.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); \n\n//# sourceURL=webpack:///./src/js/components/form/Select.vue?");

/***/ }),

/***/ "./src/js/components/form/Select.vue?vue&type=template&id=b5f5816a&":
/*!**************************************************************************!*\
  !*** ./src/js/components/form/Select.vue?vue&type=template&id=b5f5816a& ***!
  \**************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_template_id_b5f5816a___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../node_modules/vue-loader/lib??vue-loader-options!./Select.vue?vue&type=template&id=b5f5816a& */ \"./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/js/components/form/Select.vue?vue&type=template&id=b5f5816a&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_template_id_b5f5816a___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Select_vue_vue_type_template_id_b5f5816a___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n\n\n//# sourceURL=webpack:///./src/js/components/form/Select.vue?");

/***/ }),

/***/ "./src/js/moduels.js":
/*!***************************!*\
  !*** ./src/js/moduels.js ***!
  \***************************/
/*! exports provided: main */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"main\", function() { return main; });\n/* harmony import */ var _modules_forms_main__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/forms/main */ \"./src/js/modules/forms/main.js\");\n/* harmony import */ var _modules_menu_main__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/menu/main */ \"./src/js/modules/menu/main.js\");\n/* harmony import */ var _modules_header_main__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/header/main */ \"./src/js/modules/header/main.js\");\n/* harmony import */ var _modules_filemanager_main__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/filemanager/main */ \"./src/js/modules/filemanager/main.js\");\n// Pure JS main file\n\n\n\n\n\nvar main = function main() {\n  Object(_modules_forms_main__WEBPACK_IMPORTED_MODULE_0__[\"formsModule\"])();\n  Object(_modules_menu_main__WEBPACK_IMPORTED_MODULE_1__[\"menuModule\"])();\n  Object(_modules_header_main__WEBPACK_IMPORTED_MODULE_2__[\"headerModule\"])();\n  Object(_modules_filemanager_main__WEBPACK_IMPORTED_MODULE_3__[\"filemanagerModule\"])();\n};\n\n\n\n//# sourceURL=webpack:///./src/js/moduels.js?");

/***/ }),

/***/ "./src/js/modules/filemanager/events.js":
/*!**********************************************!*\
  !*** ./src/js/modules/filemanager/events.js ***!
  \**********************************************/
/*! exports provided: lfm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lfm\", function() { return lfm; });\nvar lfm = function lfm(options, cb) {\n  var route_prefix = options && options.prefix ? options.prefix : '/laravel-filemanager';\n  window.open(route_prefix + '?type=' + options.type || 'file', 'FileManager', 'width=1200,height=900');\n  window.SetUrl = cb;\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/filemanager/events.js?");

/***/ }),

/***/ "./src/js/modules/filemanager/listeners.js":
/*!*************************************************!*\
  !*** ./src/js/modules/filemanager/listeners.js ***!
  \*************************************************/
/*! exports provided: listeners */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"listeners\", function() { return listeners; });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"./src/js/modules/filemanager/events.js\");\n\n\nvar listeners = function listeners() {\n  managerOpen();\n};\n\nvar managerOpen = function managerOpen() {\n  var items = document.querySelectorAll('.js-manager-open');\n\n  for (var i = 0; i < items.length; i++) {\n    items[i].addEventListener('click', function () {\n      console.log(this);\n      console.log(this.nextSibling);\n      Object(_events__WEBPACK_IMPORTED_MODULE_0__[\"lfm\"])({\n        type: 'image',\n        prefix: '/laravel-filemanager'\n      }, function (url, path) {\n        console.log(url);\n        console.log(path);\n      });\n      console.log(123);\n    });\n  }\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/filemanager/listeners.js?");

/***/ }),

/***/ "./src/js/modules/filemanager/main.js":
/*!********************************************!*\
  !*** ./src/js/modules/filemanager/main.js ***!
  \********************************************/
/*! exports provided: filemanagerModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"filemanagerModule\", function() { return filemanagerModule; });\n/* harmony import */ var _listeners__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./listeners */ \"./src/js/modules/filemanager/listeners.js\");\n\n\nvar filemanagerModule = function filemanagerModule() {\n  Object(_listeners__WEBPACK_IMPORTED_MODULE_0__[\"listeners\"])();\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/filemanager/main.js?");

/***/ }),

/***/ "./src/js/modules/forms/events.js":
/*!****************************************!*\
  !*** ./src/js/modules/forms/events.js ***!
  \****************************************/
/*! exports provided: tabChange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tabChange\", function() { return tabChange; });\nvar tabChange = function tabChange() {\n  var tabTitles = document.querySelectorAll('.content-wrapper__tab');\n\n  for (var i = 0; i < tabTitles.length; i++) {\n    tabTitles[i].classList.remove('tab-active');\n  }\n\n  this.classList.add('tab-active');\n  var tabs = document.querySelectorAll('.content-wrapper__tab-form');\n\n  for (var _i = 0; _i < tabs.length; _i++) {\n    tabs[_i].style.display = 'none';\n  }\n\n  var active = document.querySelectorAll('.content-wrapper__tab-form[data-tab=\"' + this.dataset.tab + '\"]')[0];\n  active.style.display = 'block';\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/forms/events.js?");

/***/ }),

/***/ "./src/js/modules/forms/listeners.js":
/*!*******************************************!*\
  !*** ./src/js/modules/forms/listeners.js ***!
  \*******************************************/
/*! exports provided: listeners */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"listeners\", function() { return listeners; });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"./src/js/modules/forms/events.js\");\n\n\nvar listeners = function listeners() {\n  tabs();\n};\n\nvar tabs = function tabs() {\n  var items = document.querySelectorAll('.js-tab-change');\n\n  for (var i = 0; i < items.length; i++) {\n    items[i].addEventListener('click', _events__WEBPACK_IMPORTED_MODULE_0__[\"tabChange\"]);\n  }\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/forms/listeners.js?");

/***/ }),

/***/ "./src/js/modules/forms/main.js":
/*!**************************************!*\
  !*** ./src/js/modules/forms/main.js ***!
  \**************************************/
/*! exports provided: formsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"formsModule\", function() { return formsModule; });\n/* harmony import */ var _listeners__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./listeners */ \"./src/js/modules/forms/listeners.js\");\n\n\nvar formsModule = function formsModule() {\n  Object(_listeners__WEBPACK_IMPORTED_MODULE_0__[\"listeners\"])();\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/forms/main.js?");

/***/ }),

/***/ "./src/js/modules/forms/redactor.js":
/*!******************************************!*\
  !*** ./src/js/modules/forms/redactor.js ***!
  \******************************************/
/*! exports provided: CKEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CKEditor\", function() { return CKEditor; });\n// onload\nvar CKEditor = function CKEditor() {\n  window.tinymce.init({\n    selector: '.js-redactor'\n  });\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/forms/redactor.js?");

/***/ }),

/***/ "./src/js/modules/header/events.js":
/*!*****************************************!*\
  !*** ./src/js/modules/header/events.js ***!
  \*****************************************/
/*! exports provided: logout */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"logout\", function() { return logout; });\nvar logout = function logout() {\n  document.getElementById('logout-form').submit();\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/header/events.js?");

/***/ }),

/***/ "./src/js/modules/header/listeners.js":
/*!********************************************!*\
  !*** ./src/js/modules/header/listeners.js ***!
  \********************************************/
/*! exports provided: listeners */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"listeners\", function() { return listeners; });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"./src/js/modules/header/events.js\");\n\n\nvar listeners = function listeners() {\n  logoutListener();\n};\n\nvar logoutListener = function logoutListener() {\n  var button = document.getElementsByClassName('js-logout')[0];\n  if (button) button.addEventListener('click', _events__WEBPACK_IMPORTED_MODULE_0__[\"logout\"]);\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/header/listeners.js?");

/***/ }),

/***/ "./src/js/modules/header/main.js":
/*!***************************************!*\
  !*** ./src/js/modules/header/main.js ***!
  \***************************************/
/*! exports provided: headerModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"headerModule\", function() { return headerModule; });\n/* harmony import */ var _listeners__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./listeners */ \"./src/js/modules/header/listeners.js\");\n\n\nvar headerModule = function headerModule() {\n  Object(_listeners__WEBPACK_IMPORTED_MODULE_0__[\"listeners\"])();\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/header/main.js?");

/***/ }),

/***/ "./src/js/modules/menu/events.js":
/*!***************************************!*\
  !*** ./src/js/modules/menu/events.js ***!
  \***************************************/
/*! exports provided: menuToggle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"menuToggle\", function() { return menuToggle; });\nvar menuToggle = function menuToggle() {\n  var id = this.dataset.toggle;\n  var children = document.querySelector('.js-menu-item-toggle[data-toggle=\"' + id + '\"]');\n  children.style.display = children.style.display === 'flex' ? 'none' : 'flex';\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/menu/events.js?");

/***/ }),

/***/ "./src/js/modules/menu/listeners.js":
/*!******************************************!*\
  !*** ./src/js/modules/menu/listeners.js ***!
  \******************************************/
/*! exports provided: listeners */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"listeners\", function() { return listeners; });\n/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ \"./src/js/modules/menu/events.js\");\n\n\nvar listeners = function listeners() {\n  menuItem();\n};\n\nvar menuItem = function menuItem() {\n  var items = document.querySelectorAll('.js-menu-item');\n\n  for (var i = 0; i < items.length; i++) {\n    items[i].addEventListener('click', _events__WEBPACK_IMPORTED_MODULE_0__[\"menuToggle\"]);\n  }\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/menu/listeners.js?");

/***/ }),

/***/ "./src/js/modules/menu/main.js":
/*!*************************************!*\
  !*** ./src/js/modules/menu/main.js ***!
  \*************************************/
/*! exports provided: menuModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"menuModule\", function() { return menuModule; });\n/* harmony import */ var _listeners__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./listeners */ \"./src/js/modules/menu/listeners.js\");\n\n\nvar menuModule = function menuModule() {\n  Object(_listeners__WEBPACK_IMPORTED_MODULE_0__[\"listeners\"])();\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/menu/main.js?");

/***/ }),

/***/ "./src/js/modules/onload.js":
/*!**********************************!*\
  !*** ./src/js/modules/onload.js ***!
  \**********************************/
/*! exports provided: onload */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onload\", function() { return onload; });\n/* harmony import */ var _forms_redactor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./forms/redactor */ \"./src/js/modules/forms/redactor.js\");\n\n\nvar onload = function onload() {\n  Object(_forms_redactor__WEBPACK_IMPORTED_MODULE_0__[\"CKEditor\"])();\n};\n\n\n\n//# sourceURL=webpack:///./src/js/modules/onload.js?");

/***/ }),

/***/ 0:
/*!*********************************************************!*\
  !*** multi regenerator-runtime/runtime ./src/js/app.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! regenerator-runtime/runtime */\"./node_modules/regenerator-runtime/runtime.js\");\nmodule.exports = __webpack_require__(/*! ./src/js/app.js */\"./src/js/app.js\");\n\n\n//# sourceURL=webpack:///multi_regenerator-runtime/runtime_./src/js/app.js?");

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf8;base64,
